
code_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  0000076e  00000802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800178  00800178  0000087a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001477  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000828  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079c  00000000  00000000  00002671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007aa  00000000  00000000  000034c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e6       	ldi	r30, 0x6E	; 110
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 37       	cpi	r26, 0x78	; 120
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e7       	ldi	r26, 0x78	; 120
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a7 38       	cpi	r26, 0x87	; 135
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 77 00 	call	0xee	; 0xee <main>
  a6:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	86 bf       	out	0x36, r24	; 54
  ba:	30 98       	cbi	0x06, 0	; 6
  bc:	08 95       	ret

000000be <adc_read>:
  be:	80 93 00 14 	sts	0x1400, r24
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 7c 01 	sts	0x017C, r24
  c8:	80 91 7c 01 	lds	r24, 0x017C
  cc:	81 11       	cpse	r24, r1
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <adc_read+0xa>
  d0:	80 91 00 14 	lds	r24, 0x1400
  d4:	08 95       	ret

000000d6 <__vector_3>:
#define LED 0
#define SW1 1



ISR(INT2_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
	adc_conversion = 0;
  e0:	10 92 7c 01 	sts	0x017C, r1
}
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <main>:

int main(void) {
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	68 97       	sbiw	r28, 0x18	; 24
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << PB0);
 102:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
 104:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PB2);
 106:	ba 98       	cbi	0x17, 2	; 23
	MCUCR |= (1 << SRE);
 108:	85 b7       	in	r24, 0x35	; 53
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	85 bf       	out	0x35, r24	; 53
	uart_init();
 10e:	0e 94 ae 01 	call	0x35c	; 0x35c <uart_init>
	printf("\f");
 112:	8c e0       	ldi	r24, 0x0C	; 12
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 2c 03 	call	0x658	; 0x658 <putchar>
	puts("Uart initialized\r");
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 33 03 	call	0x666	; 0x666 <puts>
	adc_init();
 122:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	puts("ADC initialized\r");
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 33 03 	call	0x666	; 0x666 <puts>
	sei();
 12e:	78 94       	sei
	puts("Global interrupts enabled\r");				
 130:	89 e2       	ldi	r24, 0x29	; 41
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 33 03 	call	0x666	; 0x666 <puts>
	joy_init();
 138:	0e 94 54 01 	call	0x2a8	; 0x2a8 <joy_init>
	puts("Joystick initialized\r");
 13c:	84 e4       	ldi	r24, 0x44	; 68
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 33 03 	call	0x666	; 0x666 <puts>
	oled_init();
 144:	0e 94 67 01 	call	0x2ce	; 0x2ce <oled_init>
	puts("Oled initialized\r");
 148:	8a e5       	ldi	r24, 0x5A	; 90
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 33 03 	call	0x666	; 0x666 <puts>
	
	char *c1 = "item1";
	char *c2 = "item2";
	char *c[2] = {c1,c2};
 150:	8c e6       	ldi	r24, 0x6C	; 108
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	82 e7       	ldi	r24, 0x72	; 114
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	9c 83       	std	Y+4, r25	; 0x04
 15e:	8b 83       	std	Y+3, r24	; 0x03
	gui_item_t current=gui_createMenu(NULL,c);
 160:	ae 01       	movw	r20, r28
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	05 96       	adiw	r24, 0x05	; 5
 16e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <gui_createMenu>
	current = gui_createMenu(&current.next,c);
 172:	ae 01       	movw	r20, r28
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	be 01       	movw	r22, r28
 17a:	67 5f       	subi	r22, 0xF7	; 247
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	ce 01       	movw	r24, r28
 180:	0f 96       	adiw	r24, 0x0f	; 15
 182:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <gui_createMenu>
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	fe 01       	movw	r30, r28
 18a:	3f 96       	adiw	r30, 0x0f	; 15
 18c:	de 01       	movw	r26, r28
 18e:	15 96       	adiw	r26, 0x05	; 5
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	8a 95       	dec	r24
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xa2>
	
	
	oled_home();
 198:	0e 94 a1 01 	call	0x342	; 0x342 <oled_home>
	while(1) {
		
		//oled_clear_all();
		if ((PINB &(1<<SW1))){
			PORTB ^= (1 << LED);	
 19c:	91 e0       	ldi	r25, 0x01	; 1
	
	oled_home();
	while(1) {
		
		//oled_clear_all();
		if ((PINB &(1<<SW1))){
 19e:	b1 9b       	sbis	0x16, 1	; 22
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <main+0xba>
			PORTB ^= (1 << LED);	
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	89 27       	eor	r24, r25
 1a6:	88 bb       	out	0x18, r24	; 24
		}
		PORTB ^= (1 << LED);
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	89 27       	eor	r24, r25
 1ac:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	e0 e0       	ldi	r30, 0x00	; 0
 1b0:	f0 ef       	ldi	r31, 0xF0	; 240
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xc4>
 1b6:	f3 cf       	rjmp	.-26     	; 0x19e <main+0xb0>

000001b8 <gui_createMenu>:
#include <stdlib.h>
#include "uart.h"

//uint8_t pixels[SCREEN_ROWS][SCREEN_COLS]=0;

gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
 1b8:	5f 92       	push	r5
 1ba:	6f 92       	push	r6
 1bc:	7f 92       	push	r7
 1be:	8f 92       	push	r8
 1c0:	9f 92       	push	r9
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	3c 01       	movw	r6, r24
 1d8:	5b 01       	movw	r10, r22
 1da:	7a 01       	movw	r14, r20
	gui_item_t * prev=NULL;
	gui_item_t * first=NULL;
	uint8_t i=0;
	while (menuItems[i]!=NULL){ //iterates over menu items
 1dc:	fa 01       	movw	r30, r20
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	89 2b       	or	r24, r25
 1e4:	51 f5       	brne	.+84     	; 0x23a <gui_createMenu+0x82>

//uint8_t pixels[SCREEN_ROWS][SCREEN_COLS]=0;

gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
	gui_item_t * prev=NULL;
	gui_item_t * first=NULL;
 1e6:	c1 2c       	mov	r12, r1
 1e8:	d1 2c       	mov	r13, r1
#include "uart.h"

//uint8_t pixels[SCREEN_ROWS][SCREEN_COLS]=0;

gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
	gui_item_t * prev=NULL;
 1ea:	81 2c       	mov	r8, r1
 1ec:	91 2c       	mov	r9, r1
 1ee:	3e c0       	rjmp	.+124    	; 0x26c <gui_createMenu+0xb4>
	gui_item_t * first=NULL;
	uint8_t i=0;
	while (menuItems[i]!=NULL){ //iterates over menu items
		gui_item_t *item = (gui_item_t *) malloc(sizeof(item)); //creates new item
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 ba 01 	call	0x374	; 0x374 <malloc>
 1f8:	ec 01       	movw	r28, r24
		item->parent=parent;
 1fa:	b9 82       	std	Y+1, r11	; 0x01
 1fc:	a8 82       	st	Y, r10
		item->name=menuItems[i];
 1fe:	f8 01       	movw	r30, r16
 200:	80 81       	ld	r24, Z
 202:	91 81       	ldd	r25, Z+1	; 0x01
 204:	99 87       	std	Y+9, r25	; 0x09
 206:	88 87       	std	Y+8, r24	; 0x08
		printf("%s\n",menuItems[i]);
 208:	0e 94 33 03 	call	0x666	; 0x666 <puts>
		item->prev=prev;
 20c:	9f 82       	std	Y+7, r9	; 0x07
 20e:	8e 82       	std	Y+6, r8	; 0x06
		prev=item;
		if (i>0){
 210:	55 20       	and	r5, r5
 212:	21 f0       	breq	.+8      	; 0x21c <gui_createMenu+0x64>
			item->prev->next=item;
 214:	f4 01       	movw	r30, r8
 216:	d5 83       	std	Z+5, r29	; 0x05
 218:	c4 83       	std	Z+4, r28	; 0x04
 21a:	01 c0       	rjmp	.+2      	; 0x21e <gui_createMenu+0x66>
gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
	gui_item_t * prev=NULL;
	gui_item_t * first=NULL;
	uint8_t i=0;
	while (menuItems[i]!=NULL){ //iterates over menu items
		gui_item_t *item = (gui_item_t *) malloc(sizeof(item)); //creates new item
 21c:	6e 01       	movw	r12, r28
 21e:	4e 01       	movw	r8, r28
			item->prev->next=item;
		}
		else {
			first=item;
		}
		i++;
 220:	53 94       	inc	r5

gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
	gui_item_t * prev=NULL;
	gui_item_t * first=NULL;
	uint8_t i=0;
	while (menuItems[i]!=NULL){ //iterates over menu items
 222:	05 2d       	mov	r16, r5
 224:	10 e0       	ldi	r17, 0x00	; 0
 226:	00 0f       	add	r16, r16
 228:	11 1f       	adc	r17, r17
 22a:	0e 0d       	add	r16, r14
 22c:	1f 1d       	adc	r17, r15
 22e:	f8 01       	movw	r30, r16
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
 234:	89 2b       	or	r24, r25
 236:	e1 f6       	brne	.-72     	; 0x1f0 <gui_createMenu+0x38>
 238:	19 c0       	rjmp	.+50     	; 0x26c <gui_createMenu+0xb4>
		gui_item_t *item = (gui_item_t *) malloc(sizeof(item)); //creates new item
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 ba 01 	call	0x374	; 0x374 <malloc>
 242:	6c 01       	movw	r12, r24
		item->parent=parent;
 244:	fc 01       	movw	r30, r24
 246:	b1 82       	std	Z+1, r11	; 0x01
 248:	a0 82       	st	Z, r10
		item->name=menuItems[i];
 24a:	f7 01       	movw	r30, r14
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	f6 01       	movw	r30, r12
 252:	91 87       	std	Z+9, r25	; 0x09
 254:	80 87       	std	Z+8, r24	; 0x08
		printf("%s\n",menuItems[i]);
 256:	f7 01       	movw	r30, r14
 258:	80 81       	ld	r24, Z
 25a:	91 81       	ldd	r25, Z+1	; 0x01
 25c:	0e 94 33 03 	call	0x666	; 0x666 <puts>
		item->prev=prev;
 260:	f6 01       	movw	r30, r12
 262:	17 82       	std	Z+7, r1	; 0x07
 264:	16 82       	std	Z+6, r1	; 0x06
gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
	gui_item_t * prev=NULL;
	gui_item_t * first=NULL;
	uint8_t i=0;
	while (menuItems[i]!=NULL){ //iterates over menu items
		gui_item_t *item = (gui_item_t *) malloc(sizeof(item)); //creates new item
 266:	46 01       	movw	r8, r12
//uint8_t pixels[SCREEN_ROWS][SCREEN_COLS]=0;

gui_item_t gui_createMenu(gui_item_t *parent, char ** menuItems){
	gui_item_t * prev=NULL;
	gui_item_t * first=NULL;
	uint8_t i=0;
 268:	51 2c       	mov	r5, r1
 26a:	da cf       	rjmp	.-76     	; 0x220 <gui_createMenu+0x68>
		else {
			first=item;
		}
		i++;
	}
	first->prev=prev;
 26c:	f6 01       	movw	r30, r12
 26e:	97 82       	std	Z+7, r9	; 0x07
 270:	86 82       	std	Z+6, r8	; 0x06
	prev->next=first;
 272:	f4 01       	movw	r30, r8
 274:	d5 82       	std	Z+5, r13	; 0x05
 276:	c4 82       	std	Z+4, r12	; 0x04
	return *first;
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	f6 01       	movw	r30, r12
 27c:	d3 01       	movw	r26, r6
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	8a 95       	dec	r24
 284:	e1 f7       	brne	.-8      	; 0x27e <gui_createMenu+0xc6>
 286:	c3 01       	movw	r24, r6
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	9f 90       	pop	r9
 29e:	8f 90       	pop	r8
 2a0:	7f 90       	pop	r7
 2a2:	6f 90       	pop	r6
 2a4:	5f 90       	pop	r5
 2a6:	08 95       	ret

000002a8 <joy_init>:
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 7b 01 	sts	0x017B, r25
 2b6:	80 93 7a 01 	sts	0x017A, r24
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 79 01 	sts	0x0179, r25
 2c8:	80 93 78 01 	sts	0x0178, r24
 2cc:	08 95       	ret

000002ce <oled_init>:

static FILE oled_stdout = FDEV_SETUP_STREAM(oled_put_char, NULL, _FDEV_SETUP_WRITE);

static inline void oled_write_cmd(char cmd){
	volatile char * ext_oled_cmd = (char *) 0x1000;
	*ext_oled_cmd = cmd;
 2ce:	e0 e0       	ldi	r30, 0x00	; 0
 2d0:	f0 e1       	ldi	r31, 0x10	; 16
 2d2:	8e ea       	ldi	r24, 0xAE	; 174
 2d4:	80 83       	st	Z, r24
 2d6:	81 ea       	ldi	r24, 0xA1	; 161
 2d8:	80 83       	st	Z, r24
 2da:	8a ed       	ldi	r24, 0xDA	; 218
 2dc:	80 83       	st	Z, r24
 2de:	82 e1       	ldi	r24, 0x12	; 18
 2e0:	80 83       	st	Z, r24
 2e2:	88 ec       	ldi	r24, 0xC8	; 200
 2e4:	80 83       	st	Z, r24
 2e6:	88 ea       	ldi	r24, 0xA8	; 168
 2e8:	80 83       	st	Z, r24
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	80 83       	st	Z, r24
 2ee:	85 ed       	ldi	r24, 0xD5	; 213
 2f0:	80 83       	st	Z, r24
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	80 83       	st	Z, r24
 2f6:	81 e8       	ldi	r24, 0x81	; 129
 2f8:	80 83       	st	Z, r24
 2fa:	80 e5       	ldi	r24, 0x50	; 80
 2fc:	80 83       	st	Z, r24
 2fe:	89 ed       	ldi	r24, 0xD9	; 217
 300:	80 83       	st	Z, r24
 302:	81 e2       	ldi	r24, 0x21	; 33
 304:	80 83       	st	Z, r24
 306:	80 e2       	ldi	r24, 0x20	; 32
 308:	80 83       	st	Z, r24
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	80 83       	st	Z, r24
 30e:	8b ed       	ldi	r24, 0xDB	; 219
 310:	80 83       	st	Z, r24
 312:	80 e3       	ldi	r24, 0x30	; 48
 314:	80 83       	st	Z, r24
 316:	8d ea       	ldi	r24, 0xAD	; 173
 318:	80 83       	st	Z, r24
 31a:	10 82       	st	Z, r1
 31c:	84 ea       	ldi	r24, 0xA4	; 164
 31e:	80 83       	st	Z, r24
 320:	86 ea       	ldi	r24, 0xA6	; 166
 322:	80 83       	st	Z, r24
 324:	8f ea       	ldi	r24, 0xAF	; 175
 326:	80 83       	st	Z, r24
 328:	08 95       	ret

0000032a <oled_pos>:
	volatile char * ext_oled_data = (char *) 0x1200;
	*ext_oled_data = data;
}

static inline void oled_goto_page(uint8_t page){
	oled_write_cmd(page | (0xb0));
 32a:	80 6b       	ori	r24, 0xB0	; 176

static FILE oled_stdout = FDEV_SETUP_STREAM(oled_put_char, NULL, _FDEV_SETUP_WRITE);

static inline void oled_write_cmd(char cmd){
	volatile char * ext_oled_cmd = (char *) 0x1000;
	*ext_oled_cmd = cmd;
 32c:	e0 e0       	ldi	r30, 0x00	; 0
 32e:	f0 e1       	ldi	r31, 0x10	; 16
 330:	80 83       	st	Z, r24
static inline void oled_goto_page(uint8_t page){
	oled_write_cmd(page | (0xb0));
}

static inline void oled_goto_column(uint8_t column){
	oled_write_cmd(column & 0x0f);
 332:	86 2f       	mov	r24, r22
 334:	8f 70       	andi	r24, 0x0F	; 15

static FILE oled_stdout = FDEV_SETUP_STREAM(oled_put_char, NULL, _FDEV_SETUP_WRITE);

static inline void oled_write_cmd(char cmd){
	volatile char * ext_oled_cmd = (char *) 0x1000;
	*ext_oled_cmd = cmd;
 336:	80 83       	st	Z, r24
	oled_write_cmd(page | (0xb0));
}

static inline void oled_goto_column(uint8_t column){
	oled_write_cmd(column & 0x0f);
	oled_write_cmd(((column & 0xf0) >> 4) | (0x10));
 338:	62 95       	swap	r22
 33a:	6f 70       	andi	r22, 0x0F	; 15
 33c:	60 61       	ori	r22, 0x10	; 16

static FILE oled_stdout = FDEV_SETUP_STREAM(oled_put_char, NULL, _FDEV_SETUP_WRITE);

static inline void oled_write_cmd(char cmd){
	volatile char * ext_oled_cmd = (char *) 0x1000;
	*ext_oled_cmd = cmd;
 33e:	60 83       	st	Z, r22
 340:	08 95       	ret

00000342 <oled_home>:
	oled_goto_page(page);
	oled_goto_column(column);
}

void oled_home(void){
	oled_pos(0,0);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 95 01 	call	0x32a	; 0x32a <oled_pos>
 34a:	08 95       	ret

0000034c <uart_putChar>:
 34c:	5d 9b       	sbis	0x0b, 5	; 11
 34e:	fe cf       	rjmp	.-4      	; 0x34c <uart_putChar>
 350:	8c b9       	out	0x0c, r24	; 12
 352:	08 95       	ret

00000354 <uart_getChar>:
 354:	5d 99       	sbic	0x0b, 5	; 11
 356:	fe cf       	rjmp	.-4      	; 0x354 <uart_getChar>
 358:	8c b1       	in	r24, 0x0c	; 12
 35a:	08 95       	ret

0000035c <uart_init>:
 35c:	8f e0       	ldi	r24, 0x0F	; 15
 35e:	89 b9       	out	0x09, r24	; 9
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	88 61       	ori	r24, 0x18	; 24
 364:	8a b9       	out	0x0a, r24	; 10
 366:	6a ea       	ldi	r22, 0xAA	; 170
 368:	71 e0       	ldi	r23, 0x01	; 1
 36a:	86 ea       	ldi	r24, 0xA6	; 166
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <fdevopen>
 372:	08 95       	ret

00000374 <malloc>:
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	10 f4       	brcc	.+4      	; 0x382 <malloc+0xe>
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	e0 91 7f 01 	lds	r30, 0x017F
 386:	f0 91 80 01 	lds	r31, 0x0180
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	30 97       	sbiw	r30, 0x00	; 0
 394:	39 f1       	breq	.+78     	; 0x3e4 <malloc+0x70>
 396:	40 81       	ld	r20, Z
 398:	51 81       	ldd	r21, Z+1	; 0x01
 39a:	48 17       	cp	r20, r24
 39c:	59 07       	cpc	r21, r25
 39e:	b8 f0       	brcs	.+46     	; 0x3ce <malloc+0x5a>
 3a0:	48 17       	cp	r20, r24
 3a2:	59 07       	cpc	r21, r25
 3a4:	71 f4       	brne	.+28     	; 0x3c2 <malloc+0x4e>
 3a6:	82 81       	ldd	r24, Z+2	; 0x02
 3a8:	93 81       	ldd	r25, Z+3	; 0x03
 3aa:	10 97       	sbiw	r26, 0x00	; 0
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <malloc+0x44>
 3ae:	13 96       	adiw	r26, 0x03	; 3
 3b0:	9c 93       	st	X, r25
 3b2:	8e 93       	st	-X, r24
 3b4:	12 97       	sbiw	r26, 0x02	; 2
 3b6:	2c c0       	rjmp	.+88     	; 0x410 <malloc+0x9c>
 3b8:	90 93 80 01 	sts	0x0180, r25
 3bc:	80 93 7f 01 	sts	0x017F, r24
 3c0:	27 c0       	rjmp	.+78     	; 0x410 <malloc+0x9c>
 3c2:	21 15       	cp	r18, r1
 3c4:	31 05       	cpc	r19, r1
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <malloc+0x60>
 3c8:	42 17       	cp	r20, r18
 3ca:	53 07       	cpc	r21, r19
 3cc:	18 f0       	brcs	.+6      	; 0x3d4 <malloc+0x60>
 3ce:	a9 01       	movw	r20, r18
 3d0:	db 01       	movw	r26, r22
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <malloc+0x62>
 3d4:	ef 01       	movw	r28, r30
 3d6:	9a 01       	movw	r18, r20
 3d8:	bd 01       	movw	r22, r26
 3da:	df 01       	movw	r26, r30
 3dc:	02 80       	ldd	r0, Z+2	; 0x02
 3de:	f3 81       	ldd	r31, Z+3	; 0x03
 3e0:	e0 2d       	mov	r30, r0
 3e2:	d7 cf       	rjmp	.-82     	; 0x392 <malloc+0x1e>
 3e4:	21 15       	cp	r18, r1
 3e6:	31 05       	cpc	r19, r1
 3e8:	f9 f0       	breq	.+62     	; 0x428 <malloc+0xb4>
 3ea:	28 1b       	sub	r18, r24
 3ec:	39 0b       	sbc	r19, r25
 3ee:	24 30       	cpi	r18, 0x04	; 4
 3f0:	31 05       	cpc	r19, r1
 3f2:	80 f4       	brcc	.+32     	; 0x414 <malloc+0xa0>
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	9b 81       	ldd	r25, Y+3	; 0x03
 3f8:	61 15       	cp	r22, r1
 3fa:	71 05       	cpc	r23, r1
 3fc:	21 f0       	breq	.+8      	; 0x406 <malloc+0x92>
 3fe:	fb 01       	movw	r30, r22
 400:	93 83       	std	Z+3, r25	; 0x03
 402:	82 83       	std	Z+2, r24	; 0x02
 404:	04 c0       	rjmp	.+8      	; 0x40e <malloc+0x9a>
 406:	90 93 80 01 	sts	0x0180, r25
 40a:	80 93 7f 01 	sts	0x017F, r24
 40e:	fe 01       	movw	r30, r28
 410:	32 96       	adiw	r30, 0x02	; 2
 412:	44 c0       	rjmp	.+136    	; 0x49c <malloc+0x128>
 414:	fe 01       	movw	r30, r28
 416:	e2 0f       	add	r30, r18
 418:	f3 1f       	adc	r31, r19
 41a:	81 93       	st	Z+, r24
 41c:	91 93       	st	Z+, r25
 41e:	22 50       	subi	r18, 0x02	; 2
 420:	31 09       	sbc	r19, r1
 422:	39 83       	std	Y+1, r19	; 0x01
 424:	28 83       	st	Y, r18
 426:	3a c0       	rjmp	.+116    	; 0x49c <malloc+0x128>
 428:	20 91 7d 01 	lds	r18, 0x017D
 42c:	30 91 7e 01 	lds	r19, 0x017E
 430:	23 2b       	or	r18, r19
 432:	41 f4       	brne	.+16     	; 0x444 <malloc+0xd0>
 434:	20 91 02 01 	lds	r18, 0x0102
 438:	30 91 03 01 	lds	r19, 0x0103
 43c:	30 93 7e 01 	sts	0x017E, r19
 440:	20 93 7d 01 	sts	0x017D, r18
 444:	20 91 00 01 	lds	r18, 0x0100
 448:	30 91 01 01 	lds	r19, 0x0101
 44c:	21 15       	cp	r18, r1
 44e:	31 05       	cpc	r19, r1
 450:	41 f4       	brne	.+16     	; 0x462 <malloc+0xee>
 452:	2d b7       	in	r18, 0x3d	; 61
 454:	3e b7       	in	r19, 0x3e	; 62
 456:	40 91 04 01 	lds	r20, 0x0104
 45a:	50 91 05 01 	lds	r21, 0x0105
 45e:	24 1b       	sub	r18, r20
 460:	35 0b       	sbc	r19, r21
 462:	e0 91 7d 01 	lds	r30, 0x017D
 466:	f0 91 7e 01 	lds	r31, 0x017E
 46a:	e2 17       	cp	r30, r18
 46c:	f3 07       	cpc	r31, r19
 46e:	a0 f4       	brcc	.+40     	; 0x498 <malloc+0x124>
 470:	2e 1b       	sub	r18, r30
 472:	3f 0b       	sbc	r19, r31
 474:	28 17       	cp	r18, r24
 476:	39 07       	cpc	r19, r25
 478:	78 f0       	brcs	.+30     	; 0x498 <malloc+0x124>
 47a:	ac 01       	movw	r20, r24
 47c:	4e 5f       	subi	r20, 0xFE	; 254
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	24 17       	cp	r18, r20
 482:	35 07       	cpc	r19, r21
 484:	48 f0       	brcs	.+18     	; 0x498 <malloc+0x124>
 486:	4e 0f       	add	r20, r30
 488:	5f 1f       	adc	r21, r31
 48a:	50 93 7e 01 	sts	0x017E, r21
 48e:	40 93 7d 01 	sts	0x017D, r20
 492:	81 93       	st	Z+, r24
 494:	91 93       	st	Z+, r25
 496:	02 c0       	rjmp	.+4      	; 0x49c <malloc+0x128>
 498:	e0 e0       	ldi	r30, 0x00	; 0
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	cf 01       	movw	r24, r30
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <free>:
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	09 f4       	brne	.+2      	; 0x4ae <free+0xa>
 4ac:	87 c0       	rjmp	.+270    	; 0x5bc <__stack+0xbd>
 4ae:	fc 01       	movw	r30, r24
 4b0:	32 97       	sbiw	r30, 0x02	; 2
 4b2:	13 82       	std	Z+3, r1	; 0x03
 4b4:	12 82       	std	Z+2, r1	; 0x02
 4b6:	c0 91 7f 01 	lds	r28, 0x017F
 4ba:	d0 91 80 01 	lds	r29, 0x0180
 4be:	20 97       	sbiw	r28, 0x00	; 0
 4c0:	81 f4       	brne	.+32     	; 0x4e2 <free+0x3e>
 4c2:	20 81       	ld	r18, Z
 4c4:	31 81       	ldd	r19, Z+1	; 0x01
 4c6:	28 0f       	add	r18, r24
 4c8:	39 1f       	adc	r19, r25
 4ca:	80 91 7d 01 	lds	r24, 0x017D
 4ce:	90 91 7e 01 	lds	r25, 0x017E
 4d2:	82 17       	cp	r24, r18
 4d4:	93 07       	cpc	r25, r19
 4d6:	79 f5       	brne	.+94     	; 0x536 <__stack+0x37>
 4d8:	f0 93 7e 01 	sts	0x017E, r31
 4dc:	e0 93 7d 01 	sts	0x017D, r30
 4e0:	6d c0       	rjmp	.+218    	; 0x5bc <__stack+0xbd>
 4e2:	de 01       	movw	r26, r28
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	ae 17       	cp	r26, r30
 4ea:	bf 07       	cpc	r27, r31
 4ec:	50 f4       	brcc	.+20     	; 0x502 <__stack+0x3>
 4ee:	12 96       	adiw	r26, 0x02	; 2
 4f0:	4d 91       	ld	r20, X+
 4f2:	5c 91       	ld	r21, X
 4f4:	13 97       	sbiw	r26, 0x03	; 3
 4f6:	9d 01       	movw	r18, r26
 4f8:	41 15       	cp	r20, r1
 4fa:	51 05       	cpc	r21, r1
 4fc:	09 f1       	breq	.+66     	; 0x540 <__stack+0x41>
 4fe:	da 01       	movw	r26, r20
 500:	f3 cf       	rjmp	.-26     	; 0x4e8 <free+0x44>
 502:	b3 83       	std	Z+3, r27	; 0x03
 504:	a2 83       	std	Z+2, r26	; 0x02
 506:	40 81       	ld	r20, Z
 508:	51 81       	ldd	r21, Z+1	; 0x01
 50a:	84 0f       	add	r24, r20
 50c:	95 1f       	adc	r25, r21
 50e:	8a 17       	cp	r24, r26
 510:	9b 07       	cpc	r25, r27
 512:	71 f4       	brne	.+28     	; 0x530 <__stack+0x31>
 514:	8d 91       	ld	r24, X+
 516:	9c 91       	ld	r25, X
 518:	11 97       	sbiw	r26, 0x01	; 1
 51a:	84 0f       	add	r24, r20
 51c:	95 1f       	adc	r25, r21
 51e:	02 96       	adiw	r24, 0x02	; 2
 520:	91 83       	std	Z+1, r25	; 0x01
 522:	80 83       	st	Z, r24
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	8d 91       	ld	r24, X+
 528:	9c 91       	ld	r25, X
 52a:	13 97       	sbiw	r26, 0x03	; 3
 52c:	93 83       	std	Z+3, r25	; 0x03
 52e:	82 83       	std	Z+2, r24	; 0x02
 530:	21 15       	cp	r18, r1
 532:	31 05       	cpc	r19, r1
 534:	29 f4       	brne	.+10     	; 0x540 <__stack+0x41>
 536:	f0 93 80 01 	sts	0x0180, r31
 53a:	e0 93 7f 01 	sts	0x017F, r30
 53e:	3e c0       	rjmp	.+124    	; 0x5bc <__stack+0xbd>
 540:	d9 01       	movw	r26, r18
 542:	13 96       	adiw	r26, 0x03	; 3
 544:	fc 93       	st	X, r31
 546:	ee 93       	st	-X, r30
 548:	12 97       	sbiw	r26, 0x02	; 2
 54a:	4d 91       	ld	r20, X+
 54c:	5d 91       	ld	r21, X+
 54e:	a4 0f       	add	r26, r20
 550:	b5 1f       	adc	r27, r21
 552:	ea 17       	cp	r30, r26
 554:	fb 07       	cpc	r31, r27
 556:	79 f4       	brne	.+30     	; 0x576 <__stack+0x77>
 558:	80 81       	ld	r24, Z
 55a:	91 81       	ldd	r25, Z+1	; 0x01
 55c:	84 0f       	add	r24, r20
 55e:	95 1f       	adc	r25, r21
 560:	02 96       	adiw	r24, 0x02	; 2
 562:	d9 01       	movw	r26, r18
 564:	11 96       	adiw	r26, 0x01	; 1
 566:	9c 93       	st	X, r25
 568:	8e 93       	st	-X, r24
 56a:	82 81       	ldd	r24, Z+2	; 0x02
 56c:	93 81       	ldd	r25, Z+3	; 0x03
 56e:	13 96       	adiw	r26, 0x03	; 3
 570:	9c 93       	st	X, r25
 572:	8e 93       	st	-X, r24
 574:	12 97       	sbiw	r26, 0x02	; 2
 576:	e0 e0       	ldi	r30, 0x00	; 0
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	9b 81       	ldd	r25, Y+3	; 0x03
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	19 f0       	breq	.+6      	; 0x588 <__stack+0x89>
 582:	fe 01       	movw	r30, r28
 584:	ec 01       	movw	r28, r24
 586:	f9 cf       	rjmp	.-14     	; 0x57a <__stack+0x7b>
 588:	ce 01       	movw	r24, r28
 58a:	02 96       	adiw	r24, 0x02	; 2
 58c:	28 81       	ld	r18, Y
 58e:	39 81       	ldd	r19, Y+1	; 0x01
 590:	82 0f       	add	r24, r18
 592:	93 1f       	adc	r25, r19
 594:	20 91 7d 01 	lds	r18, 0x017D
 598:	30 91 7e 01 	lds	r19, 0x017E
 59c:	28 17       	cp	r18, r24
 59e:	39 07       	cpc	r19, r25
 5a0:	69 f4       	brne	.+26     	; 0x5bc <__stack+0xbd>
 5a2:	30 97       	sbiw	r30, 0x00	; 0
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <__stack+0xb1>
 5a6:	10 92 80 01 	sts	0x0180, r1
 5aa:	10 92 7f 01 	sts	0x017F, r1
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__stack+0xb5>
 5b0:	13 82       	std	Z+3, r1	; 0x03
 5b2:	12 82       	std	Z+2, r1	; 0x02
 5b4:	d0 93 7e 01 	sts	0x017E, r29
 5b8:	c0 93 7d 01 	sts	0x017D, r28
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <fdevopen>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
 5cc:	8b 01       	movw	r16, r22
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	31 f4       	brne	.+12     	; 0x5de <fdevopen+0x1c>
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	19 f4       	brne	.+6      	; 0x5de <fdevopen+0x1c>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	38 c0       	rjmp	.+112    	; 0x64e <fdevopen+0x8c>
 5de:	6e e0       	ldi	r22, 0x0E	; 14
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <calloc>
 5ea:	fc 01       	movw	r30, r24
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	a1 f3       	breq	.-24     	; 0x5d8 <fdevopen+0x16>
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	83 83       	std	Z+3, r24	; 0x03
 5f4:	01 15       	cp	r16, r1
 5f6:	11 05       	cpc	r17, r1
 5f8:	71 f0       	breq	.+28     	; 0x616 <fdevopen+0x54>
 5fa:	13 87       	std	Z+11, r17	; 0x0b
 5fc:	02 87       	std	Z+10, r16	; 0x0a
 5fe:	81 e8       	ldi	r24, 0x81	; 129
 600:	83 83       	std	Z+3, r24	; 0x03
 602:	80 91 81 01 	lds	r24, 0x0181
 606:	90 91 82 01 	lds	r25, 0x0182
 60a:	89 2b       	or	r24, r25
 60c:	21 f4       	brne	.+8      	; 0x616 <fdevopen+0x54>
 60e:	f0 93 82 01 	sts	0x0182, r31
 612:	e0 93 81 01 	sts	0x0181, r30
 616:	20 97       	sbiw	r28, 0x00	; 0
 618:	c9 f0       	breq	.+50     	; 0x64c <fdevopen+0x8a>
 61a:	d1 87       	std	Z+9, r29	; 0x09
 61c:	c0 87       	std	Z+8, r28	; 0x08
 61e:	83 81       	ldd	r24, Z+3	; 0x03
 620:	82 60       	ori	r24, 0x02	; 2
 622:	83 83       	std	Z+3, r24	; 0x03
 624:	80 91 83 01 	lds	r24, 0x0183
 628:	90 91 84 01 	lds	r25, 0x0184
 62c:	89 2b       	or	r24, r25
 62e:	71 f4       	brne	.+28     	; 0x64c <fdevopen+0x8a>
 630:	f0 93 84 01 	sts	0x0184, r31
 634:	e0 93 83 01 	sts	0x0183, r30
 638:	80 91 85 01 	lds	r24, 0x0185
 63c:	90 91 86 01 	lds	r25, 0x0186
 640:	89 2b       	or	r24, r25
 642:	21 f4       	brne	.+8      	; 0x64c <fdevopen+0x8a>
 644:	f0 93 86 01 	sts	0x0186, r31
 648:	e0 93 85 01 	sts	0x0185, r30
 64c:	cf 01       	movw	r24, r30
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <putchar>:
 658:	60 91 83 01 	lds	r22, 0x0183
 65c:	70 91 84 01 	lds	r23, 0x0184
 660:	0e 94 83 03 	call	0x706	; 0x706 <fputc>
 664:	08 95       	ret

00000666 <puts>:
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	e0 91 83 01 	lds	r30, 0x0183
 672:	f0 91 84 01 	lds	r31, 0x0184
 676:	23 81       	ldd	r18, Z+3	; 0x03
 678:	21 ff       	sbrs	r18, 1
 67a:	1b c0       	rjmp	.+54     	; 0x6b2 <puts+0x4c>
 67c:	ec 01       	movw	r28, r24
 67e:	00 e0       	ldi	r16, 0x00	; 0
 680:	10 e0       	ldi	r17, 0x00	; 0
 682:	89 91       	ld	r24, Y+
 684:	60 91 83 01 	lds	r22, 0x0183
 688:	70 91 84 01 	lds	r23, 0x0184
 68c:	db 01       	movw	r26, r22
 68e:	18 96       	adiw	r26, 0x08	; 8
 690:	ed 91       	ld	r30, X+
 692:	fc 91       	ld	r31, X
 694:	19 97       	sbiw	r26, 0x09	; 9
 696:	88 23       	and	r24, r24
 698:	31 f0       	breq	.+12     	; 0x6a6 <puts+0x40>
 69a:	09 95       	icall
 69c:	89 2b       	or	r24, r25
 69e:	89 f3       	breq	.-30     	; 0x682 <puts+0x1c>
 6a0:	0f ef       	ldi	r16, 0xFF	; 255
 6a2:	1f ef       	ldi	r17, 0xFF	; 255
 6a4:	ee cf       	rjmp	.-36     	; 0x682 <puts+0x1c>
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	09 95       	icall
 6aa:	89 2b       	or	r24, r25
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <puts+0x4c>
 6ae:	c8 01       	movw	r24, r16
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <puts+0x50>
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	9f ef       	ldi	r25, 0xFF	; 255
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	08 95       	ret

000006c0 <calloc>:
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	86 9f       	mul	r24, r22
 6ca:	80 01       	movw	r16, r0
 6cc:	87 9f       	mul	r24, r23
 6ce:	10 0d       	add	r17, r0
 6d0:	96 9f       	mul	r25, r22
 6d2:	10 0d       	add	r17, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	c8 01       	movw	r24, r16
 6d8:	0e 94 ba 01 	call	0x374	; 0x374 <malloc>
 6dc:	ec 01       	movw	r28, r24
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	29 f0       	breq	.+10     	; 0x6ec <calloc+0x2c>
 6e2:	a8 01       	movw	r20, r16
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <memset>
 6ec:	ce 01       	movw	r24, r28
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	08 95       	ret

000006f8 <memset>:
 6f8:	dc 01       	movw	r26, r24
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <memset+0x6>
 6fc:	6d 93       	st	X+, r22
 6fe:	41 50       	subi	r20, 0x01	; 1
 700:	50 40       	sbci	r21, 0x00	; 0
 702:	e0 f7       	brcc	.-8      	; 0x6fc <memset+0x4>
 704:	08 95       	ret

00000706 <fputc>:
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	18 2f       	mov	r17, r24
 710:	09 2f       	mov	r16, r25
 712:	eb 01       	movw	r28, r22
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	81 fd       	sbrc	r24, 1
 718:	03 c0       	rjmp	.+6      	; 0x720 <fputc+0x1a>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	20 c0       	rjmp	.+64     	; 0x760 <fputc+0x5a>
 720:	82 ff       	sbrs	r24, 2
 722:	10 c0       	rjmp	.+32     	; 0x744 <fputc+0x3e>
 724:	4e 81       	ldd	r20, Y+6	; 0x06
 726:	5f 81       	ldd	r21, Y+7	; 0x07
 728:	2c 81       	ldd	r18, Y+4	; 0x04
 72a:	3d 81       	ldd	r19, Y+5	; 0x05
 72c:	42 17       	cp	r20, r18
 72e:	53 07       	cpc	r21, r19
 730:	7c f4       	brge	.+30     	; 0x750 <fputc+0x4a>
 732:	e8 81       	ld	r30, Y
 734:	f9 81       	ldd	r31, Y+1	; 0x01
 736:	9f 01       	movw	r18, r30
 738:	2f 5f       	subi	r18, 0xFF	; 255
 73a:	3f 4f       	sbci	r19, 0xFF	; 255
 73c:	39 83       	std	Y+1, r19	; 0x01
 73e:	28 83       	st	Y, r18
 740:	10 83       	st	Z, r17
 742:	06 c0       	rjmp	.+12     	; 0x750 <fputc+0x4a>
 744:	e8 85       	ldd	r30, Y+8	; 0x08
 746:	f9 85       	ldd	r31, Y+9	; 0x09
 748:	81 2f       	mov	r24, r17
 74a:	09 95       	icall
 74c:	89 2b       	or	r24, r25
 74e:	29 f7       	brne	.-54     	; 0x71a <fputc+0x14>
 750:	2e 81       	ldd	r18, Y+6	; 0x06
 752:	3f 81       	ldd	r19, Y+7	; 0x07
 754:	2f 5f       	subi	r18, 0xFF	; 255
 756:	3f 4f       	sbci	r19, 0xFF	; 255
 758:	3f 83       	std	Y+7, r19	; 0x07
 75a:	2e 83       	std	Y+6, r18	; 0x06
 75c:	81 2f       	mov	r24, r17
 75e:	90 2f       	mov	r25, r16
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	08 95       	ret

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
