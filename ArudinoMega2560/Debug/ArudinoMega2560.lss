
ArudinoMega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800200  00000f6e  00001002  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002b6  008002b6  000010b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001210  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ff  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c8e  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000039c  00000000  00000000  00003a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b3  00000000  00000000  00004207  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  000049ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	da c2       	rjmp	.+1460   	; 0x606 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3b       	cpi	r26, 0xB6	; 182
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 eb       	ldi	r26, 0xB6	; 182
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3c       	cpi	r26, 0xC2	; 194
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2e d0       	rcall	.+92     	; 0x17c <main>
 120:	24 c7       	rjmp	.+3656   	; 0xf6a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
 */ 
#include <avr/io.h>
#include "adc.h"

void adc_init(void){
	ADCSRA |= (1 << ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1 << ADPS2); 
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	87 68       	ori	r24, 0x87	; 135
 12c:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	ADMUX &= ~(1 <<REFS1);
 138:	80 81       	ld	r24, Z
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <adc_read>:
	
}


uint16_t adc_read(uint8_t ch){
	ADMUX |= (ch & 0x03);
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	83 70       	andi	r24, 0x03	; 3
 148:	98 2b       	or	r25, r24
 14a:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 64       	ori	r24, 0x40	; 64
 154:	80 83       	st	Z, r24
	
	while(!(ADCSRA & ADSC)){ 
 156:	80 81       	ld	r24, Z
 158:	86 70       	andi	r24, 0x06	; 6
 15a:	e9 f3       	breq	.-6      	; 0x156 <adc_read+0x16>
		//Do nothing
	}
	uint16_t result; 
	result = ADCL | (ADCH << 8); 
 15c:	80 91 78 00 	lds	r24, 0x0078
 160:	20 91 79 00 	lds	r18, 0x0079
 164:	90 e0       	ldi	r25, 0x00	; 0
	return result;
}
 166:	92 2b       	or	r25, r18
 168:	08 95       	ret

0000016a <ir_signal>:
#include <avr/io.h>
#include "adc.h"
#include "ir.h"

uint8_t ir_signal(void){
	uint16_t value = adc_read(IRCHANNEL);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	e9 df       	rcall	.-46     	; 0x140 <adc_read>
	if (value > 900){
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	85 38       	cpi	r24, 0x85	; 133
 172:	93 40       	sbci	r25, 0x03	; 3
 174:	08 f4       	brcc	.+2      	; 0x178 <ir_signal+0xe>
 176:	20 e0       	ldi	r18, 0x00	; 0
		return 1;
	}
	return 0;
}
 178:	82 2f       	mov	r24, r18
 17a:	08 95       	ret

0000017c <main>:
#include "analog/adc.h"
#include "game.h"
#include "analog/ir.h"
#include <stdlib.h>

int main(void){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	2b 97       	sbiw	r28, 0x0b	; 11
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 190:	9e d1       	rcall	.+828    	; 0x4ce <uart_init>
	adc_init();
 192:	c8 df       	rcall	.-112    	; 0x124 <adc_init>
	can_init(MODE_NORMAL);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	60 d0       	rcall	.+192    	; 0x258 <can_init>
	can_message_t* msg = malloc(sizeof(can_message_t));
	DDRE |= (1<<PE3);
 198:	6b 9a       	sbi	0x0d, 3	; 13
	pwm_init();
 19a:	ac d1       	rcall	.+856    	; 0x4f4 <pwm_init>
	pwm_setValue(33);
 19c:	81 e2       	ldi	r24, 0x21	; 33
 19e:	cd d1       	rcall	.+922    	; 0x53a <pwm_setValue>
	DDRB |= (1 << PB7);
 1a0:	27 9a       	sbi	0x04, 7	; 4
	sei();
 1a2:	78 94       	sei
		int16_t posx = receive.data[0]<<8 | receive.data[1];
		int16_t posy = receive.data[2]<<8 | receive.data[3];
		game_timerStart();
		while(!ir_signal());
		game_timerStop();
		printf("score is: %4i\n",game_getScore());
 1a4:	0f 2e       	mov	r0, r31
 1a6:	f6 e0       	ldi	r31, 0x06	; 6
 1a8:	8f 2e       	mov	r8, r31
 1aa:	f2 e0       	ldi	r31, 0x02	; 2
 1ac:	9f 2e       	mov	r9, r31
 1ae:	f0 2d       	mov	r31, r0
		printf("X:%4i Y:%4i\r",posx,posy);
 1b0:	0f 2e       	mov	r0, r31
 1b2:	f5 e1       	ldi	r31, 0x15	; 21
 1b4:	af 2e       	mov	r10, r31
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	bf 2e       	mov	r11, r31
 1ba:	f0 2d       	mov	r31, r0
		pwm_setServo(posx);
		printf("received: ");
 1bc:	0f 2e       	mov	r0, r31
 1be:	f2 e2       	ldi	r31, 0x22	; 34
 1c0:	cf 2e       	mov	r12, r31
 1c2:	f2 e0       	ldi	r31, 0x02	; 2
 1c4:	df 2e       	mov	r13, r31
 1c6:	f0 2d       	mov	r31, r0
		can_print(receive);
		uint16_t value = adc_read(0);
		printf("adc value: %4i \n", value);
 1c8:	0f 2e       	mov	r0, r31
 1ca:	fd e2       	ldi	r31, 0x2D	; 45
 1cc:	6f 2e       	mov	r6, r31
 1ce:	f2 e0       	ldi	r31, 0x02	; 2
 1d0:	7f 2e       	mov	r7, r31
 1d2:	f0 2d       	mov	r31, r0
	DDRB |= (1 << PB7);
	sei();
	
	while(1){		
		//_delay_ms(100);
		can_message_t receive = can_dataReceive();
 1d4:	ce 01       	movw	r24, r28
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	68 d0       	rcall	.+208    	; 0x2aa <can_dataReceive>
		int16_t posx = receive.data[0]<<8 | receive.data[1];
 1da:	0c 81       	ldd	r16, Y+4	; 0x04
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	10 2f       	mov	r17, r16
 1e0:	00 27       	eor	r16, r16
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	08 2b       	or	r16, r24
		int16_t posy = receive.data[2]<<8 | receive.data[3];
 1e6:	ee 80       	ldd	r14, Y+6	; 0x06
 1e8:	f1 2c       	mov	r15, r1
 1ea:	fe 2c       	mov	r15, r14
 1ec:	ee 24       	eor	r14, r14
 1ee:	8f 81       	ldd	r24, Y+7	; 0x07
 1f0:	e8 2a       	or	r14, r24
		game_timerStart();
 1f2:	ef d1       	rcall	.+990    	; 0x5d2 <game_timerStart>
		while(!ir_signal());
 1f4:	ba df       	rcall	.-140    	; 0x16a <ir_signal>
 1f6:	88 23       	and	r24, r24
 1f8:	e9 f3       	breq	.-6      	; 0x1f4 <main+0x78>
		game_timerStop();
 1fa:	fa d1       	rcall	.+1012   	; 0x5f0 <game_timerStop>
		printf("score is: %4i\n",game_getScore());
 1fc:	db d1       	rcall	.+950    	; 0x5b4 <game_getScore>
 1fe:	9f 93       	push	r25
 200:	8f 93       	push	r24
 202:	9f 92       	push	r9
 204:	8f 92       	push	r8
 206:	97 d2       	rcall	.+1326   	; 0x736 <printf>
		printf("X:%4i Y:%4i\r",posx,posy);
 208:	ff 92       	push	r15
 20a:	ef 92       	push	r14
 20c:	1f 93       	push	r17
 20e:	0f 93       	push	r16
 210:	bf 92       	push	r11
 212:	af 92       	push	r10
 214:	90 d2       	rcall	.+1312   	; 0x736 <printf>
		pwm_setServo(posx);
 216:	c8 01       	movw	r24, r16
 218:	93 d1       	rcall	.+806    	; 0x540 <pwm_setServo>
		printf("received: ");
 21a:	df 92       	push	r13
 21c:	cf 92       	push	r12
 21e:	8b d2       	rcall	.+1302   	; 0x736 <printf>
		can_print(receive);
 220:	e9 80       	ldd	r14, Y+1	; 0x01
 222:	fa 80       	ldd	r15, Y+2	; 0x02
 224:	0b 81       	ldd	r16, Y+3	; 0x03
 226:	1c 81       	ldd	r17, Y+4	; 0x04
 228:	2d 81       	ldd	r18, Y+5	; 0x05
 22a:	3e 81       	ldd	r19, Y+6	; 0x06
 22c:	4f 81       	ldd	r20, Y+7	; 0x07
 22e:	58 85       	ldd	r21, Y+8	; 0x08
 230:	69 85       	ldd	r22, Y+9	; 0x09
 232:	7a 85       	ldd	r23, Y+10	; 0x0a
 234:	8b 85       	ldd	r24, Y+11	; 0x0b
 236:	93 d0       	rcall	.+294    	; 0x35e <can_print>
		uint16_t value = adc_read(0);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	82 df       	rcall	.-252    	; 0x140 <adc_read>
		printf("adc value: %4i \n", value);
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	7f 92       	push	r7
 242:	6f 92       	push	r6
 244:	78 d2       	rcall	.+1264   	; 0x736 <printf>
		PORTB ^= (1<<PB7);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	80 58       	subi	r24, 0x80	; 128
 24a:	85 b9       	out	0x05, r24	; 5
	}
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	be cf       	rjmp	.-132    	; 0x1d4 <main+0x58>

00000258 <can_init>:
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
	}
	mcp2515_requestToSend(bufferControl);
}
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	0c d1       	rcall	.+536    	; 0x476 <mcp2515_init>
 25e:	4f ef       	ldi	r20, 0xFF	; 255
 260:	60 e6       	ldi	r22, 0x60	; 96
 262:	80 e6       	ldi	r24, 0x60	; 96
 264:	ef d0       	rcall	.+478    	; 0x444 <mcp2515_bitModify>
 266:	4f ef       	ldi	r20, 0xFF	; 255
 268:	60 e6       	ldi	r22, 0x60	; 96
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	eb d0       	rcall	.+470    	; 0x444 <mcp2515_bitModify>
 26e:	4c 2f       	mov	r20, r28
 270:	60 ee       	ldi	r22, 0xE0	; 224
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	e7 d0       	rcall	.+462    	; 0x444 <mcp2515_bitModify>
 276:	52 98       	cbi	0x0a, 2	; 10
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <can_pollInt>:
	return m;
}

uint8_t can_pollInt(){
	//PD2 is set as input in can_init()
	while(!(PINB & (1<<PB4))){} //w8 for interrupt, hopefully not forever!
 27c:	1c 9b       	sbis	0x03, 4	; 3
 27e:	fe cf       	rjmp	.-4      	; 0x27c <can_pollInt>
	//find out which buffer is full
	//if both is full, will only read the first one. Might be problematic if we send lot of data on the can-bus
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF){
 280:	8c e2       	ldi	r24, 0x2C	; 44
 282:	d4 d0       	rcall	.+424    	; 0x42c <mcp2515_read>
 284:	80 ff       	sbrs	r24, 0
 286:	06 c0       	rjmp	.+12     	; 0x294 <can_pollInt+0x18>
		mcp2515_bitModify(MCP_CANINTF, MCP_RX0IF, 0x00); //unset flag
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	8c e2       	ldi	r24, 0x2C	; 44
 28e:	da d0       	rcall	.+436    	; 0x444 <mcp2515_bitModify>
		return MCP_RXB0CTRL;
 290:	80 e6       	ldi	r24, 0x60	; 96
 292:	08 95       	ret
	}
	
	else if (mcp2515_read(MCP_CANINTF) & MCP_RX1IF){
 294:	8c e2       	ldi	r24, 0x2C	; 44
 296:	ca d0       	rcall	.+404    	; 0x42c <mcp2515_read>
 298:	81 ff       	sbrs	r24, 1
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <can_pollInt+0x2c>
		mcp2515_bitModify(MCP_CANINTF, MCP_RX1IF, 0x00); //unset flag
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	8c e2       	ldi	r24, 0x2C	; 44
 2a2:	d0 d0       	rcall	.+416    	; 0x444 <mcp2515_bitModify>
		return MCP_RXB1CTRL;
 2a4:	80 e7       	ldi	r24, 0x70	; 112
 2a6:	08 95       	ret
	}		
}
 2a8:	08 95       	ret

000002aa <can_dataReceive>:
	}
	mcp2515_requestToSend(bufferControl);
}

//TODO: can use real interrupts to read from buffers when message is received
can_message_t can_dataReceive(void){
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	2b 97       	sbiw	r28, 0x0b	; 11
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	8c 01       	movw	r16, r24
	//creating msg stuct. Also sets all elem to zero
	can_message_t m;
	memset(&m, 0, sizeof(can_message_t));
 2c8:	fe 01       	movw	r30, r28
 2ca:	31 96       	adiw	r30, 0x01	; 1
 2cc:	8b e0       	ldi	r24, 0x0B	; 11
 2ce:	df 01       	movw	r26, r30
 2d0:	1d 92       	st	X+, r1
 2d2:	8a 95       	dec	r24
 2d4:	e9 f7       	brne	.-6      	; 0x2d0 <can_dataReceive+0x26>

	//which buffer to read?
	uint8_t bufferSelect=can_pollInt();
 2d6:	d2 df       	rcall	.-92     	; 0x27c <can_pollInt>
 2d8:	e8 2e       	mov	r14, r24

	//get id and length
	//id is 16bit, and needs some shifting of two registers which are then or'ed together
	m.id=(uint16_t)((mcp2515_read(bufferSelect+2) >> 5) | (mcp2515_read(bufferSelect+1) << 3));
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	8e 0d       	add	r24, r14
 2de:	a6 d0       	rcall	.+332    	; 0x42c <mcp2515_read>
 2e0:	f8 2e       	mov	r15, r24
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	8e 0d       	add	r24, r14
 2e6:	a2 d0       	rcall	.+324    	; 0x42c <mcp2515_read>
 2e8:	b8 e0       	ldi	r27, 0x08	; 8
 2ea:	8b 9f       	mul	r24, r27
 2ec:	c0 01       	movw	r24, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	f6 94       	lsr	r15
 2f2:	f6 94       	lsr	r15
 2f4:	f6 94       	lsr	r15
 2f6:	f6 94       	lsr	r15
 2f8:	f6 94       	lsr	r15
 2fa:	9c 01       	movw	r18, r24
 2fc:	2f 29       	or	r18, r15
 2fe:	3a 83       	std	Y+2, r19	; 0x02
 300:	29 83       	std	Y+1, r18	; 0x01
	//length is 8bit, bit actual data only on 4 lsb. Therefore the bitmask
	m.length = mcp2515_read(bufferSelect+5) & 0x0f;
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	8e 0d       	add	r24, r14
 306:	92 d0       	rcall	.+292    	; 0x42c <mcp2515_read>
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	8b 83       	std	Y+3, r24	; 0x03

	//iterate all the data bytes 
	for (uint8_t i = 0; i < m.length; i++){
 30c:	88 23       	and	r24, r24
 30e:	89 f0       	breq	.+34     	; 0x332 <can_dataReceive+0x88>
 310:	f1 2c       	mov	r15, r1
		m.data[i] = mcp2515_read(bufferSelect + 6 + i);
 312:	26 e0       	ldi	r18, 0x06	; 6
 314:	e2 0e       	add	r14, r18
 316:	8e 2d       	mov	r24, r14
 318:	8f 0d       	add	r24, r15
 31a:	88 d0       	rcall	.+272    	; 0x42c <mcp2515_read>
 31c:	e4 e0       	ldi	r30, 0x04	; 4
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ec 0f       	add	r30, r28
 322:	fd 1f       	adc	r31, r29
 324:	ef 0d       	add	r30, r15
 326:	f1 1d       	adc	r31, r1
 328:	80 83       	st	Z, r24
	m.id=(uint16_t)((mcp2515_read(bufferSelect+2) >> 5) | (mcp2515_read(bufferSelect+1) << 3));
	//length is 8bit, bit actual data only on 4 lsb. Therefore the bitmask
	m.length = mcp2515_read(bufferSelect+5) & 0x0f;

	//iterate all the data bytes 
	for (uint8_t i = 0; i < m.length; i++){
 32a:	f3 94       	inc	r15
 32c:	9b 81       	ldd	r25, Y+3	; 0x03
 32e:	f9 16       	cp	r15, r25
 330:	90 f3       	brcs	.-28     	; 0x316 <can_dataReceive+0x6c>
		m.data[i] = mcp2515_read(bufferSelect + 6 + i);
	}
	return m;
 332:	8b e0       	ldi	r24, 0x0B	; 11
 334:	fe 01       	movw	r30, r28
 336:	31 96       	adiw	r30, 0x01	; 1
 338:	d8 01       	movw	r26, r16
 33a:	01 90       	ld	r0, Z+
 33c:	0d 92       	st	X+, r0
 33e:	8a 95       	dec	r24
 340:	e1 f7       	brne	.-8      	; 0x33a <can_dataReceive+0x90>
}
 342:	c8 01       	movw	r24, r16
 344:	2b 96       	adiw	r28, 0x0b	; 11
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	08 95       	ret

0000035e <can_print>:
		mcp2515_bitModify(MCP_CANINTF, MCP_RX1IF, 0x00); //unset flag
		return MCP_RXB1CTRL;
	}		
}

void can_print(can_message_t m){ //for debugging
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	2b 97       	sbiw	r28, 0x0b	; 11
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	e9 82       	std	Y+1, r14	; 0x01
 380:	fa 82       	std	Y+2, r15	; 0x02
 382:	c0 2e       	mov	r12, r16
 384:	0b 83       	std	Y+3, r16	; 0x03
 386:	1c 83       	std	Y+4, r17	; 0x04
 388:	2d 83       	std	Y+5, r18	; 0x05
 38a:	3e 83       	std	Y+6, r19	; 0x06
 38c:	4f 83       	std	Y+7, r20	; 0x07
 38e:	58 87       	std	Y+8, r21	; 0x08
 390:	69 87       	std	Y+9, r22	; 0x09
 392:	7a 87       	std	Y+10, r23	; 0x0a
 394:	8b 87       	std	Y+11, r24	; 0x0b
	printf("can_message_t(id:%d, len:%d, data:{", m.id, m.length);
 396:	1f 92       	push	r1
 398:	0f 93       	push	r16
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	8f 93       	push	r24
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	8f 93       	push	r24
 3a2:	8e e3       	ldi	r24, 0x3E	; 62
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	c5 d1       	rcall	.+906    	; 0x736 <printf>
	if(m.length){
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	00 23       	and	r16, r16
 3ba:	31 f1       	breq	.+76     	; 0x408 <can_print+0xaa>
		printf("%d", m.data[0]);
 3bc:	8c 81       	ldd	r24, Y+4	; 0x04
 3be:	1f 92       	push	r1
 3c0:	8f 93       	push	r24
 3c2:	84 e6       	ldi	r24, 0x64	; 100
 3c4:	92 e0       	ldi	r25, 0x02	; 2
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	b5 d1       	rcall	.+874    	; 0x736 <printf>
	}
	for(uint8_t i = 1; i < m.length; i++){
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 17       	cp	r24, r16
 3d8:	b8 f4       	brcc	.+46     	; 0x408 <can_print+0xaa>
 3da:	7e 01       	movw	r14, r28
 3dc:	e5 e0       	ldi	r30, 0x05	; 5
 3de:	ee 0e       	add	r14, r30
 3e0:	f1 1c       	adc	r15, r1
 3e2:	dd 24       	eor	r13, r13
 3e4:	d3 94       	inc	r13
		printf(", %d", m.data[i]);
 3e6:	02 e6       	ldi	r16, 0x62	; 98
 3e8:	12 e0       	ldi	r17, 0x02	; 2
 3ea:	f7 01       	movw	r30, r14
 3ec:	81 91       	ld	r24, Z+
 3ee:	7f 01       	movw	r14, r30
 3f0:	1f 92       	push	r1
 3f2:	8f 93       	push	r24
 3f4:	1f 93       	push	r17
 3f6:	0f 93       	push	r16
 3f8:	9e d1       	rcall	.+828    	; 0x736 <printf>
void can_print(can_message_t m){ //for debugging
	printf("can_message_t(id:%d, len:%d, data:{", m.id, m.length);
	if(m.length){
		printf("%d", m.data[0]);
	}
	for(uint8_t i = 1; i < m.length; i++){
 3fa:	d3 94       	inc	r13
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	dc 10       	cpse	r13, r12
 406:	f1 cf       	rjmp	.-30     	; 0x3ea <can_print+0x8c>
		printf(", %d", m.data[i]);
	}
	printf("})\n");
 408:	87 e6       	ldi	r24, 0x67	; 103
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	a5 d1       	rcall	.+842    	; 0x758 <puts>
}
 40e:	2b 96       	adiw	r28, 0x0b	; 11
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	08 95       	ret

0000042c <mcp2515_read>:
}

void mcp2515_requestToSend(uint8_t bufferSelect){
	PORTB &= ~(1 << MCP2515_CS); //select
	spi_transmit(bufferSelect);
	PORTB |= (1 << MCP2515_CS); //deselect
 42c:	cf 93       	push	r28
 42e:	c8 2f       	mov	r28, r24
 430:	28 98       	cbi	0x05, 0	; 5
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	36 d0       	rcall	.+108    	; 0x4a2 <spi_transmit>
 436:	8c 2f       	mov	r24, r28
 438:	34 d0       	rcall	.+104    	; 0x4a2 <spi_transmit>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	32 d0       	rcall	.+100    	; 0x4a2 <spi_transmit>
 43e:	28 9a       	sbi	0x05, 0	; 5
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <mcp2515_bitModify>:
}

void mcp2515_bitModify(uint8_t address, uint8_t mask, uint8_t data){
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	18 2f       	mov	r17, r24
 44c:	d6 2f       	mov	r29, r22
 44e:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS); //select
 450:	28 98       	cbi	0x05, 0	; 5
	spi_transmit(MCP_BITMOD);
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	26 d0       	rcall	.+76     	; 0x4a2 <spi_transmit>
	spi_transmit(address);
 456:	81 2f       	mov	r24, r17
 458:	24 d0       	rcall	.+72     	; 0x4a2 <spi_transmit>
	spi_transmit(mask);
 45a:	8d 2f       	mov	r24, r29
 45c:	22 d0       	rcall	.+68     	; 0x4a2 <spi_transmit>
	spi_transmit(data);
 45e:	8c 2f       	mov	r24, r28
 460:	20 d0       	rcall	.+64     	; 0x4a2 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 462:	28 9a       	sbi	0x05, 0	; 5
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	08 95       	ret

0000046c <mcp2515_reset>:
void mcp2515_reset(void){
	PORTB &= ~(1 << MCP2515_CS); //select
 46c:	28 98       	cbi	0x05, 0	; 5
	spi_transmit(MCP_RESET);
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	18 d0       	rcall	.+48     	; 0x4a2 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 472:	28 9a       	sbi	0x05, 0	; 5
 474:	08 95       	ret

00000476 <mcp2515_init>:
#include <stdlib.h>
#include <stdio.h>

void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
 476:	0e d0       	rcall	.+28     	; 0x494 <spi_init>
	mcp2515_reset();
 478:	f9 df       	rcall	.-14     	; 0x46c <mcp2515_reset>
	
	//selftest, will reset chip until it is in configuration mode
	while(!value){
		value=mcp2515_read(MCP_CANSTAT);
 47a:	8e e0       	ldi	r24, 0x0E	; 14
 47c:	d7 df       	rcall	.-82     	; 0x42c <mcp2515_read>
		if ((value & MODE_MASK) != MODE_CONFIG) {
 47e:	98 2f       	mov	r25, r24
 480:	90 7e       	andi	r25, 0xE0	; 224
 482:	90 38       	cpi	r25, 0x80	; 128
 484:	21 f0       	breq	.+8      	; 0x48e <mcp2515_init+0x18>
			puts("ERROR! ERROR! MCP2515 is NOT in configuration mode after reset!\r");
 486:	8a e6       	ldi	r24, 0x6A	; 106
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	66 d1       	rcall	.+716    	; 0x758 <puts>
 48c:	f6 cf       	rjmp	.-20     	; 0x47a <mcp2515_init+0x4>
	uint8_t value=0;
	spi_init();
	mcp2515_reset();
	
	//selftest, will reset chip until it is in configuration mode
	while(!value){
 48e:	88 23       	and	r24, r24
 490:	a1 f3       	breq	.-24     	; 0x47a <mcp2515_init+0x4>
		if ((value & MODE_MASK) != MODE_CONFIG) {
			puts("ERROR! ERROR! MCP2515 is NOT in configuration mode after reset!\r");
			value=0;
		}
	}
}
 492:	08 95       	ret

00000494 <spi_init>:
#include <avr/io.h>


void spi_init(void){
	//SCK UT, MISO IN, MOSI UT
	DDRB |= (1 << PB2) | (1<<PB1) | (1 << PB0);
 494:	84 b1       	in	r24, 0x04	; 4
 496:	87 60       	ori	r24, 0x07	; 7
 498:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB3);
 49a:	23 98       	cbi	0x04, 3	; 4
	// NOT intterupt driven
	// mcp2515, max frequency is 10mhz
	// with external clock, F_CPU is defined to 4,9mhz. we divide by 4, so our sck is 1,2mhz
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 49c:	81 e5       	ldi	r24, 0x51	; 81
 49e:	8c bd       	out	0x2c, r24	; 44
 4a0:	08 95       	ret

000004a2 <spi_transmit>:
}



uint8_t spi_transmit(char data){
	SPDR = data;
 4a2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 4a4:	0d b4       	in	r0, 0x2d	; 45
 4a6:	07 fe       	sbrs	r0, 7
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <spi_transmit+0x2>
	return SPDR;
 4aa:	8e b5       	in	r24, 0x2e	; 46
}
 4ac:	08 95       	ret

000004ae <uart_putChar>:
	fdevopen(uart_putChar, uart_getChar);
}


void uart_putChar(unsigned char c){
	while (!(UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
 4ae:	e0 ec       	ldi	r30, 0xC0	; 192
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	90 81       	ld	r25, Z
 4b4:	95 ff       	sbrs	r25, 5
 4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <uart_putChar+0x4>
	UDR0 = c; // Put data in to buffer
 4b8:	80 93 c6 00 	sts	0x00C6, r24
 4bc:	08 95       	ret

000004be <uart_getChar>:
}


unsigned char uart_getChar(){
	
	while((UCSR0A) & (1<<RXC0)); //Wait for "full" transmit buffer
 4be:	e0 ec       	ldi	r30, 0xC0	; 192
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	88 23       	and	r24, r24
 4c6:	ec f3       	brlt	.-6      	; 0x4c2 <uart_getChar+0x4>
	return UDR0;
 4c8:	80 91 c6 00 	lds	r24, 0x00C6
}
 4cc:	08 95       	ret

000004ce <uart_init>:

#define F_CPU 16000000
#define ubrr (F_CPU/16/9600 - 1)

void uart_init(void){
	UBRR0L = (unsigned char) ubrr;
 4ce:	87 e6       	ldi	r24, 0x67	; 103
 4d0:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 4d4:	e1 ec       	ldi	r30, 0xC1	; 193
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	88 61       	ori	r24, 0x18	; 24
 4dc:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ00);
 4de:	e2 ec       	ldi	r30, 0xC2	; 194
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	80 83       	st	Z, r24
	
	//for puts and printf
	fdevopen(uart_putChar, uart_getChar);
 4e8:	6f e5       	ldi	r22, 0x5F	; 95
 4ea:	72 e0       	ldi	r23, 0x02	; 2
 4ec:	87 e5       	ldi	r24, 0x57	; 87
 4ee:	92 e0       	ldi	r25, 0x02	; 2
 4f0:	d8 c0       	rjmp	.+432    	; 0x6a2 <fdevopen>
 4f2:	08 95       	ret

000004f4 <pwm_init>:
#include <avr/io.h>
#include "../communication/uart.h"

void pwm_init(void){
	//fast pwm
	TCCR3A &= ~(1<< WGM30);
 4f4:	a0 e9       	ldi	r26, 0x90	; 144
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	8c 91       	ld	r24, X
 4fa:	8e 7f       	andi	r24, 0xFE	; 254
 4fc:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);
 4fe:	8c 91       	ld	r24, X
 500:	82 60       	ori	r24, 0x02	; 2
 502:	8c 93       	st	X, r24
	TCCR3B |= (1<<WGM32);
 504:	e1 e9       	ldi	r30, 0x91	; 145
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	88 60       	ori	r24, 0x08	; 8
 50c:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33);
 50e:	80 81       	ld	r24, Z
 510:	80 61       	ori	r24, 0x10	; 16
 512:	80 83       	st	Z, r24
	
	//inverting
	TCCR3A|= (1<<COM3A0);
 514:	8c 91       	ld	r24, X
 516:	80 64       	ori	r24, 0x40	; 64
 518:	8c 93       	st	X, r24
	TCCR3A|= (1<<COM3A1);
 51a:	8c 91       	ld	r24, X
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	8c 93       	st	X, r24
	
	//prescaler
	TCCR3B |= (1<<CS30) | (1<<CS32);
 520:	80 81       	ld	r24, Z
 522:	85 60       	ori	r24, 0x05	; 5
 524:	80 83       	st	Z, r24
	TCCR3B&= ~(1<<CS31);
 526:	80 81       	ld	r24, Z
 528:	8d 7f       	andi	r24, 0xFD	; 253
 52a:	80 83       	st	Z, r24
	
	ICR3 = 312;
 52c:	88 e3       	ldi	r24, 0x38	; 56
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	90 93 97 00 	sts	0x0097, r25
 534:	80 93 96 00 	sts	0x0096, r24
 538:	08 95       	ret

0000053a <pwm_setValue>:
}

void pwm_setValue(uint8_t val){
	OCR3AL=val;
 53a:	80 93 98 00 	sts	0x0098, r24
 53e:	08 95       	ret

00000540 <pwm_setServo>:
}

//values between -100 and +100
void pwm_setServo(int16_t val){
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
	static uint8_t max=39;
	static uint8_t min=21;
	uint8_t mid=(max+min)/2;
	
	//transelate -100->+100 to values between 24 and 42
	val+=100;
 548:	8c 59       	subi	r24, 0x9C	; 156
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
	//now, we have 0-200; we want 0-18 and then + 24
	val=((val*18)/200)+min;
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	9c 01       	movw	r18, r24
 552:	22 0f       	add	r18, r18
 554:	33 1f       	adc	r19, r19
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	82 0f       	add	r24, r18
 560:	93 1f       	adc	r25, r19
 562:	68 ec       	ldi	r22, 0xC8	; 200
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	76 d0       	rcall	.+236    	; 0x654 <__divmodhi4>
 568:	8b 01       	movw	r16, r22
 56a:	eb 01       	movw	r28, r22
 56c:	65 96       	adiw	r28, 0x15	; 21
		
	printf("val: %4i \n",val);
 56e:	df 93       	push	r29
 570:	cf 93       	push	r28
 572:	8b ea       	ldi	r24, 0xAB	; 171
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	9f 93       	push	r25
 578:	8f 93       	push	r24
 57a:	dd d0       	rcall	.+442    	; 0x736 <printf>
	
	if ((val<=(mid+1)) && (val>=(mid-1))){
 57c:	08 50       	subi	r16, 0x08	; 8
 57e:	11 09       	sbc	r17, r1
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	03 30       	cpi	r16, 0x03	; 3
 58a:	11 05       	cpc	r17, r1
 58c:	20 f4       	brcc	.+8      	; 0x596 <pwm_setServo+0x56>
	
	ICR3 = 312;
}

void pwm_setValue(uint8_t val){
	OCR3AL=val;
 58e:	8e e1       	ldi	r24, 0x1E	; 30
 590:	80 93 98 00 	sts	0x0098, r24
 594:	0a c0       	rjmp	.+20     	; 0x5aa <pwm_setServo+0x6a>
	
	if ((val<=(mid+1)) && (val>=(mid-1))){
		pwm_setValue(mid);
	}
	
	else if ((val>=min) && (val<=max)){
 596:	ce 01       	movw	r24, r28
 598:	45 97       	sbiw	r24, 0x15	; 21
 59a:	43 97       	sbiw	r24, 0x13	; 19
 59c:	18 f4       	brcc	.+6      	; 0x5a4 <pwm_setServo+0x64>
	
	ICR3 = 312;
}

void pwm_setValue(uint8_t val){
	OCR3AL=val;
 59e:	c0 93 98 00 	sts	0x0098, r28
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <pwm_setServo+0x6a>
 5a4:	8e e1       	ldi	r24, 0x1E	; 30
 5a6:	80 93 98 00 	sts	0x0098, r24
		pwm_setValue(val);
	}
	else{
		pwm_setValue(mid);
	}
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <game_getScore>:
#include "game.h"

static volatile uint16_t score = 0;

uint16_t game_getScore(void){
	return score;
 5b4:	80 91 b6 02 	lds	r24, 0x02B6
 5b8:	90 91 b7 02 	lds	r25, 0x02B7
}
 5bc:	08 95       	ret

000005be <game_addPoints>:

void game_addPoints(void){
	score= score+1;
 5be:	80 91 b6 02 	lds	r24, 0x02B6
 5c2:	90 91 b7 02 	lds	r25, 0x02B7
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 b7 02 	sts	0x02B7, r25
 5cc:	80 93 b6 02 	sts	0x02B6, r24
 5d0:	08 95       	ret

000005d2 <game_timerStart>:
}

void game_timerStart(void){
	score = 0;
 5d2:	10 92 b7 02 	sts	0x02B7, r1
 5d6:	10 92 b6 02 	sts	0x02B6, r1
	TCCR1B |=  (1 << CS10); 
 5da:	e1 e8       	ldi	r30, 0x81	; 129
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);
 5e4:	ef e6       	ldi	r30, 0x6F	; 111
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 83       	st	Z, r24
 5ee:	08 95       	ret

000005f0 <game_timerStop>:
}

void game_timerStop(void){
	TCCR1B &= ~(1 << CS10);
 5f0:	e1 e8       	ldi	r30, 0x81	; 129
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8e 7f       	andi	r24, 0xFE	; 254
 5f8:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << TOIE1);
 5fa:	ef e6       	ldi	r30, 0x6F	; 111
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	8e 7f       	andi	r24, 0xFE	; 254
 602:	80 83       	st	Z, r24
 604:	08 95       	ret

00000606 <__vector_20>:
}

ISR(TIMER1_OVF_vect){
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	0b b6       	in	r0, 0x3b	; 59
 612:	0f 92       	push	r0
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
	game_addPoints();
 62c:	c8 df       	rcall	.-112    	; 0x5be <game_addPoints>
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0b be       	out	0x3b, r0	; 59
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <__divmodhi4>:
 654:	97 fb       	bst	r25, 7
 656:	07 2e       	mov	r0, r23
 658:	16 f4       	brtc	.+4      	; 0x65e <__divmodhi4+0xa>
 65a:	00 94       	com	r0
 65c:	06 d0       	rcall	.+12     	; 0x66a <__divmodhi4_neg1>
 65e:	77 fd       	sbrc	r23, 7
 660:	08 d0       	rcall	.+16     	; 0x672 <__divmodhi4_neg2>
 662:	0b d0       	rcall	.+22     	; 0x67a <__udivmodhi4>
 664:	07 fc       	sbrc	r0, 7
 666:	05 d0       	rcall	.+10     	; 0x672 <__divmodhi4_neg2>
 668:	3e f4       	brtc	.+14     	; 0x678 <__divmodhi4_exit>

0000066a <__divmodhi4_neg1>:
 66a:	90 95       	com	r25
 66c:	81 95       	neg	r24
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	08 95       	ret

00000672 <__divmodhi4_neg2>:
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255

00000678 <__divmodhi4_exit>:
 678:	08 95       	ret

0000067a <__udivmodhi4>:
 67a:	aa 1b       	sub	r26, r26
 67c:	bb 1b       	sub	r27, r27
 67e:	51 e1       	ldi	r21, 0x11	; 17
 680:	07 c0       	rjmp	.+14     	; 0x690 <__udivmodhi4_ep>

00000682 <__udivmodhi4_loop>:
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	a6 17       	cp	r26, r22
 688:	b7 07       	cpc	r27, r23
 68a:	10 f0       	brcs	.+4      	; 0x690 <__udivmodhi4_ep>
 68c:	a6 1b       	sub	r26, r22
 68e:	b7 0b       	sbc	r27, r23

00000690 <__udivmodhi4_ep>:
 690:	88 1f       	adc	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	5a 95       	dec	r21
 696:	a9 f7       	brne	.-22     	; 0x682 <__udivmodhi4_loop>
 698:	80 95       	com	r24
 69a:	90 95       	com	r25
 69c:	bc 01       	movw	r22, r24
 69e:	cd 01       	movw	r24, r26
 6a0:	08 95       	ret

000006a2 <fdevopen>:
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	ec 01       	movw	r28, r24
 6ac:	8b 01       	movw	r16, r22
 6ae:	00 97       	sbiw	r24, 0x00	; 0
 6b0:	31 f4       	brne	.+12     	; 0x6be <fdevopen+0x1c>
 6b2:	61 15       	cp	r22, r1
 6b4:	71 05       	cpc	r23, r1
 6b6:	19 f4       	brne	.+6      	; 0x6be <fdevopen+0x1c>
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	37 c0       	rjmp	.+110    	; 0x72c <fdevopen+0x8a>
 6be:	6e e0       	ldi	r22, 0x0E	; 14
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	63 d2       	rcall	.+1222   	; 0xb8e <calloc>
 6c8:	fc 01       	movw	r30, r24
 6ca:	00 97       	sbiw	r24, 0x00	; 0
 6cc:	a9 f3       	breq	.-22     	; 0x6b8 <fdevopen+0x16>
 6ce:	80 e8       	ldi	r24, 0x80	; 128
 6d0:	83 83       	std	Z+3, r24	; 0x03
 6d2:	01 15       	cp	r16, r1
 6d4:	11 05       	cpc	r17, r1
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <fdevopen+0x52>
 6d8:	13 87       	std	Z+11, r17	; 0x0b
 6da:	02 87       	std	Z+10, r16	; 0x0a
 6dc:	81 e8       	ldi	r24, 0x81	; 129
 6de:	83 83       	std	Z+3, r24	; 0x03
 6e0:	80 91 b8 02 	lds	r24, 0x02B8
 6e4:	90 91 b9 02 	lds	r25, 0x02B9
 6e8:	89 2b       	or	r24, r25
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <fdevopen+0x52>
 6ec:	f0 93 b9 02 	sts	0x02B9, r31
 6f0:	e0 93 b8 02 	sts	0x02B8, r30
 6f4:	20 97       	sbiw	r28, 0x00	; 0
 6f6:	c9 f0       	breq	.+50     	; 0x72a <fdevopen+0x88>
 6f8:	d1 87       	std	Z+9, r29	; 0x09
 6fa:	c0 87       	std	Z+8, r28	; 0x08
 6fc:	83 81       	ldd	r24, Z+3	; 0x03
 6fe:	82 60       	ori	r24, 0x02	; 2
 700:	83 83       	std	Z+3, r24	; 0x03
 702:	80 91 ba 02 	lds	r24, 0x02BA
 706:	90 91 bb 02 	lds	r25, 0x02BB
 70a:	89 2b       	or	r24, r25
 70c:	71 f4       	brne	.+28     	; 0x72a <fdevopen+0x88>
 70e:	f0 93 bb 02 	sts	0x02BB, r31
 712:	e0 93 ba 02 	sts	0x02BA, r30
 716:	80 91 bc 02 	lds	r24, 0x02BC
 71a:	90 91 bd 02 	lds	r25, 0x02BD
 71e:	89 2b       	or	r24, r25
 720:	21 f4       	brne	.+8      	; 0x72a <fdevopen+0x88>
 722:	f0 93 bd 02 	sts	0x02BD, r31
 726:	e0 93 bc 02 	sts	0x02BC, r30
 72a:	cf 01       	movw	r24, r30
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	08 95       	ret

00000736 <printf>:
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	fe 01       	movw	r30, r28
 740:	36 96       	adiw	r30, 0x06	; 6
 742:	61 91       	ld	r22, Z+
 744:	71 91       	ld	r23, Z+
 746:	af 01       	movw	r20, r30
 748:	80 91 ba 02 	lds	r24, 0x02BA
 74c:	90 91 bb 02 	lds	r25, 0x02BB
 750:	30 d0       	rcall	.+96     	; 0x7b2 <vfprintf>
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <puts>:
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	e0 91 ba 02 	lds	r30, 0x02BA
 764:	f0 91 bb 02 	lds	r31, 0x02BB
 768:	23 81       	ldd	r18, Z+3	; 0x03
 76a:	21 ff       	sbrs	r18, 1
 76c:	1b c0       	rjmp	.+54     	; 0x7a4 <puts+0x4c>
 76e:	ec 01       	movw	r28, r24
 770:	00 e0       	ldi	r16, 0x00	; 0
 772:	10 e0       	ldi	r17, 0x00	; 0
 774:	89 91       	ld	r24, Y+
 776:	60 91 ba 02 	lds	r22, 0x02BA
 77a:	70 91 bb 02 	lds	r23, 0x02BB
 77e:	db 01       	movw	r26, r22
 780:	18 96       	adiw	r26, 0x08	; 8
 782:	ed 91       	ld	r30, X+
 784:	fc 91       	ld	r31, X
 786:	19 97       	sbiw	r26, 0x09	; 9
 788:	88 23       	and	r24, r24
 78a:	31 f0       	breq	.+12     	; 0x798 <puts+0x40>
 78c:	19 95       	eicall
 78e:	89 2b       	or	r24, r25
 790:	89 f3       	breq	.-30     	; 0x774 <puts+0x1c>
 792:	0f ef       	ldi	r16, 0xFF	; 255
 794:	1f ef       	ldi	r17, 0xFF	; 255
 796:	ee cf       	rjmp	.-36     	; 0x774 <puts+0x1c>
 798:	8a e0       	ldi	r24, 0x0A	; 10
 79a:	19 95       	eicall
 79c:	89 2b       	or	r24, r25
 79e:	11 f4       	brne	.+4      	; 0x7a4 <puts+0x4c>
 7a0:	c8 01       	movw	r24, r16
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <puts+0x50>
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f ef       	ldi	r25, 0xFF	; 255
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	08 95       	ret

000007b2 <vfprintf>:
 7b2:	2f 92       	push	r2
 7b4:	3f 92       	push	r3
 7b6:	4f 92       	push	r4
 7b8:	5f 92       	push	r5
 7ba:	6f 92       	push	r6
 7bc:	7f 92       	push	r7
 7be:	8f 92       	push	r8
 7c0:	9f 92       	push	r9
 7c2:	af 92       	push	r10
 7c4:	bf 92       	push	r11
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	2c 97       	sbiw	r28, 0x0c	; 12
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	7c 01       	movw	r14, r24
 7e8:	6b 01       	movw	r12, r22
 7ea:	8a 01       	movw	r16, r20
 7ec:	fc 01       	movw	r30, r24
 7ee:	17 82       	std	Z+7, r1	; 0x07
 7f0:	16 82       	std	Z+6, r1	; 0x06
 7f2:	83 81       	ldd	r24, Z+3	; 0x03
 7f4:	81 ff       	sbrs	r24, 1
 7f6:	b0 c1       	rjmp	.+864    	; 0xb58 <vfprintf+0x3a6>
 7f8:	ce 01       	movw	r24, r28
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	4c 01       	movw	r8, r24
 7fe:	f7 01       	movw	r30, r14
 800:	93 81       	ldd	r25, Z+3	; 0x03
 802:	f6 01       	movw	r30, r12
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	6f 01       	movw	r12, r30
 80e:	88 23       	and	r24, r24
 810:	09 f4       	brne	.+2      	; 0x814 <vfprintf+0x62>
 812:	9e c1       	rjmp	.+828    	; 0xb50 <vfprintf+0x39e>
 814:	85 32       	cpi	r24, 0x25	; 37
 816:	39 f4       	brne	.+14     	; 0x826 <vfprintf+0x74>
 818:	93 fd       	sbrc	r25, 3
 81a:	85 91       	lpm	r24, Z+
 81c:	93 ff       	sbrs	r25, 3
 81e:	81 91       	ld	r24, Z+
 820:	6f 01       	movw	r12, r30
 822:	85 32       	cpi	r24, 0x25	; 37
 824:	21 f4       	brne	.+8      	; 0x82e <vfprintf+0x7c>
 826:	b7 01       	movw	r22, r14
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0f d3       	rcall	.+1566   	; 0xe4a <fputc>
 82c:	e8 cf       	rjmp	.-48     	; 0x7fe <vfprintf+0x4c>
 82e:	51 2c       	mov	r5, r1
 830:	31 2c       	mov	r3, r1
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	20 32       	cpi	r18, 0x20	; 32
 836:	a0 f4       	brcc	.+40     	; 0x860 <vfprintf+0xae>
 838:	8b 32       	cpi	r24, 0x2B	; 43
 83a:	69 f0       	breq	.+26     	; 0x856 <vfprintf+0xa4>
 83c:	30 f4       	brcc	.+12     	; 0x84a <vfprintf+0x98>
 83e:	80 32       	cpi	r24, 0x20	; 32
 840:	59 f0       	breq	.+22     	; 0x858 <vfprintf+0xa6>
 842:	83 32       	cpi	r24, 0x23	; 35
 844:	69 f4       	brne	.+26     	; 0x860 <vfprintf+0xae>
 846:	20 61       	ori	r18, 0x10	; 16
 848:	2c c0       	rjmp	.+88     	; 0x8a2 <vfprintf+0xf0>
 84a:	8d 32       	cpi	r24, 0x2D	; 45
 84c:	39 f0       	breq	.+14     	; 0x85c <vfprintf+0xaa>
 84e:	80 33       	cpi	r24, 0x30	; 48
 850:	39 f4       	brne	.+14     	; 0x860 <vfprintf+0xae>
 852:	21 60       	ori	r18, 0x01	; 1
 854:	26 c0       	rjmp	.+76     	; 0x8a2 <vfprintf+0xf0>
 856:	22 60       	ori	r18, 0x02	; 2
 858:	24 60       	ori	r18, 0x04	; 4
 85a:	23 c0       	rjmp	.+70     	; 0x8a2 <vfprintf+0xf0>
 85c:	28 60       	ori	r18, 0x08	; 8
 85e:	21 c0       	rjmp	.+66     	; 0x8a2 <vfprintf+0xf0>
 860:	27 fd       	sbrc	r18, 7
 862:	27 c0       	rjmp	.+78     	; 0x8b2 <vfprintf+0x100>
 864:	30 ed       	ldi	r19, 0xD0	; 208
 866:	38 0f       	add	r19, r24
 868:	3a 30       	cpi	r19, 0x0A	; 10
 86a:	78 f4       	brcc	.+30     	; 0x88a <vfprintf+0xd8>
 86c:	26 ff       	sbrs	r18, 6
 86e:	06 c0       	rjmp	.+12     	; 0x87c <vfprintf+0xca>
 870:	fa e0       	ldi	r31, 0x0A	; 10
 872:	5f 9e       	mul	r5, r31
 874:	30 0d       	add	r19, r0
 876:	11 24       	eor	r1, r1
 878:	53 2e       	mov	r5, r19
 87a:	13 c0       	rjmp	.+38     	; 0x8a2 <vfprintf+0xf0>
 87c:	8a e0       	ldi	r24, 0x0A	; 10
 87e:	38 9e       	mul	r3, r24
 880:	30 0d       	add	r19, r0
 882:	11 24       	eor	r1, r1
 884:	33 2e       	mov	r3, r19
 886:	20 62       	ori	r18, 0x20	; 32
 888:	0c c0       	rjmp	.+24     	; 0x8a2 <vfprintf+0xf0>
 88a:	8e 32       	cpi	r24, 0x2E	; 46
 88c:	21 f4       	brne	.+8      	; 0x896 <vfprintf+0xe4>
 88e:	26 fd       	sbrc	r18, 6
 890:	5f c1       	rjmp	.+702    	; 0xb50 <vfprintf+0x39e>
 892:	20 64       	ori	r18, 0x40	; 64
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <vfprintf+0xf0>
 896:	8c 36       	cpi	r24, 0x6C	; 108
 898:	11 f4       	brne	.+4      	; 0x89e <vfprintf+0xec>
 89a:	20 68       	ori	r18, 0x80	; 128
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0xf0>
 89e:	88 36       	cpi	r24, 0x68	; 104
 8a0:	41 f4       	brne	.+16     	; 0x8b2 <vfprintf+0x100>
 8a2:	f6 01       	movw	r30, r12
 8a4:	93 fd       	sbrc	r25, 3
 8a6:	85 91       	lpm	r24, Z+
 8a8:	93 ff       	sbrs	r25, 3
 8aa:	81 91       	ld	r24, Z+
 8ac:	6f 01       	movw	r12, r30
 8ae:	81 11       	cpse	r24, r1
 8b0:	c1 cf       	rjmp	.-126    	; 0x834 <vfprintf+0x82>
 8b2:	98 2f       	mov	r25, r24
 8b4:	9f 7d       	andi	r25, 0xDF	; 223
 8b6:	95 54       	subi	r25, 0x45	; 69
 8b8:	93 30       	cpi	r25, 0x03	; 3
 8ba:	28 f4       	brcc	.+10     	; 0x8c6 <vfprintf+0x114>
 8bc:	0c 5f       	subi	r16, 0xFC	; 252
 8be:	1f 4f       	sbci	r17, 0xFF	; 255
 8c0:	ff e3       	ldi	r31, 0x3F	; 63
 8c2:	f9 83       	std	Y+1, r31	; 0x01
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <vfprintf+0x12e>
 8c6:	83 36       	cpi	r24, 0x63	; 99
 8c8:	31 f0       	breq	.+12     	; 0x8d6 <vfprintf+0x124>
 8ca:	83 37       	cpi	r24, 0x73	; 115
 8cc:	71 f0       	breq	.+28     	; 0x8ea <vfprintf+0x138>
 8ce:	83 35       	cpi	r24, 0x53	; 83
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <vfprintf+0x122>
 8d2:	57 c0       	rjmp	.+174    	; 0x982 <vfprintf+0x1d0>
 8d4:	21 c0       	rjmp	.+66     	; 0x918 <vfprintf+0x166>
 8d6:	f8 01       	movw	r30, r16
 8d8:	80 81       	ld	r24, Z
 8da:	89 83       	std	Y+1, r24	; 0x01
 8dc:	0e 5f       	subi	r16, 0xFE	; 254
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	44 24       	eor	r4, r4
 8e2:	43 94       	inc	r4
 8e4:	51 2c       	mov	r5, r1
 8e6:	54 01       	movw	r10, r8
 8e8:	14 c0       	rjmp	.+40     	; 0x912 <vfprintf+0x160>
 8ea:	38 01       	movw	r6, r16
 8ec:	f2 e0       	ldi	r31, 0x02	; 2
 8ee:	6f 0e       	add	r6, r31
 8f0:	71 1c       	adc	r7, r1
 8f2:	f8 01       	movw	r30, r16
 8f4:	a0 80       	ld	r10, Z
 8f6:	b1 80       	ldd	r11, Z+1	; 0x01
 8f8:	26 ff       	sbrs	r18, 6
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <vfprintf+0x150>
 8fc:	65 2d       	mov	r22, r5
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <vfprintf+0x154>
 902:	6f ef       	ldi	r22, 0xFF	; 255
 904:	7f ef       	ldi	r23, 0xFF	; 255
 906:	c5 01       	movw	r24, r10
 908:	2c 87       	std	Y+12, r18	; 0x0c
 90a:	94 d2       	rcall	.+1320   	; 0xe34 <strnlen>
 90c:	2c 01       	movw	r4, r24
 90e:	83 01       	movw	r16, r6
 910:	2c 85       	ldd	r18, Y+12	; 0x0c
 912:	2f 77       	andi	r18, 0x7F	; 127
 914:	22 2e       	mov	r2, r18
 916:	16 c0       	rjmp	.+44     	; 0x944 <vfprintf+0x192>
 918:	38 01       	movw	r6, r16
 91a:	f2 e0       	ldi	r31, 0x02	; 2
 91c:	6f 0e       	add	r6, r31
 91e:	71 1c       	adc	r7, r1
 920:	f8 01       	movw	r30, r16
 922:	a0 80       	ld	r10, Z
 924:	b1 80       	ldd	r11, Z+1	; 0x01
 926:	26 ff       	sbrs	r18, 6
 928:	03 c0       	rjmp	.+6      	; 0x930 <vfprintf+0x17e>
 92a:	65 2d       	mov	r22, r5
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	02 c0       	rjmp	.+4      	; 0x934 <vfprintf+0x182>
 930:	6f ef       	ldi	r22, 0xFF	; 255
 932:	7f ef       	ldi	r23, 0xFF	; 255
 934:	c5 01       	movw	r24, r10
 936:	2c 87       	std	Y+12, r18	; 0x0c
 938:	6b d2       	rcall	.+1238   	; 0xe10 <strnlen_P>
 93a:	2c 01       	movw	r4, r24
 93c:	2c 85       	ldd	r18, Y+12	; 0x0c
 93e:	20 68       	ori	r18, 0x80	; 128
 940:	22 2e       	mov	r2, r18
 942:	83 01       	movw	r16, r6
 944:	23 fc       	sbrc	r2, 3
 946:	19 c0       	rjmp	.+50     	; 0x97a <vfprintf+0x1c8>
 948:	83 2d       	mov	r24, r3
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	48 16       	cp	r4, r24
 94e:	59 06       	cpc	r5, r25
 950:	a0 f4       	brcc	.+40     	; 0x97a <vfprintf+0x1c8>
 952:	b7 01       	movw	r22, r14
 954:	80 e2       	ldi	r24, 0x20	; 32
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	78 d2       	rcall	.+1264   	; 0xe4a <fputc>
 95a:	3a 94       	dec	r3
 95c:	f5 cf       	rjmp	.-22     	; 0x948 <vfprintf+0x196>
 95e:	f5 01       	movw	r30, r10
 960:	27 fc       	sbrc	r2, 7
 962:	85 91       	lpm	r24, Z+
 964:	27 fe       	sbrs	r2, 7
 966:	81 91       	ld	r24, Z+
 968:	5f 01       	movw	r10, r30
 96a:	b7 01       	movw	r22, r14
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	6d d2       	rcall	.+1242   	; 0xe4a <fputc>
 970:	31 10       	cpse	r3, r1
 972:	3a 94       	dec	r3
 974:	f1 e0       	ldi	r31, 0x01	; 1
 976:	4f 1a       	sub	r4, r31
 978:	51 08       	sbc	r5, r1
 97a:	41 14       	cp	r4, r1
 97c:	51 04       	cpc	r5, r1
 97e:	79 f7       	brne	.-34     	; 0x95e <vfprintf+0x1ac>
 980:	de c0       	rjmp	.+444    	; 0xb3e <vfprintf+0x38c>
 982:	84 36       	cpi	r24, 0x64	; 100
 984:	11 f0       	breq	.+4      	; 0x98a <vfprintf+0x1d8>
 986:	89 36       	cpi	r24, 0x69	; 105
 988:	31 f5       	brne	.+76     	; 0x9d6 <vfprintf+0x224>
 98a:	f8 01       	movw	r30, r16
 98c:	27 ff       	sbrs	r18, 7
 98e:	07 c0       	rjmp	.+14     	; 0x99e <vfprintf+0x1ec>
 990:	60 81       	ld	r22, Z
 992:	71 81       	ldd	r23, Z+1	; 0x01
 994:	82 81       	ldd	r24, Z+2	; 0x02
 996:	93 81       	ldd	r25, Z+3	; 0x03
 998:	0c 5f       	subi	r16, 0xFC	; 252
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	08 c0       	rjmp	.+16     	; 0x9ae <vfprintf+0x1fc>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	88 27       	eor	r24, r24
 9a4:	77 fd       	sbrc	r23, 7
 9a6:	80 95       	com	r24
 9a8:	98 2f       	mov	r25, r24
 9aa:	0e 5f       	subi	r16, 0xFE	; 254
 9ac:	1f 4f       	sbci	r17, 0xFF	; 255
 9ae:	2f 76       	andi	r18, 0x6F	; 111
 9b0:	b2 2e       	mov	r11, r18
 9b2:	97 ff       	sbrs	r25, 7
 9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <vfprintf+0x216>
 9b6:	90 95       	com	r25
 9b8:	80 95       	com	r24
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	20 68       	ori	r18, 0x80	; 128
 9c6:	b2 2e       	mov	r11, r18
 9c8:	2a e0       	ldi	r18, 0x0A	; 10
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	a4 01       	movw	r20, r8
 9ce:	6f d2       	rcall	.+1246   	; 0xeae <__ultoa_invert>
 9d0:	a8 2e       	mov	r10, r24
 9d2:	a8 18       	sub	r10, r8
 9d4:	43 c0       	rjmp	.+134    	; 0xa5c <vfprintf+0x2aa>
 9d6:	85 37       	cpi	r24, 0x75	; 117
 9d8:	29 f4       	brne	.+10     	; 0x9e4 <vfprintf+0x232>
 9da:	2f 7e       	andi	r18, 0xEF	; 239
 9dc:	b2 2e       	mov	r11, r18
 9de:	2a e0       	ldi	r18, 0x0A	; 10
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	25 c0       	rjmp	.+74     	; 0xa2e <vfprintf+0x27c>
 9e4:	f2 2f       	mov	r31, r18
 9e6:	f9 7f       	andi	r31, 0xF9	; 249
 9e8:	bf 2e       	mov	r11, r31
 9ea:	8f 36       	cpi	r24, 0x6F	; 111
 9ec:	c1 f0       	breq	.+48     	; 0xa1e <vfprintf+0x26c>
 9ee:	18 f4       	brcc	.+6      	; 0x9f6 <vfprintf+0x244>
 9f0:	88 35       	cpi	r24, 0x58	; 88
 9f2:	79 f0       	breq	.+30     	; 0xa12 <vfprintf+0x260>
 9f4:	ad c0       	rjmp	.+346    	; 0xb50 <vfprintf+0x39e>
 9f6:	80 37       	cpi	r24, 0x70	; 112
 9f8:	19 f0       	breq	.+6      	; 0xa00 <vfprintf+0x24e>
 9fa:	88 37       	cpi	r24, 0x78	; 120
 9fc:	21 f0       	breq	.+8      	; 0xa06 <vfprintf+0x254>
 9fe:	a8 c0       	rjmp	.+336    	; 0xb50 <vfprintf+0x39e>
 a00:	2f 2f       	mov	r18, r31
 a02:	20 61       	ori	r18, 0x10	; 16
 a04:	b2 2e       	mov	r11, r18
 a06:	b4 fe       	sbrs	r11, 4
 a08:	0d c0       	rjmp	.+26     	; 0xa24 <vfprintf+0x272>
 a0a:	8b 2d       	mov	r24, r11
 a0c:	84 60       	ori	r24, 0x04	; 4
 a0e:	b8 2e       	mov	r11, r24
 a10:	09 c0       	rjmp	.+18     	; 0xa24 <vfprintf+0x272>
 a12:	24 ff       	sbrs	r18, 4
 a14:	0a c0       	rjmp	.+20     	; 0xa2a <vfprintf+0x278>
 a16:	9f 2f       	mov	r25, r31
 a18:	96 60       	ori	r25, 0x06	; 6
 a1a:	b9 2e       	mov	r11, r25
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <vfprintf+0x278>
 a1e:	28 e0       	ldi	r18, 0x08	; 8
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	05 c0       	rjmp	.+10     	; 0xa2e <vfprintf+0x27c>
 a24:	20 e1       	ldi	r18, 0x10	; 16
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <vfprintf+0x27c>
 a2a:	20 e1       	ldi	r18, 0x10	; 16
 a2c:	32 e0       	ldi	r19, 0x02	; 2
 a2e:	f8 01       	movw	r30, r16
 a30:	b7 fe       	sbrs	r11, 7
 a32:	07 c0       	rjmp	.+14     	; 0xa42 <vfprintf+0x290>
 a34:	60 81       	ld	r22, Z
 a36:	71 81       	ldd	r23, Z+1	; 0x01
 a38:	82 81       	ldd	r24, Z+2	; 0x02
 a3a:	93 81       	ldd	r25, Z+3	; 0x03
 a3c:	0c 5f       	subi	r16, 0xFC	; 252
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <vfprintf+0x29c>
 a42:	60 81       	ld	r22, Z
 a44:	71 81       	ldd	r23, Z+1	; 0x01
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 5f       	subi	r16, 0xFE	; 254
 a4c:	1f 4f       	sbci	r17, 0xFF	; 255
 a4e:	a4 01       	movw	r20, r8
 a50:	2e d2       	rcall	.+1116   	; 0xeae <__ultoa_invert>
 a52:	a8 2e       	mov	r10, r24
 a54:	a8 18       	sub	r10, r8
 a56:	fb 2d       	mov	r31, r11
 a58:	ff 77       	andi	r31, 0x7F	; 127
 a5a:	bf 2e       	mov	r11, r31
 a5c:	b6 fe       	sbrs	r11, 6
 a5e:	0b c0       	rjmp	.+22     	; 0xa76 <vfprintf+0x2c4>
 a60:	2b 2d       	mov	r18, r11
 a62:	2e 7f       	andi	r18, 0xFE	; 254
 a64:	a5 14       	cp	r10, r5
 a66:	50 f4       	brcc	.+20     	; 0xa7c <vfprintf+0x2ca>
 a68:	b4 fe       	sbrs	r11, 4
 a6a:	0a c0       	rjmp	.+20     	; 0xa80 <vfprintf+0x2ce>
 a6c:	b2 fc       	sbrc	r11, 2
 a6e:	08 c0       	rjmp	.+16     	; 0xa80 <vfprintf+0x2ce>
 a70:	2b 2d       	mov	r18, r11
 a72:	2e 7e       	andi	r18, 0xEE	; 238
 a74:	05 c0       	rjmp	.+10     	; 0xa80 <vfprintf+0x2ce>
 a76:	7a 2c       	mov	r7, r10
 a78:	2b 2d       	mov	r18, r11
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <vfprintf+0x2d0>
 a7c:	7a 2c       	mov	r7, r10
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <vfprintf+0x2d0>
 a80:	75 2c       	mov	r7, r5
 a82:	24 ff       	sbrs	r18, 4
 a84:	0d c0       	rjmp	.+26     	; 0xaa0 <vfprintf+0x2ee>
 a86:	fe 01       	movw	r30, r28
 a88:	ea 0d       	add	r30, r10
 a8a:	f1 1d       	adc	r31, r1
 a8c:	80 81       	ld	r24, Z
 a8e:	80 33       	cpi	r24, 0x30	; 48
 a90:	11 f4       	brne	.+4      	; 0xa96 <vfprintf+0x2e4>
 a92:	29 7e       	andi	r18, 0xE9	; 233
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <vfprintf+0x2f6>
 a96:	22 ff       	sbrs	r18, 2
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <vfprintf+0x2f4>
 a9a:	73 94       	inc	r7
 a9c:	73 94       	inc	r7
 a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <vfprintf+0x2f6>
 aa0:	82 2f       	mov	r24, r18
 aa2:	86 78       	andi	r24, 0x86	; 134
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <vfprintf+0x2f6>
 aa6:	73 94       	inc	r7
 aa8:	23 fd       	sbrc	r18, 3
 aaa:	12 c0       	rjmp	.+36     	; 0xad0 <vfprintf+0x31e>
 aac:	20 ff       	sbrs	r18, 0
 aae:	06 c0       	rjmp	.+12     	; 0xabc <vfprintf+0x30a>
 ab0:	5a 2c       	mov	r5, r10
 ab2:	73 14       	cp	r7, r3
 ab4:	18 f4       	brcc	.+6      	; 0xabc <vfprintf+0x30a>
 ab6:	53 0c       	add	r5, r3
 ab8:	57 18       	sub	r5, r7
 aba:	73 2c       	mov	r7, r3
 abc:	73 14       	cp	r7, r3
 abe:	60 f4       	brcc	.+24     	; 0xad8 <vfprintf+0x326>
 ac0:	b7 01       	movw	r22, r14
 ac2:	80 e2       	ldi	r24, 0x20	; 32
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	2c 87       	std	Y+12, r18	; 0x0c
 ac8:	c0 d1       	rcall	.+896    	; 0xe4a <fputc>
 aca:	73 94       	inc	r7
 acc:	2c 85       	ldd	r18, Y+12	; 0x0c
 ace:	f6 cf       	rjmp	.-20     	; 0xabc <vfprintf+0x30a>
 ad0:	73 14       	cp	r7, r3
 ad2:	10 f4       	brcc	.+4      	; 0xad8 <vfprintf+0x326>
 ad4:	37 18       	sub	r3, r7
 ad6:	01 c0       	rjmp	.+2      	; 0xada <vfprintf+0x328>
 ad8:	31 2c       	mov	r3, r1
 ada:	24 ff       	sbrs	r18, 4
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <vfprintf+0x34e>
 ade:	b7 01       	movw	r22, r14
 ae0:	80 e3       	ldi	r24, 0x30	; 48
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	2c 87       	std	Y+12, r18	; 0x0c
 ae6:	b1 d1       	rcall	.+866    	; 0xe4a <fputc>
 ae8:	2c 85       	ldd	r18, Y+12	; 0x0c
 aea:	22 ff       	sbrs	r18, 2
 aec:	16 c0       	rjmp	.+44     	; 0xb1a <vfprintf+0x368>
 aee:	21 ff       	sbrs	r18, 1
 af0:	03 c0       	rjmp	.+6      	; 0xaf8 <vfprintf+0x346>
 af2:	88 e5       	ldi	r24, 0x58	; 88
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <vfprintf+0x34a>
 af8:	88 e7       	ldi	r24, 0x78	; 120
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	b7 01       	movw	r22, r14
 afe:	0c c0       	rjmp	.+24     	; 0xb18 <vfprintf+0x366>
 b00:	82 2f       	mov	r24, r18
 b02:	86 78       	andi	r24, 0x86	; 134
 b04:	51 f0       	breq	.+20     	; 0xb1a <vfprintf+0x368>
 b06:	21 fd       	sbrc	r18, 1
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <vfprintf+0x35c>
 b0a:	80 e2       	ldi	r24, 0x20	; 32
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <vfprintf+0x35e>
 b0e:	8b e2       	ldi	r24, 0x2B	; 43
 b10:	27 fd       	sbrc	r18, 7
 b12:	8d e2       	ldi	r24, 0x2D	; 45
 b14:	b7 01       	movw	r22, r14
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	98 d1       	rcall	.+816    	; 0xe4a <fputc>
 b1a:	a5 14       	cp	r10, r5
 b1c:	30 f4       	brcc	.+12     	; 0xb2a <vfprintf+0x378>
 b1e:	b7 01       	movw	r22, r14
 b20:	80 e3       	ldi	r24, 0x30	; 48
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	92 d1       	rcall	.+804    	; 0xe4a <fputc>
 b26:	5a 94       	dec	r5
 b28:	f8 cf       	rjmp	.-16     	; 0xb1a <vfprintf+0x368>
 b2a:	aa 94       	dec	r10
 b2c:	f4 01       	movw	r30, r8
 b2e:	ea 0d       	add	r30, r10
 b30:	f1 1d       	adc	r31, r1
 b32:	80 81       	ld	r24, Z
 b34:	b7 01       	movw	r22, r14
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	88 d1       	rcall	.+784    	; 0xe4a <fputc>
 b3a:	a1 10       	cpse	r10, r1
 b3c:	f6 cf       	rjmp	.-20     	; 0xb2a <vfprintf+0x378>
 b3e:	33 20       	and	r3, r3
 b40:	09 f4       	brne	.+2      	; 0xb44 <vfprintf+0x392>
 b42:	5d ce       	rjmp	.-838    	; 0x7fe <vfprintf+0x4c>
 b44:	b7 01       	movw	r22, r14
 b46:	80 e2       	ldi	r24, 0x20	; 32
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	7f d1       	rcall	.+766    	; 0xe4a <fputc>
 b4c:	3a 94       	dec	r3
 b4e:	f7 cf       	rjmp	.-18     	; 0xb3e <vfprintf+0x38c>
 b50:	f7 01       	movw	r30, r14
 b52:	86 81       	ldd	r24, Z+6	; 0x06
 b54:	97 81       	ldd	r25, Z+7	; 0x07
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <vfprintf+0x3aa>
 b58:	8f ef       	ldi	r24, 0xFF	; 255
 b5a:	9f ef       	ldi	r25, 0xFF	; 255
 b5c:	2c 96       	adiw	r28, 0x0c	; 12
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	de bf       	out	0x3e, r29	; 62
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	cd bf       	out	0x3d, r28	; 61
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	ff 90       	pop	r15
 b72:	ef 90       	pop	r14
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	bf 90       	pop	r11
 b7a:	af 90       	pop	r10
 b7c:	9f 90       	pop	r9
 b7e:	8f 90       	pop	r8
 b80:	7f 90       	pop	r7
 b82:	6f 90       	pop	r6
 b84:	5f 90       	pop	r5
 b86:	4f 90       	pop	r4
 b88:	3f 90       	pop	r3
 b8a:	2f 90       	pop	r2
 b8c:	08 95       	ret

00000b8e <calloc>:
 b8e:	0f 93       	push	r16
 b90:	1f 93       	push	r17
 b92:	cf 93       	push	r28
 b94:	df 93       	push	r29
 b96:	86 9f       	mul	r24, r22
 b98:	80 01       	movw	r16, r0
 b9a:	87 9f       	mul	r24, r23
 b9c:	10 0d       	add	r17, r0
 b9e:	96 9f       	mul	r25, r22
 ba0:	10 0d       	add	r17, r0
 ba2:	11 24       	eor	r1, r1
 ba4:	c8 01       	movw	r24, r16
 ba6:	0d d0       	rcall	.+26     	; 0xbc2 <malloc>
 ba8:	ec 01       	movw	r28, r24
 baa:	00 97       	sbiw	r24, 0x00	; 0
 bac:	21 f0       	breq	.+8      	; 0xbb6 <calloc+0x28>
 bae:	a8 01       	movw	r20, r16
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	38 d1       	rcall	.+624    	; 0xe26 <memset>
 bb6:	ce 01       	movw	r24, r28
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	1f 91       	pop	r17
 bbe:	0f 91       	pop	r16
 bc0:	08 95       	ret

00000bc2 <malloc>:
 bc2:	cf 93       	push	r28
 bc4:	df 93       	push	r29
 bc6:	82 30       	cpi	r24, 0x02	; 2
 bc8:	91 05       	cpc	r25, r1
 bca:	10 f4       	brcc	.+4      	; 0xbd0 <malloc+0xe>
 bcc:	82 e0       	ldi	r24, 0x02	; 2
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	e0 91 c0 02 	lds	r30, 0x02C0
 bd4:	f0 91 c1 02 	lds	r31, 0x02C1
 bd8:	20 e0       	ldi	r18, 0x00	; 0
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	a0 e0       	ldi	r26, 0x00	; 0
 bde:	b0 e0       	ldi	r27, 0x00	; 0
 be0:	30 97       	sbiw	r30, 0x00	; 0
 be2:	39 f1       	breq	.+78     	; 0xc32 <malloc+0x70>
 be4:	40 81       	ld	r20, Z
 be6:	51 81       	ldd	r21, Z+1	; 0x01
 be8:	48 17       	cp	r20, r24
 bea:	59 07       	cpc	r21, r25
 bec:	b8 f0       	brcs	.+46     	; 0xc1c <malloc+0x5a>
 bee:	48 17       	cp	r20, r24
 bf0:	59 07       	cpc	r21, r25
 bf2:	71 f4       	brne	.+28     	; 0xc10 <malloc+0x4e>
 bf4:	82 81       	ldd	r24, Z+2	; 0x02
 bf6:	93 81       	ldd	r25, Z+3	; 0x03
 bf8:	10 97       	sbiw	r26, 0x00	; 0
 bfa:	29 f0       	breq	.+10     	; 0xc06 <malloc+0x44>
 bfc:	13 96       	adiw	r26, 0x03	; 3
 bfe:	9c 93       	st	X, r25
 c00:	8e 93       	st	-X, r24
 c02:	12 97       	sbiw	r26, 0x02	; 2
 c04:	2c c0       	rjmp	.+88     	; 0xc5e <malloc+0x9c>
 c06:	90 93 c1 02 	sts	0x02C1, r25
 c0a:	80 93 c0 02 	sts	0x02C0, r24
 c0e:	27 c0       	rjmp	.+78     	; 0xc5e <malloc+0x9c>
 c10:	21 15       	cp	r18, r1
 c12:	31 05       	cpc	r19, r1
 c14:	31 f0       	breq	.+12     	; 0xc22 <malloc+0x60>
 c16:	42 17       	cp	r20, r18
 c18:	53 07       	cpc	r21, r19
 c1a:	18 f0       	brcs	.+6      	; 0xc22 <malloc+0x60>
 c1c:	a9 01       	movw	r20, r18
 c1e:	db 01       	movw	r26, r22
 c20:	01 c0       	rjmp	.+2      	; 0xc24 <malloc+0x62>
 c22:	ef 01       	movw	r28, r30
 c24:	9a 01       	movw	r18, r20
 c26:	bd 01       	movw	r22, r26
 c28:	df 01       	movw	r26, r30
 c2a:	02 80       	ldd	r0, Z+2	; 0x02
 c2c:	f3 81       	ldd	r31, Z+3	; 0x03
 c2e:	e0 2d       	mov	r30, r0
 c30:	d7 cf       	rjmp	.-82     	; 0xbe0 <malloc+0x1e>
 c32:	21 15       	cp	r18, r1
 c34:	31 05       	cpc	r19, r1
 c36:	f9 f0       	breq	.+62     	; 0xc76 <malloc+0xb4>
 c38:	28 1b       	sub	r18, r24
 c3a:	39 0b       	sbc	r19, r25
 c3c:	24 30       	cpi	r18, 0x04	; 4
 c3e:	31 05       	cpc	r19, r1
 c40:	80 f4       	brcc	.+32     	; 0xc62 <malloc+0xa0>
 c42:	8a 81       	ldd	r24, Y+2	; 0x02
 c44:	9b 81       	ldd	r25, Y+3	; 0x03
 c46:	61 15       	cp	r22, r1
 c48:	71 05       	cpc	r23, r1
 c4a:	21 f0       	breq	.+8      	; 0xc54 <malloc+0x92>
 c4c:	fb 01       	movw	r30, r22
 c4e:	93 83       	std	Z+3, r25	; 0x03
 c50:	82 83       	std	Z+2, r24	; 0x02
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <malloc+0x9a>
 c54:	90 93 c1 02 	sts	0x02C1, r25
 c58:	80 93 c0 02 	sts	0x02C0, r24
 c5c:	fe 01       	movw	r30, r28
 c5e:	32 96       	adiw	r30, 0x02	; 2
 c60:	44 c0       	rjmp	.+136    	; 0xcea <malloc+0x128>
 c62:	fe 01       	movw	r30, r28
 c64:	e2 0f       	add	r30, r18
 c66:	f3 1f       	adc	r31, r19
 c68:	81 93       	st	Z+, r24
 c6a:	91 93       	st	Z+, r25
 c6c:	22 50       	subi	r18, 0x02	; 2
 c6e:	31 09       	sbc	r19, r1
 c70:	39 83       	std	Y+1, r19	; 0x01
 c72:	28 83       	st	Y, r18
 c74:	3a c0       	rjmp	.+116    	; 0xcea <malloc+0x128>
 c76:	20 91 be 02 	lds	r18, 0x02BE
 c7a:	30 91 bf 02 	lds	r19, 0x02BF
 c7e:	23 2b       	or	r18, r19
 c80:	41 f4       	brne	.+16     	; 0xc92 <malloc+0xd0>
 c82:	20 91 02 02 	lds	r18, 0x0202
 c86:	30 91 03 02 	lds	r19, 0x0203
 c8a:	30 93 bf 02 	sts	0x02BF, r19
 c8e:	20 93 be 02 	sts	0x02BE, r18
 c92:	20 91 00 02 	lds	r18, 0x0200
 c96:	30 91 01 02 	lds	r19, 0x0201
 c9a:	21 15       	cp	r18, r1
 c9c:	31 05       	cpc	r19, r1
 c9e:	41 f4       	brne	.+16     	; 0xcb0 <malloc+0xee>
 ca0:	2d b7       	in	r18, 0x3d	; 61
 ca2:	3e b7       	in	r19, 0x3e	; 62
 ca4:	40 91 04 02 	lds	r20, 0x0204
 ca8:	50 91 05 02 	lds	r21, 0x0205
 cac:	24 1b       	sub	r18, r20
 cae:	35 0b       	sbc	r19, r21
 cb0:	e0 91 be 02 	lds	r30, 0x02BE
 cb4:	f0 91 bf 02 	lds	r31, 0x02BF
 cb8:	e2 17       	cp	r30, r18
 cba:	f3 07       	cpc	r31, r19
 cbc:	a0 f4       	brcc	.+40     	; 0xce6 <malloc+0x124>
 cbe:	2e 1b       	sub	r18, r30
 cc0:	3f 0b       	sbc	r19, r31
 cc2:	28 17       	cp	r18, r24
 cc4:	39 07       	cpc	r19, r25
 cc6:	78 f0       	brcs	.+30     	; 0xce6 <malloc+0x124>
 cc8:	ac 01       	movw	r20, r24
 cca:	4e 5f       	subi	r20, 0xFE	; 254
 ccc:	5f 4f       	sbci	r21, 0xFF	; 255
 cce:	24 17       	cp	r18, r20
 cd0:	35 07       	cpc	r19, r21
 cd2:	48 f0       	brcs	.+18     	; 0xce6 <malloc+0x124>
 cd4:	4e 0f       	add	r20, r30
 cd6:	5f 1f       	adc	r21, r31
 cd8:	50 93 bf 02 	sts	0x02BF, r21
 cdc:	40 93 be 02 	sts	0x02BE, r20
 ce0:	81 93       	st	Z+, r24
 ce2:	91 93       	st	Z+, r25
 ce4:	02 c0       	rjmp	.+4      	; 0xcea <malloc+0x128>
 ce6:	e0 e0       	ldi	r30, 0x00	; 0
 ce8:	f0 e0       	ldi	r31, 0x00	; 0
 cea:	cf 01       	movw	r24, r30
 cec:	df 91       	pop	r29
 cee:	cf 91       	pop	r28
 cf0:	08 95       	ret

00000cf2 <free>:
 cf2:	cf 93       	push	r28
 cf4:	df 93       	push	r29
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	09 f4       	brne	.+2      	; 0xcfc <free+0xa>
 cfa:	87 c0       	rjmp	.+270    	; 0xe0a <free+0x118>
 cfc:	fc 01       	movw	r30, r24
 cfe:	32 97       	sbiw	r30, 0x02	; 2
 d00:	13 82       	std	Z+3, r1	; 0x03
 d02:	12 82       	std	Z+2, r1	; 0x02
 d04:	c0 91 c0 02 	lds	r28, 0x02C0
 d08:	d0 91 c1 02 	lds	r29, 0x02C1
 d0c:	20 97       	sbiw	r28, 0x00	; 0
 d0e:	81 f4       	brne	.+32     	; 0xd30 <free+0x3e>
 d10:	20 81       	ld	r18, Z
 d12:	31 81       	ldd	r19, Z+1	; 0x01
 d14:	28 0f       	add	r18, r24
 d16:	39 1f       	adc	r19, r25
 d18:	80 91 be 02 	lds	r24, 0x02BE
 d1c:	90 91 bf 02 	lds	r25, 0x02BF
 d20:	82 17       	cp	r24, r18
 d22:	93 07       	cpc	r25, r19
 d24:	79 f5       	brne	.+94     	; 0xd84 <free+0x92>
 d26:	f0 93 bf 02 	sts	0x02BF, r31
 d2a:	e0 93 be 02 	sts	0x02BE, r30
 d2e:	6d c0       	rjmp	.+218    	; 0xe0a <free+0x118>
 d30:	de 01       	movw	r26, r28
 d32:	20 e0       	ldi	r18, 0x00	; 0
 d34:	30 e0       	ldi	r19, 0x00	; 0
 d36:	ae 17       	cp	r26, r30
 d38:	bf 07       	cpc	r27, r31
 d3a:	50 f4       	brcc	.+20     	; 0xd50 <free+0x5e>
 d3c:	12 96       	adiw	r26, 0x02	; 2
 d3e:	4d 91       	ld	r20, X+
 d40:	5c 91       	ld	r21, X
 d42:	13 97       	sbiw	r26, 0x03	; 3
 d44:	9d 01       	movw	r18, r26
 d46:	41 15       	cp	r20, r1
 d48:	51 05       	cpc	r21, r1
 d4a:	09 f1       	breq	.+66     	; 0xd8e <free+0x9c>
 d4c:	da 01       	movw	r26, r20
 d4e:	f3 cf       	rjmp	.-26     	; 0xd36 <free+0x44>
 d50:	b3 83       	std	Z+3, r27	; 0x03
 d52:	a2 83       	std	Z+2, r26	; 0x02
 d54:	40 81       	ld	r20, Z
 d56:	51 81       	ldd	r21, Z+1	; 0x01
 d58:	84 0f       	add	r24, r20
 d5a:	95 1f       	adc	r25, r21
 d5c:	8a 17       	cp	r24, r26
 d5e:	9b 07       	cpc	r25, r27
 d60:	71 f4       	brne	.+28     	; 0xd7e <free+0x8c>
 d62:	8d 91       	ld	r24, X+
 d64:	9c 91       	ld	r25, X
 d66:	11 97       	sbiw	r26, 0x01	; 1
 d68:	84 0f       	add	r24, r20
 d6a:	95 1f       	adc	r25, r21
 d6c:	02 96       	adiw	r24, 0x02	; 2
 d6e:	91 83       	std	Z+1, r25	; 0x01
 d70:	80 83       	st	Z, r24
 d72:	12 96       	adiw	r26, 0x02	; 2
 d74:	8d 91       	ld	r24, X+
 d76:	9c 91       	ld	r25, X
 d78:	13 97       	sbiw	r26, 0x03	; 3
 d7a:	93 83       	std	Z+3, r25	; 0x03
 d7c:	82 83       	std	Z+2, r24	; 0x02
 d7e:	21 15       	cp	r18, r1
 d80:	31 05       	cpc	r19, r1
 d82:	29 f4       	brne	.+10     	; 0xd8e <free+0x9c>
 d84:	f0 93 c1 02 	sts	0x02C1, r31
 d88:	e0 93 c0 02 	sts	0x02C0, r30
 d8c:	3e c0       	rjmp	.+124    	; 0xe0a <free+0x118>
 d8e:	d9 01       	movw	r26, r18
 d90:	13 96       	adiw	r26, 0x03	; 3
 d92:	fc 93       	st	X, r31
 d94:	ee 93       	st	-X, r30
 d96:	12 97       	sbiw	r26, 0x02	; 2
 d98:	4d 91       	ld	r20, X+
 d9a:	5d 91       	ld	r21, X+
 d9c:	a4 0f       	add	r26, r20
 d9e:	b5 1f       	adc	r27, r21
 da0:	ea 17       	cp	r30, r26
 da2:	fb 07       	cpc	r31, r27
 da4:	79 f4       	brne	.+30     	; 0xdc4 <free+0xd2>
 da6:	80 81       	ld	r24, Z
 da8:	91 81       	ldd	r25, Z+1	; 0x01
 daa:	84 0f       	add	r24, r20
 dac:	95 1f       	adc	r25, r21
 dae:	02 96       	adiw	r24, 0x02	; 2
 db0:	d9 01       	movw	r26, r18
 db2:	11 96       	adiw	r26, 0x01	; 1
 db4:	9c 93       	st	X, r25
 db6:	8e 93       	st	-X, r24
 db8:	82 81       	ldd	r24, Z+2	; 0x02
 dba:	93 81       	ldd	r25, Z+3	; 0x03
 dbc:	13 96       	adiw	r26, 0x03	; 3
 dbe:	9c 93       	st	X, r25
 dc0:	8e 93       	st	-X, r24
 dc2:	12 97       	sbiw	r26, 0x02	; 2
 dc4:	e0 e0       	ldi	r30, 0x00	; 0
 dc6:	f0 e0       	ldi	r31, 0x00	; 0
 dc8:	8a 81       	ldd	r24, Y+2	; 0x02
 dca:	9b 81       	ldd	r25, Y+3	; 0x03
 dcc:	00 97       	sbiw	r24, 0x00	; 0
 dce:	19 f0       	breq	.+6      	; 0xdd6 <free+0xe4>
 dd0:	fe 01       	movw	r30, r28
 dd2:	ec 01       	movw	r28, r24
 dd4:	f9 cf       	rjmp	.-14     	; 0xdc8 <free+0xd6>
 dd6:	ce 01       	movw	r24, r28
 dd8:	02 96       	adiw	r24, 0x02	; 2
 dda:	28 81       	ld	r18, Y
 ddc:	39 81       	ldd	r19, Y+1	; 0x01
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	20 91 be 02 	lds	r18, 0x02BE
 de6:	30 91 bf 02 	lds	r19, 0x02BF
 dea:	28 17       	cp	r18, r24
 dec:	39 07       	cpc	r19, r25
 dee:	69 f4       	brne	.+26     	; 0xe0a <free+0x118>
 df0:	30 97       	sbiw	r30, 0x00	; 0
 df2:	29 f4       	brne	.+10     	; 0xdfe <free+0x10c>
 df4:	10 92 c1 02 	sts	0x02C1, r1
 df8:	10 92 c0 02 	sts	0x02C0, r1
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <free+0x110>
 dfe:	13 82       	std	Z+3, r1	; 0x03
 e00:	12 82       	std	Z+2, r1	; 0x02
 e02:	d0 93 bf 02 	sts	0x02BF, r29
 e06:	c0 93 be 02 	sts	0x02BE, r28
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	08 95       	ret

00000e10 <strnlen_P>:
 e10:	fc 01       	movw	r30, r24
 e12:	05 90       	lpm	r0, Z+
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen_P+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <memset>:
 e26:	dc 01       	movw	r26, r24
 e28:	01 c0       	rjmp	.+2      	; 0xe2c <memset+0x6>
 e2a:	6d 93       	st	X+, r22
 e2c:	41 50       	subi	r20, 0x01	; 1
 e2e:	50 40       	sbci	r21, 0x00	; 0
 e30:	e0 f7       	brcc	.-8      	; 0xe2a <memset+0x4>
 e32:	08 95       	ret

00000e34 <strnlen>:
 e34:	fc 01       	movw	r30, r24
 e36:	61 50       	subi	r22, 0x01	; 1
 e38:	70 40       	sbci	r23, 0x00	; 0
 e3a:	01 90       	ld	r0, Z+
 e3c:	01 10       	cpse	r0, r1
 e3e:	d8 f7       	brcc	.-10     	; 0xe36 <strnlen+0x2>
 e40:	80 95       	com	r24
 e42:	90 95       	com	r25
 e44:	8e 0f       	add	r24, r30
 e46:	9f 1f       	adc	r25, r31
 e48:	08 95       	ret

00000e4a <fputc>:
 e4a:	0f 93       	push	r16
 e4c:	1f 93       	push	r17
 e4e:	cf 93       	push	r28
 e50:	df 93       	push	r29
 e52:	18 2f       	mov	r17, r24
 e54:	09 2f       	mov	r16, r25
 e56:	eb 01       	movw	r28, r22
 e58:	8b 81       	ldd	r24, Y+3	; 0x03
 e5a:	81 fd       	sbrc	r24, 1
 e5c:	03 c0       	rjmp	.+6      	; 0xe64 <fputc+0x1a>
 e5e:	8f ef       	ldi	r24, 0xFF	; 255
 e60:	9f ef       	ldi	r25, 0xFF	; 255
 e62:	20 c0       	rjmp	.+64     	; 0xea4 <fputc+0x5a>
 e64:	82 ff       	sbrs	r24, 2
 e66:	10 c0       	rjmp	.+32     	; 0xe88 <fputc+0x3e>
 e68:	4e 81       	ldd	r20, Y+6	; 0x06
 e6a:	5f 81       	ldd	r21, Y+7	; 0x07
 e6c:	2c 81       	ldd	r18, Y+4	; 0x04
 e6e:	3d 81       	ldd	r19, Y+5	; 0x05
 e70:	42 17       	cp	r20, r18
 e72:	53 07       	cpc	r21, r19
 e74:	7c f4       	brge	.+30     	; 0xe94 <fputc+0x4a>
 e76:	e8 81       	ld	r30, Y
 e78:	f9 81       	ldd	r31, Y+1	; 0x01
 e7a:	9f 01       	movw	r18, r30
 e7c:	2f 5f       	subi	r18, 0xFF	; 255
 e7e:	3f 4f       	sbci	r19, 0xFF	; 255
 e80:	39 83       	std	Y+1, r19	; 0x01
 e82:	28 83       	st	Y, r18
 e84:	10 83       	st	Z, r17
 e86:	06 c0       	rjmp	.+12     	; 0xe94 <fputc+0x4a>
 e88:	e8 85       	ldd	r30, Y+8	; 0x08
 e8a:	f9 85       	ldd	r31, Y+9	; 0x09
 e8c:	81 2f       	mov	r24, r17
 e8e:	19 95       	eicall
 e90:	89 2b       	or	r24, r25
 e92:	29 f7       	brne	.-54     	; 0xe5e <fputc+0x14>
 e94:	2e 81       	ldd	r18, Y+6	; 0x06
 e96:	3f 81       	ldd	r19, Y+7	; 0x07
 e98:	2f 5f       	subi	r18, 0xFF	; 255
 e9a:	3f 4f       	sbci	r19, 0xFF	; 255
 e9c:	3f 83       	std	Y+7, r19	; 0x07
 e9e:	2e 83       	std	Y+6, r18	; 0x06
 ea0:	81 2f       	mov	r24, r17
 ea2:	90 2f       	mov	r25, r16
 ea4:	df 91       	pop	r29
 ea6:	cf 91       	pop	r28
 ea8:	1f 91       	pop	r17
 eaa:	0f 91       	pop	r16
 eac:	08 95       	ret

00000eae <__ultoa_invert>:
 eae:	fa 01       	movw	r30, r20
 eb0:	aa 27       	eor	r26, r26
 eb2:	28 30       	cpi	r18, 0x08	; 8
 eb4:	51 f1       	breq	.+84     	; 0xf0a <__ultoa_invert+0x5c>
 eb6:	20 31       	cpi	r18, 0x10	; 16
 eb8:	81 f1       	breq	.+96     	; 0xf1a <__ultoa_invert+0x6c>
 eba:	e8 94       	clt
 ebc:	6f 93       	push	r22
 ebe:	6e 7f       	andi	r22, 0xFE	; 254
 ec0:	6e 5f       	subi	r22, 0xFE	; 254
 ec2:	7f 4f       	sbci	r23, 0xFF	; 255
 ec4:	8f 4f       	sbci	r24, 0xFF	; 255
 ec6:	9f 4f       	sbci	r25, 0xFF	; 255
 ec8:	af 4f       	sbci	r26, 0xFF	; 255
 eca:	b1 e0       	ldi	r27, 0x01	; 1
 ecc:	3e d0       	rcall	.+124    	; 0xf4a <__ultoa_invert+0x9c>
 ece:	b4 e0       	ldi	r27, 0x04	; 4
 ed0:	3c d0       	rcall	.+120    	; 0xf4a <__ultoa_invert+0x9c>
 ed2:	67 0f       	add	r22, r23
 ed4:	78 1f       	adc	r23, r24
 ed6:	89 1f       	adc	r24, r25
 ed8:	9a 1f       	adc	r25, r26
 eda:	a1 1d       	adc	r26, r1
 edc:	68 0f       	add	r22, r24
 ede:	79 1f       	adc	r23, r25
 ee0:	8a 1f       	adc	r24, r26
 ee2:	91 1d       	adc	r25, r1
 ee4:	a1 1d       	adc	r26, r1
 ee6:	6a 0f       	add	r22, r26
 ee8:	71 1d       	adc	r23, r1
 eea:	81 1d       	adc	r24, r1
 eec:	91 1d       	adc	r25, r1
 eee:	a1 1d       	adc	r26, r1
 ef0:	20 d0       	rcall	.+64     	; 0xf32 <__ultoa_invert+0x84>
 ef2:	09 f4       	brne	.+2      	; 0xef6 <__ultoa_invert+0x48>
 ef4:	68 94       	set
 ef6:	3f 91       	pop	r19
 ef8:	2a e0       	ldi	r18, 0x0A	; 10
 efa:	26 9f       	mul	r18, r22
 efc:	11 24       	eor	r1, r1
 efe:	30 19       	sub	r19, r0
 f00:	30 5d       	subi	r19, 0xD0	; 208
 f02:	31 93       	st	Z+, r19
 f04:	de f6       	brtc	.-74     	; 0xebc <__ultoa_invert+0xe>
 f06:	cf 01       	movw	r24, r30
 f08:	08 95       	ret
 f0a:	46 2f       	mov	r20, r22
 f0c:	47 70       	andi	r20, 0x07	; 7
 f0e:	40 5d       	subi	r20, 0xD0	; 208
 f10:	41 93       	st	Z+, r20
 f12:	b3 e0       	ldi	r27, 0x03	; 3
 f14:	0f d0       	rcall	.+30     	; 0xf34 <__ultoa_invert+0x86>
 f16:	c9 f7       	brne	.-14     	; 0xf0a <__ultoa_invert+0x5c>
 f18:	f6 cf       	rjmp	.-20     	; 0xf06 <__ultoa_invert+0x58>
 f1a:	46 2f       	mov	r20, r22
 f1c:	4f 70       	andi	r20, 0x0F	; 15
 f1e:	40 5d       	subi	r20, 0xD0	; 208
 f20:	4a 33       	cpi	r20, 0x3A	; 58
 f22:	18 f0       	brcs	.+6      	; 0xf2a <__ultoa_invert+0x7c>
 f24:	49 5d       	subi	r20, 0xD9	; 217
 f26:	31 fd       	sbrc	r19, 1
 f28:	40 52       	subi	r20, 0x20	; 32
 f2a:	41 93       	st	Z+, r20
 f2c:	02 d0       	rcall	.+4      	; 0xf32 <__ultoa_invert+0x84>
 f2e:	a9 f7       	brne	.-22     	; 0xf1a <__ultoa_invert+0x6c>
 f30:	ea cf       	rjmp	.-44     	; 0xf06 <__ultoa_invert+0x58>
 f32:	b4 e0       	ldi	r27, 0x04	; 4
 f34:	a6 95       	lsr	r26
 f36:	97 95       	ror	r25
 f38:	87 95       	ror	r24
 f3a:	77 95       	ror	r23
 f3c:	67 95       	ror	r22
 f3e:	ba 95       	dec	r27
 f40:	c9 f7       	brne	.-14     	; 0xf34 <__ultoa_invert+0x86>
 f42:	00 97       	sbiw	r24, 0x00	; 0
 f44:	61 05       	cpc	r22, r1
 f46:	71 05       	cpc	r23, r1
 f48:	08 95       	ret
 f4a:	9b 01       	movw	r18, r22
 f4c:	ac 01       	movw	r20, r24
 f4e:	0a 2e       	mov	r0, r26
 f50:	06 94       	lsr	r0
 f52:	57 95       	ror	r21
 f54:	47 95       	ror	r20
 f56:	37 95       	ror	r19
 f58:	27 95       	ror	r18
 f5a:	ba 95       	dec	r27
 f5c:	c9 f7       	brne	.-14     	; 0xf50 <__ultoa_invert+0xa2>
 f5e:	62 0f       	add	r22, r18
 f60:	73 1f       	adc	r23, r19
 f62:	84 1f       	adc	r24, r20
 f64:	95 1f       	adc	r25, r21
 f66:	a0 1d       	adc	r26, r0
 f68:	08 95       	ret

00000f6a <_exit>:
 f6a:	f8 94       	cli

00000f6c <__stop_program>:
 f6c:	ff cf       	rjmp	.-2      	; 0xf6c <__stop_program>
