
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000ee0  00000f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800242  00800242  000010b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff4  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b7  00000000  00000000  0000226e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000824  00000000  00000000  00002a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000871  00000000  00000000  0000396f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ee       	ldi	r30, 0xE0	; 224
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 34       	cpi	r26, 0x42	; 66
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a2 e4       	ldi	r26, 0x42	; 66
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 35       	cpi	r26, 0x51	; 81
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  a6:	0c 94 6e 07 	jmp	0xedc	; 0xedc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "ADC.h"

volatile uint8_t adc_conversion;

void adc_init(void){
	GICR |= (1 << INT2);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
	EMCUCR &= ~(1 << ISC2);
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	86 bf       	out	0x36, r24	; 54
	DDRE &= ~(1 << PE0); 
  ba:	30 98       	cbi	0x06, 0	; 6
  bc:	08 95       	ret

000000be <adc_read>:
}


uint8_t adc_read(adc_ch ch){
		volatile char *adc_ram = (char *) 0x1400; // Start address for the ADC
		adc_ram[0] = (uint8_t)ch;
  be:	80 93 00 14 	sts	0x1400, r24
		adc_conversion = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 46 02 	sts	0x0246, r24
		//wait for adc to finish conversion, interrupt based
		while (adc_conversion){
  c8:	80 91 46 02 	lds	r24, 0x0246
  cc:	81 11       	cpse	r24, r1
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <adc_read+0xa>
			//do nothing, wait for interrupt
		}
		return adc_ram[0];
  d0:	80 91 00 14 	lds	r24, 0x1400
}
  d4:	08 95       	ret

000000d6 <joy_init>:

static int16_t x_center;
static int16_t y_center;

void joy_init(void){
	x_center=adc_read(joy_x);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 45 02 	sts	0x0245, r25
  e4:	80 93 44 02 	sts	0x0244, r24
	y_center=adc_read(joy_y);
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 43 02 	sts	0x0243, r25
  f6:	80 93 42 02 	sts	0x0242, r24
  fa:	08 95       	ret

000000fc <joy_getPos>:
}

joy_pos_t joy_getPos(void){
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	int16_t pos_x=adc_read(joy_x);
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 10c:	08 2f       	mov	r16, r24
 10e:	10 e0       	ldi	r17, 0x00	; 0
	int16_t pos_y=adc_read(joy_y);
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
	pos_x-=x_center;
 11c:	80 91 44 02 	lds	r24, 0x0244
 120:	90 91 45 02 	lds	r25, 0x0245
 124:	08 1b       	sub	r16, r24
 126:	19 0b       	sbc	r17, r25
	pos_y-=y_center;
	pos_x=(pos_x*100)/127;
 128:	64 e6       	ldi	r22, 0x64	; 100
 12a:	60 9f       	mul	r22, r16
 12c:	c0 01       	movw	r24, r0
 12e:	61 9f       	mul	r22, r17
 130:	90 0d       	add	r25, r0
 132:	11 24       	eor	r1, r1

joy_pos_t joy_getPos(void){
	int16_t pos_x=adc_read(joy_x);
	int16_t pos_y=adc_read(joy_y);
	pos_x-=x_center;
	pos_y-=y_center;
 134:	40 91 42 02 	lds	r20, 0x0242
 138:	50 91 43 02 	lds	r21, 0x0243
 13c:	24 1b       	sub	r18, r20
 13e:	35 0b       	sbc	r19, r21
	pos_x=(pos_x*100)/127;
	pos_y=(pos_y*100)/127;
 140:	62 9f       	mul	r22, r18
 142:	e0 01       	movw	r28, r0
 144:	63 9f       	mul	r22, r19
 146:	d0 0d       	add	r29, r0
 148:	11 24       	eor	r1, r1
joy_pos_t joy_getPos(void){
	int16_t pos_x=adc_read(joy_x);
	int16_t pos_y=adc_read(joy_y);
	pos_x-=x_center;
	pos_y-=y_center;
	pos_x=(pos_x*100)/127;
 14a:	ef e7       	ldi	r30, 0x7F	; 127
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	bf 01       	movw	r22, r30
 150:	0e 94 ba 02 	call	0x574	; 0x574 <__divmodhi4>
	pos_y=(pos_y*100)/127;
	joy_pos_t pos_tmp;
	pos_tmp.x=pos_x;
	pos_tmp.y=pos_y;
	return pos_tmp;
 154:	8b 01       	movw	r16, r22
 156:	ce 01       	movw	r24, r28
 158:	bf 01       	movw	r22, r30
 15a:	0e 94 ba 02 	call	0x574	; 0x574 <__divmodhi4>
 15e:	9b 01       	movw	r18, r22
}
 160:	c9 01       	movw	r24, r18
 162:	b8 01       	movw	r22, r16
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <__vector_3>:


#define LED 0
#define SW1 1

ISR(INT2_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
	adc_conversion = 0;
 178:	10 92 46 02 	sts	0x0246, r1
}
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:



int main(void) {
	DDRB |= (1 << PB0);
 186:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
 188:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PB2);
 18a:	ba 98       	cbi	0x17, 2	; 23
	MCUCR |= (1 << SRE);
 18c:	85 b7       	in	r24, 0x35	; 53
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	85 bf       	out	0x35, r24	; 53
	uart_init();
 192:	0e 94 ae 02 	call	0x55c	; 0x55c <uart_init>
	printf("\f");
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <putchar>
	puts("UART\t\t initialized\r");
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	adc_init();
 1a6:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	puts("ADC\t\t initialized\r");
 1aa:	8a e1       	ldi	r24, 0x1A	; 26
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	sei();
 1b2:	78 94       	sei
	puts("Interrupts\t enabled\r");				
 1b4:	8d e2       	ldi	r24, 0x2D	; 45
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	joy_init();
 1bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <joy_init>
	puts("Joystick\t initialized\r");
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	//oled_init();
	puts("OLED\t\t initialized\r");
 1c8:	89 e5       	ldi	r24, 0x59	; 89
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	can_init(MODE_NORMAL);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <can_init>
	puts("SPI\t\t initialized");
 1d6:	8d e6       	ldi	r24, 0x6D	; 109
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	puts("MCP2515\t\t initialized");
 1de:	8f e7       	ldi	r24, 0x7F	; 127
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
	
	can_message_t* msg = malloc(sizeof(can_message_t));
 1e6:	8b e0       	ldi	r24, 0x0B	; 11
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <malloc>
 1ee:	ec 01       	movw	r28, r24

	while(1) {
		PORTB ^= (1 << LED);
 1f0:	66 24       	eor	r6, r6
 1f2:	63 94       	inc	r6
		//TODO: add this print as function in joy.c
		printf("adc1: %i, adc2: %i, adc3: %i, adc4: %i\n", adc_read(0b00000100),adc_read(0b00000101), adc_read(0b00000110), adc_read(0b00000111));
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f5 e9       	ldi	r31, 0x95	; 149
 1f8:	8f 2e       	mov	r8, r31
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	9f 2e       	mov	r9, r31
 1fe:	f0 2d       	mov	r31, r0
		joy_pos_t pos = joy_getPos();
		printf("X:%4i Y:%4i\r",pos.x,pos.y);
 200:	0f 2e       	mov	r0, r31
 202:	fd eb       	ldi	r31, 0xBD	; 189
 204:	af 2e       	mov	r10, r31
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	bf 2e       	mov	r11, r31
 20a:	f0 2d       	mov	r31, r0
		//oled_printf("Shahrukh Er Best");
		msg->id=5;
		msg->length=4;
 20c:	68 94       	set
 20e:	77 24       	eor	r7, r7
 210:	72 f8       	bld	r7, 2
		msg->data[0]=pos.x>>8;
		msg->data[1]=pos.x;
		msg->data[2]=pos.y>>8;
		msg->data[3]=pos.y;
		printf("sending:  ");
 212:	0f 2e       	mov	r0, r31
 214:	fa ec       	ldi	r31, 0xCA	; 202
 216:	cf 2e       	mov	r12, r31
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	df 2e       	mov	r13, r31
 21c:	f0 2d       	mov	r31, r0
	puts("MCP2515\t\t initialized");
	
	can_message_t* msg = malloc(sizeof(can_message_t));

	while(1) {
		PORTB ^= (1 << LED);
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	86 25       	eor	r24, r6
 222:	88 bb       	out	0x18, r24	; 24
		//TODO: add this print as function in joy.c
		printf("adc1: %i, adc2: %i, adc3: %i, adc4: %i\n", adc_read(0b00000100),adc_read(0b00000101), adc_read(0b00000110), adc_read(0b00000111));
 224:	87 e0       	ldi	r24, 0x07	; 7
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 22c:	f8 2e       	mov	r15, r24
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 236:	08 2f       	mov	r16, r24
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 240:	18 2f       	mov	r17, r24
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 24a:	1f 92       	push	r1
 24c:	ff 92       	push	r15
 24e:	1f 92       	push	r1
 250:	0f 93       	push	r16
 252:	1f 92       	push	r1
 254:	1f 93       	push	r17
 256:	1f 92       	push	r1
 258:	8f 93       	push	r24
 25a:	9f 92       	push	r9
 25c:	8f 92       	push	r8
 25e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printf>
		joy_pos_t pos = joy_getPos();
 262:	0e 94 7e 00 	call	0xfc	; 0xfc <joy_getPos>
 266:	f6 2e       	mov	r15, r22
 268:	e7 2e       	mov	r14, r23
 26a:	18 2f       	mov	r17, r24
 26c:	09 2f       	mov	r16, r25
		printf("X:%4i Y:%4i\r",pos.x,pos.y);
 26e:	9f 93       	push	r25
 270:	8f 93       	push	r24
 272:	7f 93       	push	r23
 274:	6f 93       	push	r22
 276:	bf 92       	push	r11
 278:	af 92       	push	r10
 27a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printf>
		//oled_printf("Shahrukh Er Best");
		msg->id=5;
 27e:	25 e0       	ldi	r18, 0x05	; 5
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	39 83       	std	Y+1, r19	; 0x01
 284:	28 83       	st	Y, r18
		msg->length=4;
 286:	7a 82       	std	Y+2, r7	; 0x02
		msg->data[0]=pos.x>>8;
 288:	eb 82       	std	Y+3, r14	; 0x03
		msg->data[1]=pos.x;
 28a:	fc 82       	std	Y+4, r15	; 0x04
		msg->data[2]=pos.y>>8;
 28c:	0d 83       	std	Y+5, r16	; 0x05
		msg->data[3]=pos.y;
 28e:	1e 83       	std	Y+6, r17	; 0x06
		printf("sending:  ");
 290:	df 92       	push	r13
 292:	cf 92       	push	r12
 294:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printf>
		can_print(*msg);
 298:	e8 80       	ld	r14, Y
 29a:	f9 80       	ldd	r15, Y+1	; 0x01
 29c:	0a 81       	ldd	r16, Y+2	; 0x02
 29e:	1b 81       	ldd	r17, Y+3	; 0x03
 2a0:	2c 81       	ldd	r18, Y+4	; 0x04
 2a2:	3d 81       	ldd	r19, Y+5	; 0x05
 2a4:	4e 81       	ldd	r20, Y+6	; 0x06
 2a6:	5f 81       	ldd	r21, Y+7	; 0x07
 2a8:	68 85       	ldd	r22, Y+8	; 0x08
 2aa:	79 85       	ldd	r23, Y+9	; 0x09
 2ac:	8a 85       	ldd	r24, Y+10	; 0x0a
 2ae:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <can_print>
		can_messageSend(msg,MCP_TXB1CTRL);
 2b2:	60 e4       	ldi	r22, 0x40	; 64
 2b4:	ce 01       	movw	r24, r28
 2b6:	0e 94 82 01 	call	0x304	; 0x304 <can_messageSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9f e2       	ldi	r25, 0x2F	; 47
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x138>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x13e>
 2c4:	00 00       	nop
 2c6:	8d b7       	in	r24, 0x3d	; 61
 2c8:	9e b7       	in	r25, 0x3e	; 62
 2ca:	42 96       	adiw	r24, 0x12	; 18
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	9e bf       	out	0x3e, r25	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	8d bf       	out	0x3d, r24	; 61
 2d6:	a3 cf       	rjmp	.-186    	; 0x21e <main+0x98>

000002d8 <can_init>:
#include "mcp2515defines.h"
#include <stdlib.h>
#include <string.h>


void can_init(uint8_t operationMode){
 2d8:	cf 93       	push	r28
 2da:	c8 2f       	mov	r28, r24
	mcp2515_init();
 2dc:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_init>
	mcp2515_bitModify(MCP_RXB0CTRL, MCP_FILTER_MASK, 0xff); //turn off filter
 2e0:	4f ef       	ldi	r20, 0xFF	; 255
 2e2:	60 e6       	ldi	r22, 0x60	; 96
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <mcp2515_bitModify>
	mcp2515_bitModify(MCP_RXB1CTRL, MCP_FILTER_MASK, 0xff); //turn off filter
 2ea:	4f ef       	ldi	r20, 0xFF	; 255
 2ec:	60 e6       	ldi	r22, 0x60	; 96
 2ee:	80 e7       	ldi	r24, 0x70	; 112
 2f0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <mcp2515_bitModify>
	mcp2515_bitModify(MCP_CANCTRL, MODE_MASK, operationMode);
 2f4:	4c 2f       	mov	r20, r28
 2f6:	60 ee       	ldi	r22, 0xE0	; 224
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <mcp2515_bitModify>
	DDRD &= ~(1<<PD2); //for can_pollInt()
 2fe:	8a 98       	cbi	0x11, 2	; 17
}
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <can_messageSend>:

//TODO: Should find a empty buffer by itself. No need for bufferselect. Should rather have priorities
void can_messageSend(can_message_t* msg,uint8_t bufferSelect){
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
 310:	06 2f       	mov	r16, r22
	//transelate bufferSelect to bufferControl
	uint8_t bufferControl;
	if (bufferSelect==MCP_TXB0CTRL){
 312:	60 33       	cpi	r22, 0x30	; 48
 314:	51 f0       	breq	.+20     	; 0x32a <can_messageSend+0x26>
		bufferControl=MCP_RTS_TX0;
	}
	else if (bufferSelect==MCP_TXB1CTRL){
 316:	60 34       	cpi	r22, 0x40	; 64
 318:	69 f0       	breq	.+26     	; 0x334 <can_messageSend+0x30>
		bufferControl=MCP_RTS_TX1;
	}
	else if (bufferSelect==MCP_TXB2CTRL){
 31a:	60 35       	cpi	r22, 0x50	; 80
 31c:	09 f0       	breq	.+2      	; 0x320 <can_messageSend+0x1c>
 31e:	42 c0       	rjmp	.+132    	; 0x3a4 <can_messageSend+0xa0>
		bufferControl=MCP_RTS_TX2;
 320:	0f 2e       	mov	r0, r31
 322:	f4 e8       	ldi	r31, 0x84	; 132
 324:	ff 2e       	mov	r15, r31
 326:	f0 2d       	mov	r31, r0
 328:	09 c0       	rjmp	.+18     	; 0x33c <can_messageSend+0x38>
//TODO: Should find a empty buffer by itself. No need for bufferselect. Should rather have priorities
void can_messageSend(can_message_t* msg,uint8_t bufferSelect){
	//transelate bufferSelect to bufferControl
	uint8_t bufferControl;
	if (bufferSelect==MCP_TXB0CTRL){
		bufferControl=MCP_RTS_TX0;
 32a:	0f 2e       	mov	r0, r31
 32c:	f1 e8       	ldi	r31, 0x81	; 129
 32e:	ff 2e       	mov	r15, r31
 330:	f0 2d       	mov	r31, r0
 332:	04 c0       	rjmp	.+8      	; 0x33c <can_messageSend+0x38>
	}
	else if (bufferSelect==MCP_TXB1CTRL){
		bufferControl=MCP_RTS_TX1;
 334:	0f 2e       	mov	r0, r31
 336:	f2 e8       	ldi	r31, 0x82	; 130
 338:	ff 2e       	mov	r15, r31
 33a:	f0 2d       	mov	r31, r0
		return; //if invalid bufferselect
	}

	//MCP_TXBnCTRL - Control Registers
	//wait for the previous message to complete sending, TXREQ - Message transmit request bit. high if buffer is already waiting to send
	while(mcp2515_read(bufferSelect) & (1 << MCP_TXREQ)){}
 33c:	80 2f       	mov	r24, r16
 33e:	0e 94 43 02 	call	0x486	; 0x486 <mcp2515_read>
 342:	83 fd       	sbrc	r24, 3
 344:	fb cf       	rjmp	.-10     	; 0x33c <can_messageSend+0x38>
	
	//MCP_TXBnSIDH & MCP_TXBnSIDL- ID registers
	//sending the id of the message, using standard mode, so no need to write extended ids
	mcp2515_write(bufferSelect+1, ((msg->id>>3) & MCP_IDH_MASK)); //16 to 10bit, 8 msb
 346:	28 81       	ld	r18, Y
 348:	39 81       	ldd	r19, Y+1	; 0x01
 34a:	b9 01       	movw	r22, r18
 34c:	76 95       	lsr	r23
 34e:	67 95       	ror	r22
 350:	76 95       	lsr	r23
 352:	67 95       	ror	r22
 354:	76 95       	lsr	r23
 356:	67 95       	ror	r22
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 0f       	add	r24, r16
 35c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_write>
	mcp2515_write(bufferSelect+2, ((msg->id<<5) & MCP_IDL_MASK)); //16 to 10bit, 3 lsb 
 360:	68 81       	ld	r22, Y
 362:	62 95       	swap	r22
 364:	66 0f       	add	r22, r22
 366:	60 7e       	andi	r22, 0xE0	; 224
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	80 0f       	add	r24, r16
 36c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_write>
	
	//TXBnDLC - Data length code registers
	//sending the msg
	mcp2515_write(bufferSelect+5, (msg->length) & MCP_DLC_MASK); //8 to 4bit, lsb
 370:	6a 81       	ldd	r22, Y+2	; 0x02
 372:	6f 70       	andi	r22, 0x0F	; 15
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	80 0f       	add	r24, r16
 378:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_write>
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	99 23       	and	r25, r25
 380:	71 f0       	breq	.+28     	; 0x39e <can_messageSend+0x9a>
 382:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
 384:	0a 5f       	subi	r16, 0xFA	; 250
 386:	fe 01       	movw	r30, r28
 388:	e1 0f       	add	r30, r17
 38a:	f1 1d       	adc	r31, r1
 38c:	63 81       	ldd	r22, Z+3	; 0x03
 38e:	80 2f       	mov	r24, r16
 390:	81 0f       	add	r24, r17
 392:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_write>
	
	//TXBnDLC - Data length code registers
	//sending the msg
	mcp2515_write(bufferSelect+5, (msg->length) & MCP_DLC_MASK); //8 to 4bit, lsb
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
 396:	1f 5f       	subi	r17, 0xFF	; 255
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	19 17       	cp	r17, r25
 39c:	a0 f3       	brcs	.-24     	; 0x386 <can_messageSend+0x82>
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
	}
	mcp2515_requestToSend(bufferControl);
 39e:	8f 2d       	mov	r24, r15
 3a0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mcp2515_requestToSend>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	08 95       	ret

000003b0 <can_print>:
		mcp2515_bitModify(MCP_CANINTF, MCP_RX1IF, 0x00); //unset flag
		return MCP_RXB1CTRL;
	}		
}

void can_print(can_message_t m){ //for debugging
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	2b 97       	sbiw	r28, 0x0b	; 11
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	e9 82       	std	Y+1, r14	; 0x01
 3d2:	fa 82       	std	Y+2, r15	; 0x02
 3d4:	c0 2e       	mov	r12, r16
 3d6:	0b 83       	std	Y+3, r16	; 0x03
 3d8:	1c 83       	std	Y+4, r17	; 0x04
 3da:	2d 83       	std	Y+5, r18	; 0x05
 3dc:	3e 83       	std	Y+6, r19	; 0x06
 3de:	4f 83       	std	Y+7, r20	; 0x07
 3e0:	58 87       	std	Y+8, r21	; 0x08
 3e2:	69 87       	std	Y+9, r22	; 0x09
 3e4:	7a 87       	std	Y+10, r23	; 0x0a
 3e6:	8b 87       	std	Y+11, r24	; 0x0b
	printf("can_message_t(id:%d, len:%d, data:{", m.id, m.length);
 3e8:	1f 92       	push	r1
 3ea:	0f 93       	push	r16
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	8f 93       	push	r24
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	8f 93       	push	r24
 3f4:	85 ed       	ldi	r24, 0xD5	; 213
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	9f 93       	push	r25
 3fa:	8f 93       	push	r24
 3fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printf>
	if(m.length){
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	00 23       	and	r16, r16
 40e:	41 f1       	breq	.+80     	; 0x460 <can_print+0xb0>
		printf("%d", m.data[0]);
 410:	8c 81       	ldd	r24, Y+4	; 0x04
 412:	1f 92       	push	r1
 414:	8f 93       	push	r24
 416:	8b ef       	ldi	r24, 0xFB	; 251
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printf>
	}
	for(uint8_t i = 1; i < m.length; i++){
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 17       	cp	r24, r16
 42e:	c0 f4       	brcc	.+48     	; 0x460 <can_print+0xb0>
 430:	7e 01       	movw	r14, r28
 432:	e5 e0       	ldi	r30, 0x05	; 5
 434:	ee 0e       	add	r14, r30
 436:	f1 1c       	adc	r15, r1
 438:	dd 24       	eor	r13, r13
 43a:	d3 94       	inc	r13
		printf(", %d", m.data[i]);
 43c:	09 ef       	ldi	r16, 0xF9	; 249
 43e:	11 e0       	ldi	r17, 0x01	; 1
 440:	f7 01       	movw	r30, r14
 442:	81 91       	ld	r24, Z+
 444:	7f 01       	movw	r14, r30
 446:	1f 92       	push	r1
 448:	8f 93       	push	r24
 44a:	1f 93       	push	r17
 44c:	0f 93       	push	r16
 44e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <printf>
void can_print(can_message_t m){ //for debugging
	printf("can_message_t(id:%d, len:%d, data:{", m.id, m.length);
	if(m.length){
		printf("%d", m.data[0]);
	}
	for(uint8_t i = 1; i < m.length; i++){
 452:	d3 94       	inc	r13
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	dc 10       	cpse	r13, r12
 45e:	f0 cf       	rjmp	.-32     	; 0x440 <can_print+0x90>
		printf(", %d", m.data[i]);
	}
	printf("})\n");
 460:	8e ef       	ldi	r24, 0xFE	; 254
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
}
 468:	2b 96       	adiw	r28, 0x0b	; 11
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	08 95       	ret

00000486 <mcp2515_read>:
			value= 1; //error code
		}
	}
}

uint8_t mcp2515_read(uint8_t address){
 486:	cf 93       	push	r28
 488:	c8 2f       	mov	r28, r24
	uint8_t result;
	PORTB &= ~(1 << MCP2515_CS); //select
 48a:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_READ);
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	spi_transmit(address);
 492:	8c 2f       	mov	r24, r28
 494:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	result=spi_transmit(0x00);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 49e:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	d8 2f       	mov	r29, r24
 4aa:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << MCP2515_CS); //select
 4ac:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_WRITE);
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	spi_transmit(address);
 4b4:	8d 2f       	mov	r24, r29
 4b6:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	spi_transmit(data);
 4ba:	8c 2f       	mov	r24, r28
 4bc:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 4c0:	c4 9a       	sbi	0x18, 4	; 24
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <mcp2515_requestToSend>:

void mcp2515_requestToSend(uint8_t bufferSelect){
	PORTB &= ~(1 << MCP2515_CS); //select
 4c8:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(bufferSelect);
 4ca:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 4ce:	c4 9a       	sbi	0x18, 4	; 24
 4d0:	08 95       	ret

000004d2 <mcp2515_bitModify>:
}

void mcp2515_bitModify(uint8_t address, uint8_t mask, uint8_t data){
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	18 2f       	mov	r17, r24
 4da:	d6 2f       	mov	r29, r22
 4dc:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS); //select
 4de:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_BITMOD);
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	spi_transmit(address);
 4e6:	81 2f       	mov	r24, r17
 4e8:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	spi_transmit(mask);
 4ec:	8d 2f       	mov	r24, r29
 4ee:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	spi_transmit(data);
 4f2:	8c 2f       	mov	r24, r28
 4f4:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 4f8:	c4 9a       	sbi	0x18, 4	; 24
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	08 95       	ret

00000502 <mcp2515_reset>:
void mcp2515_reset(void){
	PORTB &= ~(1 << MCP2515_CS); //select
 502:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_RESET);
 504:	80 ec       	ldi	r24, 0xC0	; 192
 506:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 50a:	c4 9a       	sbi	0x18, 4	; 24
 50c:	08 95       	ret

0000050e <mcp2515_init>:
#include <stdlib.h>
#include <stdio.h>

void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
 50e:	0e 94 9a 02 	call	0x534	; 0x534 <spi_init>
	mcp2515_reset();
 512:	0e 94 81 02 	call	0x502	; 0x502 <mcp2515_reset>
	//selftest, will reset chip until it is in configuration mode
	while(!value){
		value=mcp2515_read(MCP_CANSTAT);
 516:	8e e0       	ldi	r24, 0x0E	; 14
 518:	0e 94 43 02 	call	0x486	; 0x486 <mcp2515_read>
		if ((value & MODE_MASK) != MODE_CONFIG) {
 51c:	98 2f       	mov	r25, r24
 51e:	90 7e       	andi	r25, 0xE0	; 224
 520:	90 38       	cpi	r25, 0x80	; 128
 522:	29 f0       	breq	.+10     	; 0x52e <mcp2515_init+0x20>
			puts("ERROR! ERROR! MCP2515 is NOT in configuration mode after reset!\r");
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	92 e0       	ldi	r25, 0x02	; 2
 528:	0e 94 6f 04 	call	0x8de	; 0x8de <puts>
 52c:	08 95       	ret
void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
	mcp2515_reset();
	//selftest, will reset chip until it is in configuration mode
	while(!value){
 52e:	88 23       	and	r24, r24
 530:	91 f3       	breq	.-28     	; 0x516 <mcp2515_init+0x8>
 532:	08 95       	ret

00000534 <spi_init>:
#include <avr/io.h>


void spi_init(void){
	//SCK UT, MISO IN, MOSI UT, SS UT
	DDRB |= (1 << PB5) | (1<<PB7) | (1 << PB4);
 534:	87 b3       	in	r24, 0x17	; 23
 536:	80 6b       	ori	r24, 0xB0	; 176
 538:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
 53a:	be 98       	cbi	0x17, 6	; 23
	// NOT intterupt driven
	// mcp2515, max frequency is 10mhz
	// with external clock, F_CPU is defined to 4,9mhz. we divide by 4, so our sck is 1,2mhz
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 53c:	81 e5       	ldi	r24, 0x51	; 81
 53e:	8d b9       	out	0x0d, r24	; 13
 540:	08 95       	ret

00000542 <spi_transmit>:
}



uint8_t spi_transmit(char data){
	SPDR = data;
 542:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 544:	77 9b       	sbis	0x0e, 7	; 14
 546:	fe cf       	rjmp	.-4      	; 0x544 <spi_transmit+0x2>
	return SPDR;
 548:	8f b1       	in	r24, 0x0f	; 15
}
 54a:	08 95       	ret

0000054c <uart_putChar>:
	fdevopen(uart_putChar, uart_getChar);
}


void uart_putChar(unsigned char c){
	while (!(UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
 54c:	5d 9b       	sbis	0x0b, 5	; 11
 54e:	fe cf       	rjmp	.-4      	; 0x54c <uart_putChar>
	UDR0 = c; // Put data in to buffer
 550:	8c b9       	out	0x0c, r24	; 12
 552:	08 95       	ret

00000554 <uart_getChar>:
}


unsigned char uart_getChar(){
	
	while((UCSR0A) & (1<<UDRE0)); //Wait for "full" transmit buffer
 554:	5d 99       	sbic	0x0b, 5	; 11
 556:	fe cf       	rjmp	.-4      	; 0x554 <uart_getChar>
	return UDR0;
 558:	8c b1       	in	r24, 0x0c	; 12
}
 55a:	08 95       	ret

0000055c <uart_init>:
#include "uart.h"
#include <stdio.h>

void uart_init(void){
	//UBRR0L = 15;	// baudrate 192000hz
	UBRR0L = 0b00001111;
 55c:	8f e0       	ldi	r24, 0x0F	; 15
 55e:	89 b9       	out	0x09, r24	; 9
	
	//Character size
	//UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
	//UCSR0B &= ~(1 << UCSZ02);
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 560:	8a b1       	in	r24, 0x0a	; 10
 562:	88 61       	ori	r24, 0x18	; 24
 564:	8a b9       	out	0x0a, r24	; 10
	
	//for puts and printf
	fdevopen(uart_putChar, uart_getChar);
 566:	6a ea       	ldi	r22, 0xAA	; 170
 568:	72 e0       	ldi	r23, 0x02	; 2
 56a:	86 ea       	ldi	r24, 0xA6	; 166
 56c:	92 e0       	ldi	r25, 0x02	; 2
 56e:	0e 94 09 04 	call	0x812	; 0x812 <fdevopen>
 572:	08 95       	ret

00000574 <__divmodhi4>:
 574:	97 fb       	bst	r25, 7
 576:	07 2e       	mov	r0, r23
 578:	16 f4       	brtc	.+4      	; 0x57e <__divmodhi4+0xa>
 57a:	00 94       	com	r0
 57c:	07 d0       	rcall	.+14     	; 0x58c <__divmodhi4_neg1>
 57e:	77 fd       	sbrc	r23, 7
 580:	09 d0       	rcall	.+18     	; 0x594 <__divmodhi4_neg2>
 582:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodhi4>
 586:	07 fc       	sbrc	r0, 7
 588:	05 d0       	rcall	.+10     	; 0x594 <__divmodhi4_neg2>
 58a:	3e f4       	brtc	.+14     	; 0x59a <__divmodhi4_exit>

0000058c <__divmodhi4_neg1>:
 58c:	90 95       	com	r25
 58e:	81 95       	neg	r24
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	08 95       	ret

00000594 <__divmodhi4_neg2>:
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255

0000059a <__divmodhi4_exit>:
 59a:	08 95       	ret

0000059c <__udivmodhi4>:
 59c:	aa 1b       	sub	r26, r26
 59e:	bb 1b       	sub	r27, r27
 5a0:	51 e1       	ldi	r21, 0x11	; 17
 5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <__udivmodhi4_ep>

000005a4 <__udivmodhi4_loop>:
 5a4:	aa 1f       	adc	r26, r26
 5a6:	bb 1f       	adc	r27, r27
 5a8:	a6 17       	cp	r26, r22
 5aa:	b7 07       	cpc	r27, r23
 5ac:	10 f0       	brcs	.+4      	; 0x5b2 <__udivmodhi4_ep>
 5ae:	a6 1b       	sub	r26, r22
 5b0:	b7 0b       	sbc	r27, r23

000005b2 <__udivmodhi4_ep>:
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	5a 95       	dec	r21
 5b8:	a9 f7       	brne	.-22     	; 0x5a4 <__udivmodhi4_loop>
 5ba:	80 95       	com	r24
 5bc:	90 95       	com	r25
 5be:	bc 01       	movw	r22, r24
 5c0:	cd 01       	movw	r24, r26
 5c2:	08 95       	ret

000005c4 <malloc>:
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	91 05       	cpc	r25, r1
 5cc:	10 f4       	brcc	.+4      	; 0x5d2 <malloc+0xe>
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	e0 91 49 02 	lds	r30, 0x0249
 5d6:	f0 91 4a 02 	lds	r31, 0x024A
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	a0 e0       	ldi	r26, 0x00	; 0
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	30 97       	sbiw	r30, 0x00	; 0
 5e4:	39 f1       	breq	.+78     	; 0x634 <malloc+0x70>
 5e6:	40 81       	ld	r20, Z
 5e8:	51 81       	ldd	r21, Z+1	; 0x01
 5ea:	48 17       	cp	r20, r24
 5ec:	59 07       	cpc	r21, r25
 5ee:	b8 f0       	brcs	.+46     	; 0x61e <malloc+0x5a>
 5f0:	48 17       	cp	r20, r24
 5f2:	59 07       	cpc	r21, r25
 5f4:	71 f4       	brne	.+28     	; 0x612 <malloc+0x4e>
 5f6:	82 81       	ldd	r24, Z+2	; 0x02
 5f8:	93 81       	ldd	r25, Z+3	; 0x03
 5fa:	10 97       	sbiw	r26, 0x00	; 0
 5fc:	29 f0       	breq	.+10     	; 0x608 <malloc+0x44>
 5fe:	13 96       	adiw	r26, 0x03	; 3
 600:	9c 93       	st	X, r25
 602:	8e 93       	st	-X, r24
 604:	12 97       	sbiw	r26, 0x02	; 2
 606:	2c c0       	rjmp	.+88     	; 0x660 <malloc+0x9c>
 608:	90 93 4a 02 	sts	0x024A, r25
 60c:	80 93 49 02 	sts	0x0249, r24
 610:	27 c0       	rjmp	.+78     	; 0x660 <malloc+0x9c>
 612:	21 15       	cp	r18, r1
 614:	31 05       	cpc	r19, r1
 616:	31 f0       	breq	.+12     	; 0x624 <malloc+0x60>
 618:	42 17       	cp	r20, r18
 61a:	53 07       	cpc	r21, r19
 61c:	18 f0       	brcs	.+6      	; 0x624 <malloc+0x60>
 61e:	a9 01       	movw	r20, r18
 620:	db 01       	movw	r26, r22
 622:	01 c0       	rjmp	.+2      	; 0x626 <malloc+0x62>
 624:	ef 01       	movw	r28, r30
 626:	9a 01       	movw	r18, r20
 628:	bd 01       	movw	r22, r26
 62a:	df 01       	movw	r26, r30
 62c:	02 80       	ldd	r0, Z+2	; 0x02
 62e:	f3 81       	ldd	r31, Z+3	; 0x03
 630:	e0 2d       	mov	r30, r0
 632:	d7 cf       	rjmp	.-82     	; 0x5e2 <malloc+0x1e>
 634:	21 15       	cp	r18, r1
 636:	31 05       	cpc	r19, r1
 638:	f9 f0       	breq	.+62     	; 0x678 <malloc+0xb4>
 63a:	28 1b       	sub	r18, r24
 63c:	39 0b       	sbc	r19, r25
 63e:	24 30       	cpi	r18, 0x04	; 4
 640:	31 05       	cpc	r19, r1
 642:	80 f4       	brcc	.+32     	; 0x664 <malloc+0xa0>
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	9b 81       	ldd	r25, Y+3	; 0x03
 648:	61 15       	cp	r22, r1
 64a:	71 05       	cpc	r23, r1
 64c:	21 f0       	breq	.+8      	; 0x656 <malloc+0x92>
 64e:	fb 01       	movw	r30, r22
 650:	93 83       	std	Z+3, r25	; 0x03
 652:	82 83       	std	Z+2, r24	; 0x02
 654:	04 c0       	rjmp	.+8      	; 0x65e <malloc+0x9a>
 656:	90 93 4a 02 	sts	0x024A, r25
 65a:	80 93 49 02 	sts	0x0249, r24
 65e:	fe 01       	movw	r30, r28
 660:	32 96       	adiw	r30, 0x02	; 2
 662:	44 c0       	rjmp	.+136    	; 0x6ec <malloc+0x128>
 664:	fe 01       	movw	r30, r28
 666:	e2 0f       	add	r30, r18
 668:	f3 1f       	adc	r31, r19
 66a:	81 93       	st	Z+, r24
 66c:	91 93       	st	Z+, r25
 66e:	22 50       	subi	r18, 0x02	; 2
 670:	31 09       	sbc	r19, r1
 672:	39 83       	std	Y+1, r19	; 0x01
 674:	28 83       	st	Y, r18
 676:	3a c0       	rjmp	.+116    	; 0x6ec <malloc+0x128>
 678:	20 91 47 02 	lds	r18, 0x0247
 67c:	30 91 48 02 	lds	r19, 0x0248
 680:	23 2b       	or	r18, r19
 682:	41 f4       	brne	.+16     	; 0x694 <malloc+0xd0>
 684:	20 91 02 01 	lds	r18, 0x0102
 688:	30 91 03 01 	lds	r19, 0x0103
 68c:	30 93 48 02 	sts	0x0248, r19
 690:	20 93 47 02 	sts	0x0247, r18
 694:	20 91 00 01 	lds	r18, 0x0100
 698:	30 91 01 01 	lds	r19, 0x0101
 69c:	21 15       	cp	r18, r1
 69e:	31 05       	cpc	r19, r1
 6a0:	41 f4       	brne	.+16     	; 0x6b2 <malloc+0xee>
 6a2:	2d b7       	in	r18, 0x3d	; 61
 6a4:	3e b7       	in	r19, 0x3e	; 62
 6a6:	40 91 04 01 	lds	r20, 0x0104
 6aa:	50 91 05 01 	lds	r21, 0x0105
 6ae:	24 1b       	sub	r18, r20
 6b0:	35 0b       	sbc	r19, r21
 6b2:	e0 91 47 02 	lds	r30, 0x0247
 6b6:	f0 91 48 02 	lds	r31, 0x0248
 6ba:	e2 17       	cp	r30, r18
 6bc:	f3 07       	cpc	r31, r19
 6be:	a0 f4       	brcc	.+40     	; 0x6e8 <malloc+0x124>
 6c0:	2e 1b       	sub	r18, r30
 6c2:	3f 0b       	sbc	r19, r31
 6c4:	28 17       	cp	r18, r24
 6c6:	39 07       	cpc	r19, r25
 6c8:	78 f0       	brcs	.+30     	; 0x6e8 <malloc+0x124>
 6ca:	ac 01       	movw	r20, r24
 6cc:	4e 5f       	subi	r20, 0xFE	; 254
 6ce:	5f 4f       	sbci	r21, 0xFF	; 255
 6d0:	24 17       	cp	r18, r20
 6d2:	35 07       	cpc	r19, r21
 6d4:	48 f0       	brcs	.+18     	; 0x6e8 <malloc+0x124>
 6d6:	4e 0f       	add	r20, r30
 6d8:	5f 1f       	adc	r21, r31
 6da:	50 93 48 02 	sts	0x0248, r21
 6de:	40 93 47 02 	sts	0x0247, r20
 6e2:	81 93       	st	Z+, r24
 6e4:	91 93       	st	Z+, r25
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <malloc+0x128>
 6e8:	e0 e0       	ldi	r30, 0x00	; 0
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	cf 01       	movw	r24, r30
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	08 95       	ret

000006f4 <free>:
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	09 f4       	brne	.+2      	; 0x6fe <free+0xa>
 6fc:	87 c0       	rjmp	.+270    	; 0x80c <free+0x118>
 6fe:	fc 01       	movw	r30, r24
 700:	32 97       	sbiw	r30, 0x02	; 2
 702:	13 82       	std	Z+3, r1	; 0x03
 704:	12 82       	std	Z+2, r1	; 0x02
 706:	c0 91 49 02 	lds	r28, 0x0249
 70a:	d0 91 4a 02 	lds	r29, 0x024A
 70e:	20 97       	sbiw	r28, 0x00	; 0
 710:	81 f4       	brne	.+32     	; 0x732 <free+0x3e>
 712:	20 81       	ld	r18, Z
 714:	31 81       	ldd	r19, Z+1	; 0x01
 716:	28 0f       	add	r18, r24
 718:	39 1f       	adc	r19, r25
 71a:	80 91 47 02 	lds	r24, 0x0247
 71e:	90 91 48 02 	lds	r25, 0x0248
 722:	82 17       	cp	r24, r18
 724:	93 07       	cpc	r25, r19
 726:	79 f5       	brne	.+94     	; 0x786 <free+0x92>
 728:	f0 93 48 02 	sts	0x0248, r31
 72c:	e0 93 47 02 	sts	0x0247, r30
 730:	6d c0       	rjmp	.+218    	; 0x80c <free+0x118>
 732:	de 01       	movw	r26, r28
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	ae 17       	cp	r26, r30
 73a:	bf 07       	cpc	r27, r31
 73c:	50 f4       	brcc	.+20     	; 0x752 <free+0x5e>
 73e:	12 96       	adiw	r26, 0x02	; 2
 740:	4d 91       	ld	r20, X+
 742:	5c 91       	ld	r21, X
 744:	13 97       	sbiw	r26, 0x03	; 3
 746:	9d 01       	movw	r18, r26
 748:	41 15       	cp	r20, r1
 74a:	51 05       	cpc	r21, r1
 74c:	09 f1       	breq	.+66     	; 0x790 <free+0x9c>
 74e:	da 01       	movw	r26, r20
 750:	f3 cf       	rjmp	.-26     	; 0x738 <free+0x44>
 752:	b3 83       	std	Z+3, r27	; 0x03
 754:	a2 83       	std	Z+2, r26	; 0x02
 756:	40 81       	ld	r20, Z
 758:	51 81       	ldd	r21, Z+1	; 0x01
 75a:	84 0f       	add	r24, r20
 75c:	95 1f       	adc	r25, r21
 75e:	8a 17       	cp	r24, r26
 760:	9b 07       	cpc	r25, r27
 762:	71 f4       	brne	.+28     	; 0x780 <free+0x8c>
 764:	8d 91       	ld	r24, X+
 766:	9c 91       	ld	r25, X
 768:	11 97       	sbiw	r26, 0x01	; 1
 76a:	84 0f       	add	r24, r20
 76c:	95 1f       	adc	r25, r21
 76e:	02 96       	adiw	r24, 0x02	; 2
 770:	91 83       	std	Z+1, r25	; 0x01
 772:	80 83       	st	Z, r24
 774:	12 96       	adiw	r26, 0x02	; 2
 776:	8d 91       	ld	r24, X+
 778:	9c 91       	ld	r25, X
 77a:	13 97       	sbiw	r26, 0x03	; 3
 77c:	93 83       	std	Z+3, r25	; 0x03
 77e:	82 83       	std	Z+2, r24	; 0x02
 780:	21 15       	cp	r18, r1
 782:	31 05       	cpc	r19, r1
 784:	29 f4       	brne	.+10     	; 0x790 <free+0x9c>
 786:	f0 93 4a 02 	sts	0x024A, r31
 78a:	e0 93 49 02 	sts	0x0249, r30
 78e:	3e c0       	rjmp	.+124    	; 0x80c <free+0x118>
 790:	d9 01       	movw	r26, r18
 792:	13 96       	adiw	r26, 0x03	; 3
 794:	fc 93       	st	X, r31
 796:	ee 93       	st	-X, r30
 798:	12 97       	sbiw	r26, 0x02	; 2
 79a:	4d 91       	ld	r20, X+
 79c:	5d 91       	ld	r21, X+
 79e:	a4 0f       	add	r26, r20
 7a0:	b5 1f       	adc	r27, r21
 7a2:	ea 17       	cp	r30, r26
 7a4:	fb 07       	cpc	r31, r27
 7a6:	79 f4       	brne	.+30     	; 0x7c6 <free+0xd2>
 7a8:	80 81       	ld	r24, Z
 7aa:	91 81       	ldd	r25, Z+1	; 0x01
 7ac:	84 0f       	add	r24, r20
 7ae:	95 1f       	adc	r25, r21
 7b0:	02 96       	adiw	r24, 0x02	; 2
 7b2:	d9 01       	movw	r26, r18
 7b4:	11 96       	adiw	r26, 0x01	; 1
 7b6:	9c 93       	st	X, r25
 7b8:	8e 93       	st	-X, r24
 7ba:	82 81       	ldd	r24, Z+2	; 0x02
 7bc:	93 81       	ldd	r25, Z+3	; 0x03
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	9c 93       	st	X, r25
 7c2:	8e 93       	st	-X, r24
 7c4:	12 97       	sbiw	r26, 0x02	; 2
 7c6:	e0 e0       	ldi	r30, 0x00	; 0
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	9b 81       	ldd	r25, Y+3	; 0x03
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <free+0xe4>
 7d2:	fe 01       	movw	r30, r28
 7d4:	ec 01       	movw	r28, r24
 7d6:	f9 cf       	rjmp	.-14     	; 0x7ca <free+0xd6>
 7d8:	ce 01       	movw	r24, r28
 7da:	02 96       	adiw	r24, 0x02	; 2
 7dc:	28 81       	ld	r18, Y
 7de:	39 81       	ldd	r19, Y+1	; 0x01
 7e0:	82 0f       	add	r24, r18
 7e2:	93 1f       	adc	r25, r19
 7e4:	20 91 47 02 	lds	r18, 0x0247
 7e8:	30 91 48 02 	lds	r19, 0x0248
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	69 f4       	brne	.+26     	; 0x80c <free+0x118>
 7f2:	30 97       	sbiw	r30, 0x00	; 0
 7f4:	29 f4       	brne	.+10     	; 0x800 <free+0x10c>
 7f6:	10 92 4a 02 	sts	0x024A, r1
 7fa:	10 92 49 02 	sts	0x0249, r1
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <free+0x110>
 800:	13 82       	std	Z+3, r1	; 0x03
 802:	12 82       	std	Z+2, r1	; 0x02
 804:	d0 93 48 02 	sts	0x0248, r29
 808:	c0 93 47 02 	sts	0x0247, r28
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	08 95       	ret

00000812 <fdevopen>:
 812:	0f 93       	push	r16
 814:	1f 93       	push	r17
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	ec 01       	movw	r28, r24
 81c:	8b 01       	movw	r16, r22
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	31 f4       	brne	.+12     	; 0x82e <fdevopen+0x1c>
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	19 f4       	brne	.+6      	; 0x82e <fdevopen+0x1c>
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	38 c0       	rjmp	.+112    	; 0x89e <fdevopen+0x8c>
 82e:	6e e0       	ldi	r22, 0x0E	; 14
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 6e 06 	call	0xcdc	; 0xcdc <calloc>
 83a:	fc 01       	movw	r30, r24
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	a1 f3       	breq	.-24     	; 0x828 <fdevopen+0x16>
 840:	80 e8       	ldi	r24, 0x80	; 128
 842:	83 83       	std	Z+3, r24	; 0x03
 844:	01 15       	cp	r16, r1
 846:	11 05       	cpc	r17, r1
 848:	71 f0       	breq	.+28     	; 0x866 <fdevopen+0x54>
 84a:	13 87       	std	Z+11, r17	; 0x0b
 84c:	02 87       	std	Z+10, r16	; 0x0a
 84e:	81 e8       	ldi	r24, 0x81	; 129
 850:	83 83       	std	Z+3, r24	; 0x03
 852:	80 91 4b 02 	lds	r24, 0x024B
 856:	90 91 4c 02 	lds	r25, 0x024C
 85a:	89 2b       	or	r24, r25
 85c:	21 f4       	brne	.+8      	; 0x866 <fdevopen+0x54>
 85e:	f0 93 4c 02 	sts	0x024C, r31
 862:	e0 93 4b 02 	sts	0x024B, r30
 866:	20 97       	sbiw	r28, 0x00	; 0
 868:	c9 f0       	breq	.+50     	; 0x89c <fdevopen+0x8a>
 86a:	d1 87       	std	Z+9, r29	; 0x09
 86c:	c0 87       	std	Z+8, r28	; 0x08
 86e:	83 81       	ldd	r24, Z+3	; 0x03
 870:	82 60       	ori	r24, 0x02	; 2
 872:	83 83       	std	Z+3, r24	; 0x03
 874:	80 91 4d 02 	lds	r24, 0x024D
 878:	90 91 4e 02 	lds	r25, 0x024E
 87c:	89 2b       	or	r24, r25
 87e:	71 f4       	brne	.+28     	; 0x89c <fdevopen+0x8a>
 880:	f0 93 4e 02 	sts	0x024E, r31
 884:	e0 93 4d 02 	sts	0x024D, r30
 888:	80 91 4f 02 	lds	r24, 0x024F
 88c:	90 91 50 02 	lds	r25, 0x0250
 890:	89 2b       	or	r24, r25
 892:	21 f4       	brne	.+8      	; 0x89c <fdevopen+0x8a>
 894:	f0 93 50 02 	sts	0x0250, r31
 898:	e0 93 4f 02 	sts	0x024F, r30
 89c:	cf 01       	movw	r24, r30
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	08 95       	ret

000008a8 <printf>:
 8a8:	a0 e0       	ldi	r26, 0x00	; 0
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	ea e5       	ldi	r30, 0x5A	; 90
 8ae:	f4 e0       	ldi	r31, 0x04	; 4
 8b0:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__prologue_saves__+0x20>
 8b4:	fe 01       	movw	r30, r28
 8b6:	35 96       	adiw	r30, 0x05	; 5
 8b8:	61 91       	ld	r22, Z+
 8ba:	71 91       	ld	r23, Z+
 8bc:	af 01       	movw	r20, r30
 8be:	80 91 4d 02 	lds	r24, 0x024D
 8c2:	90 91 4e 02 	lds	r25, 0x024E
 8c6:	0e 94 9c 04 	call	0x938	; 0x938 <vfprintf>
 8ca:	e2 e0       	ldi	r30, 0x02	; 2
 8cc:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__epilogue_restores__+0x20>

000008d0 <putchar>:
 8d0:	60 91 4d 02 	lds	r22, 0x024D
 8d4:	70 91 4e 02 	lds	r23, 0x024E
 8d8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 8dc:	08 95       	ret

000008de <puts>:
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	e0 91 4d 02 	lds	r30, 0x024D
 8ea:	f0 91 4e 02 	lds	r31, 0x024E
 8ee:	23 81       	ldd	r18, Z+3	; 0x03
 8f0:	21 ff       	sbrs	r18, 1
 8f2:	1b c0       	rjmp	.+54     	; 0x92a <puts+0x4c>
 8f4:	ec 01       	movw	r28, r24
 8f6:	00 e0       	ldi	r16, 0x00	; 0
 8f8:	10 e0       	ldi	r17, 0x00	; 0
 8fa:	89 91       	ld	r24, Y+
 8fc:	60 91 4d 02 	lds	r22, 0x024D
 900:	70 91 4e 02 	lds	r23, 0x024E
 904:	db 01       	movw	r26, r22
 906:	18 96       	adiw	r26, 0x08	; 8
 908:	ed 91       	ld	r30, X+
 90a:	fc 91       	ld	r31, X
 90c:	19 97       	sbiw	r26, 0x09	; 9
 90e:	88 23       	and	r24, r24
 910:	31 f0       	breq	.+12     	; 0x91e <puts+0x40>
 912:	09 95       	icall
 914:	89 2b       	or	r24, r25
 916:	89 f3       	breq	.-30     	; 0x8fa <puts+0x1c>
 918:	0f ef       	ldi	r16, 0xFF	; 255
 91a:	1f ef       	ldi	r17, 0xFF	; 255
 91c:	ee cf       	rjmp	.-36     	; 0x8fa <puts+0x1c>
 91e:	8a e0       	ldi	r24, 0x0A	; 10
 920:	09 95       	icall
 922:	89 2b       	or	r24, r25
 924:	11 f4       	brne	.+4      	; 0x92a <puts+0x4c>
 926:	c8 01       	movw	r24, r16
 928:	02 c0       	rjmp	.+4      	; 0x92e <puts+0x50>
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	08 95       	ret

00000938 <vfprintf>:
 938:	ac e0       	ldi	r26, 0x0C	; 12
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e2 ea       	ldi	r30, 0xA2	; 162
 93e:	f4 e0       	ldi	r31, 0x04	; 4
 940:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__prologue_saves__>
 944:	7c 01       	movw	r14, r24
 946:	6b 01       	movw	r12, r22
 948:	8a 01       	movw	r16, r20
 94a:	fc 01       	movw	r30, r24
 94c:	17 82       	std	Z+7, r1	; 0x07
 94e:	16 82       	std	Z+6, r1	; 0x06
 950:	83 81       	ldd	r24, Z+3	; 0x03
 952:	81 ff       	sbrs	r24, 1
 954:	bd c1       	rjmp	.+890    	; 0xcd0 <vfprintf+0x398>
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	4c 01       	movw	r8, r24
 95c:	f7 01       	movw	r30, r14
 95e:	93 81       	ldd	r25, Z+3	; 0x03
 960:	f6 01       	movw	r30, r12
 962:	93 fd       	sbrc	r25, 3
 964:	85 91       	lpm	r24, Z+
 966:	93 ff       	sbrs	r25, 3
 968:	81 91       	ld	r24, Z+
 96a:	6f 01       	movw	r12, r30
 96c:	88 23       	and	r24, r24
 96e:	09 f4       	brne	.+2      	; 0x972 <vfprintf+0x3a>
 970:	ab c1       	rjmp	.+854    	; 0xcc8 <vfprintf+0x390>
 972:	85 32       	cpi	r24, 0x25	; 37
 974:	39 f4       	brne	.+14     	; 0x984 <vfprintf+0x4c>
 976:	93 fd       	sbrc	r25, 3
 978:	85 91       	lpm	r24, Z+
 97a:	93 ff       	sbrs	r25, 3
 97c:	81 91       	ld	r24, Z+
 97e:	6f 01       	movw	r12, r30
 980:	85 32       	cpi	r24, 0x25	; 37
 982:	29 f4       	brne	.+10     	; 0x98e <vfprintf+0x56>
 984:	b7 01       	movw	r22, r14
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 98c:	e7 cf       	rjmp	.-50     	; 0x95c <vfprintf+0x24>
 98e:	51 2c       	mov	r5, r1
 990:	31 2c       	mov	r3, r1
 992:	20 e0       	ldi	r18, 0x00	; 0
 994:	20 32       	cpi	r18, 0x20	; 32
 996:	a0 f4       	brcc	.+40     	; 0x9c0 <vfprintf+0x88>
 998:	8b 32       	cpi	r24, 0x2B	; 43
 99a:	69 f0       	breq	.+26     	; 0x9b6 <vfprintf+0x7e>
 99c:	30 f4       	brcc	.+12     	; 0x9aa <vfprintf+0x72>
 99e:	80 32       	cpi	r24, 0x20	; 32
 9a0:	59 f0       	breq	.+22     	; 0x9b8 <vfprintf+0x80>
 9a2:	83 32       	cpi	r24, 0x23	; 35
 9a4:	69 f4       	brne	.+26     	; 0x9c0 <vfprintf+0x88>
 9a6:	20 61       	ori	r18, 0x10	; 16
 9a8:	2c c0       	rjmp	.+88     	; 0xa02 <vfprintf+0xca>
 9aa:	8d 32       	cpi	r24, 0x2D	; 45
 9ac:	39 f0       	breq	.+14     	; 0x9bc <vfprintf+0x84>
 9ae:	80 33       	cpi	r24, 0x30	; 48
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <vfprintf+0x88>
 9b2:	21 60       	ori	r18, 0x01	; 1
 9b4:	26 c0       	rjmp	.+76     	; 0xa02 <vfprintf+0xca>
 9b6:	22 60       	ori	r18, 0x02	; 2
 9b8:	24 60       	ori	r18, 0x04	; 4
 9ba:	23 c0       	rjmp	.+70     	; 0xa02 <vfprintf+0xca>
 9bc:	28 60       	ori	r18, 0x08	; 8
 9be:	21 c0       	rjmp	.+66     	; 0xa02 <vfprintf+0xca>
 9c0:	27 fd       	sbrc	r18, 7
 9c2:	27 c0       	rjmp	.+78     	; 0xa12 <vfprintf+0xda>
 9c4:	30 ed       	ldi	r19, 0xD0	; 208
 9c6:	38 0f       	add	r19, r24
 9c8:	3a 30       	cpi	r19, 0x0A	; 10
 9ca:	78 f4       	brcc	.+30     	; 0x9ea <vfprintf+0xb2>
 9cc:	26 ff       	sbrs	r18, 6
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0xa4>
 9d0:	fa e0       	ldi	r31, 0x0A	; 10
 9d2:	5f 9e       	mul	r5, r31
 9d4:	30 0d       	add	r19, r0
 9d6:	11 24       	eor	r1, r1
 9d8:	53 2e       	mov	r5, r19
 9da:	13 c0       	rjmp	.+38     	; 0xa02 <vfprintf+0xca>
 9dc:	8a e0       	ldi	r24, 0x0A	; 10
 9de:	38 9e       	mul	r3, r24
 9e0:	30 0d       	add	r19, r0
 9e2:	11 24       	eor	r1, r1
 9e4:	33 2e       	mov	r3, r19
 9e6:	20 62       	ori	r18, 0x20	; 32
 9e8:	0c c0       	rjmp	.+24     	; 0xa02 <vfprintf+0xca>
 9ea:	8e 32       	cpi	r24, 0x2E	; 46
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <vfprintf+0xbe>
 9ee:	26 fd       	sbrc	r18, 6
 9f0:	6b c1       	rjmp	.+726    	; 0xcc8 <vfprintf+0x390>
 9f2:	20 64       	ori	r18, 0x40	; 64
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <vfprintf+0xca>
 9f6:	8c 36       	cpi	r24, 0x6C	; 108
 9f8:	11 f4       	brne	.+4      	; 0x9fe <vfprintf+0xc6>
 9fa:	20 68       	ori	r18, 0x80	; 128
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0xca>
 9fe:	88 36       	cpi	r24, 0x68	; 104
 a00:	41 f4       	brne	.+16     	; 0xa12 <vfprintf+0xda>
 a02:	f6 01       	movw	r30, r12
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	6f 01       	movw	r12, r30
 a0e:	81 11       	cpse	r24, r1
 a10:	c1 cf       	rjmp	.-126    	; 0x994 <vfprintf+0x5c>
 a12:	98 2f       	mov	r25, r24
 a14:	9f 7d       	andi	r25, 0xDF	; 223
 a16:	95 54       	subi	r25, 0x45	; 69
 a18:	93 30       	cpi	r25, 0x03	; 3
 a1a:	28 f4       	brcc	.+10     	; 0xa26 <vfprintf+0xee>
 a1c:	0c 5f       	subi	r16, 0xFC	; 252
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	ff e3       	ldi	r31, 0x3F	; 63
 a22:	f9 83       	std	Y+1, r31	; 0x01
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <vfprintf+0x108>
 a26:	83 36       	cpi	r24, 0x63	; 99
 a28:	31 f0       	breq	.+12     	; 0xa36 <vfprintf+0xfe>
 a2a:	83 37       	cpi	r24, 0x73	; 115
 a2c:	71 f0       	breq	.+28     	; 0xa4a <vfprintf+0x112>
 a2e:	83 35       	cpi	r24, 0x53	; 83
 a30:	09 f0       	breq	.+2      	; 0xa34 <vfprintf+0xfc>
 a32:	5b c0       	rjmp	.+182    	; 0xaea <vfprintf+0x1b2>
 a34:	22 c0       	rjmp	.+68     	; 0xa7a <vfprintf+0x142>
 a36:	f8 01       	movw	r30, r16
 a38:	80 81       	ld	r24, Z
 a3a:	89 83       	std	Y+1, r24	; 0x01
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	44 24       	eor	r4, r4
 a42:	43 94       	inc	r4
 a44:	51 2c       	mov	r5, r1
 a46:	54 01       	movw	r10, r8
 a48:	15 c0       	rjmp	.+42     	; 0xa74 <vfprintf+0x13c>
 a4a:	38 01       	movw	r6, r16
 a4c:	f2 e0       	ldi	r31, 0x02	; 2
 a4e:	6f 0e       	add	r6, r31
 a50:	71 1c       	adc	r7, r1
 a52:	f8 01       	movw	r30, r16
 a54:	a0 80       	ld	r10, Z
 a56:	b1 80       	ldd	r11, Z+1	; 0x01
 a58:	26 ff       	sbrs	r18, 6
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <vfprintf+0x12a>
 a5c:	65 2d       	mov	r22, r5
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0x12e>
 a62:	6f ef       	ldi	r22, 0xFF	; 255
 a64:	7f ef       	ldi	r23, 0xFF	; 255
 a66:	c5 01       	movw	r24, r10
 a68:	2c 87       	std	Y+12, r18	; 0x0c
 a6a:	0e 94 9c 06 	call	0xd38	; 0xd38 <strnlen>
 a6e:	2c 01       	movw	r4, r24
 a70:	83 01       	movw	r16, r6
 a72:	2c 85       	ldd	r18, Y+12	; 0x0c
 a74:	2f 77       	andi	r18, 0x7F	; 127
 a76:	22 2e       	mov	r2, r18
 a78:	17 c0       	rjmp	.+46     	; 0xaa8 <vfprintf+0x170>
 a7a:	38 01       	movw	r6, r16
 a7c:	f2 e0       	ldi	r31, 0x02	; 2
 a7e:	6f 0e       	add	r6, r31
 a80:	71 1c       	adc	r7, r1
 a82:	f8 01       	movw	r30, r16
 a84:	a0 80       	ld	r10, Z
 a86:	b1 80       	ldd	r11, Z+1	; 0x01
 a88:	26 ff       	sbrs	r18, 6
 a8a:	03 c0       	rjmp	.+6      	; 0xa92 <vfprintf+0x15a>
 a8c:	65 2d       	mov	r22, r5
 a8e:	70 e0       	ldi	r23, 0x00	; 0
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <vfprintf+0x15e>
 a92:	6f ef       	ldi	r22, 0xFF	; 255
 a94:	7f ef       	ldi	r23, 0xFF	; 255
 a96:	c5 01       	movw	r24, r10
 a98:	2c 87       	std	Y+12, r18	; 0x0c
 a9a:	0e 94 8a 06 	call	0xd14	; 0xd14 <strnlen_P>
 a9e:	2c 01       	movw	r4, r24
 aa0:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa2:	20 68       	ori	r18, 0x80	; 128
 aa4:	22 2e       	mov	r2, r18
 aa6:	83 01       	movw	r16, r6
 aa8:	23 fc       	sbrc	r2, 3
 aaa:	1b c0       	rjmp	.+54     	; 0xae2 <vfprintf+0x1aa>
 aac:	83 2d       	mov	r24, r3
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	48 16       	cp	r4, r24
 ab2:	59 06       	cpc	r5, r25
 ab4:	b0 f4       	brcc	.+44     	; 0xae2 <vfprintf+0x1aa>
 ab6:	b7 01       	movw	r22, r14
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 ac0:	3a 94       	dec	r3
 ac2:	f4 cf       	rjmp	.-24     	; 0xaac <vfprintf+0x174>
 ac4:	f5 01       	movw	r30, r10
 ac6:	27 fc       	sbrc	r2, 7
 ac8:	85 91       	lpm	r24, Z+
 aca:	27 fe       	sbrs	r2, 7
 acc:	81 91       	ld	r24, Z+
 ace:	5f 01       	movw	r10, r30
 ad0:	b7 01       	movw	r22, r14
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 ad8:	31 10       	cpse	r3, r1
 ada:	3a 94       	dec	r3
 adc:	f1 e0       	ldi	r31, 0x01	; 1
 ade:	4f 1a       	sub	r4, r31
 ae0:	51 08       	sbc	r5, r1
 ae2:	41 14       	cp	r4, r1
 ae4:	51 04       	cpc	r5, r1
 ae6:	71 f7       	brne	.-36     	; 0xac4 <vfprintf+0x18c>
 ae8:	e5 c0       	rjmp	.+458    	; 0xcb4 <vfprintf+0x37c>
 aea:	84 36       	cpi	r24, 0x64	; 100
 aec:	11 f0       	breq	.+4      	; 0xaf2 <vfprintf+0x1ba>
 aee:	89 36       	cpi	r24, 0x69	; 105
 af0:	39 f5       	brne	.+78     	; 0xb40 <vfprintf+0x208>
 af2:	f8 01       	movw	r30, r16
 af4:	27 ff       	sbrs	r18, 7
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <vfprintf+0x1ce>
 af8:	60 81       	ld	r22, Z
 afa:	71 81       	ldd	r23, Z+1	; 0x01
 afc:	82 81       	ldd	r24, Z+2	; 0x02
 afe:	93 81       	ldd	r25, Z+3	; 0x03
 b00:	0c 5f       	subi	r16, 0xFC	; 252
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <vfprintf+0x1de>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	88 27       	eor	r24, r24
 b0c:	77 fd       	sbrc	r23, 7
 b0e:	80 95       	com	r24
 b10:	98 2f       	mov	r25, r24
 b12:	0e 5f       	subi	r16, 0xFE	; 254
 b14:	1f 4f       	sbci	r17, 0xFF	; 255
 b16:	2f 76       	andi	r18, 0x6F	; 111
 b18:	b2 2e       	mov	r11, r18
 b1a:	97 ff       	sbrs	r25, 7
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <vfprintf+0x1f8>
 b1e:	90 95       	com	r25
 b20:	80 95       	com	r24
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	20 68       	ori	r18, 0x80	; 128
 b2e:	b2 2e       	mov	r11, r18
 b30:	2a e0       	ldi	r18, 0x0A	; 10
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	a4 01       	movw	r20, r8
 b36:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__ultoa_invert>
 b3a:	a8 2e       	mov	r10, r24
 b3c:	a8 18       	sub	r10, r8
 b3e:	44 c0       	rjmp	.+136    	; 0xbc8 <vfprintf+0x290>
 b40:	85 37       	cpi	r24, 0x75	; 117
 b42:	29 f4       	brne	.+10     	; 0xb4e <vfprintf+0x216>
 b44:	2f 7e       	andi	r18, 0xEF	; 239
 b46:	b2 2e       	mov	r11, r18
 b48:	2a e0       	ldi	r18, 0x0A	; 10
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	25 c0       	rjmp	.+74     	; 0xb98 <vfprintf+0x260>
 b4e:	f2 2f       	mov	r31, r18
 b50:	f9 7f       	andi	r31, 0xF9	; 249
 b52:	bf 2e       	mov	r11, r31
 b54:	8f 36       	cpi	r24, 0x6F	; 111
 b56:	c1 f0       	breq	.+48     	; 0xb88 <vfprintf+0x250>
 b58:	18 f4       	brcc	.+6      	; 0xb60 <vfprintf+0x228>
 b5a:	88 35       	cpi	r24, 0x58	; 88
 b5c:	79 f0       	breq	.+30     	; 0xb7c <vfprintf+0x244>
 b5e:	b4 c0       	rjmp	.+360    	; 0xcc8 <vfprintf+0x390>
 b60:	80 37       	cpi	r24, 0x70	; 112
 b62:	19 f0       	breq	.+6      	; 0xb6a <vfprintf+0x232>
 b64:	88 37       	cpi	r24, 0x78	; 120
 b66:	21 f0       	breq	.+8      	; 0xb70 <vfprintf+0x238>
 b68:	af c0       	rjmp	.+350    	; 0xcc8 <vfprintf+0x390>
 b6a:	2f 2f       	mov	r18, r31
 b6c:	20 61       	ori	r18, 0x10	; 16
 b6e:	b2 2e       	mov	r11, r18
 b70:	b4 fe       	sbrs	r11, 4
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <vfprintf+0x256>
 b74:	8b 2d       	mov	r24, r11
 b76:	84 60       	ori	r24, 0x04	; 4
 b78:	b8 2e       	mov	r11, r24
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <vfprintf+0x256>
 b7c:	24 ff       	sbrs	r18, 4
 b7e:	0a c0       	rjmp	.+20     	; 0xb94 <vfprintf+0x25c>
 b80:	9f 2f       	mov	r25, r31
 b82:	96 60       	ori	r25, 0x06	; 6
 b84:	b9 2e       	mov	r11, r25
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <vfprintf+0x25c>
 b88:	28 e0       	ldi	r18, 0x08	; 8
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	05 c0       	rjmp	.+10     	; 0xb98 <vfprintf+0x260>
 b8e:	20 e1       	ldi	r18, 0x10	; 16
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <vfprintf+0x260>
 b94:	20 e1       	ldi	r18, 0x10	; 16
 b96:	32 e0       	ldi	r19, 0x02	; 2
 b98:	f8 01       	movw	r30, r16
 b9a:	b7 fe       	sbrs	r11, 7
 b9c:	07 c0       	rjmp	.+14     	; 0xbac <vfprintf+0x274>
 b9e:	60 81       	ld	r22, Z
 ba0:	71 81       	ldd	r23, Z+1	; 0x01
 ba2:	82 81       	ldd	r24, Z+2	; 0x02
 ba4:	93 81       	ldd	r25, Z+3	; 0x03
 ba6:	0c 5f       	subi	r16, 0xFC	; 252
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0x280>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 5f       	subi	r16, 0xFE	; 254
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	a4 01       	movw	r20, r8
 bba:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__ultoa_invert>
 bbe:	a8 2e       	mov	r10, r24
 bc0:	a8 18       	sub	r10, r8
 bc2:	fb 2d       	mov	r31, r11
 bc4:	ff 77       	andi	r31, 0x7F	; 127
 bc6:	bf 2e       	mov	r11, r31
 bc8:	b6 fe       	sbrs	r11, 6
 bca:	0b c0       	rjmp	.+22     	; 0xbe2 <vfprintf+0x2aa>
 bcc:	2b 2d       	mov	r18, r11
 bce:	2e 7f       	andi	r18, 0xFE	; 254
 bd0:	a5 14       	cp	r10, r5
 bd2:	50 f4       	brcc	.+20     	; 0xbe8 <vfprintf+0x2b0>
 bd4:	b4 fe       	sbrs	r11, 4
 bd6:	0a c0       	rjmp	.+20     	; 0xbec <vfprintf+0x2b4>
 bd8:	b2 fc       	sbrc	r11, 2
 bda:	08 c0       	rjmp	.+16     	; 0xbec <vfprintf+0x2b4>
 bdc:	2b 2d       	mov	r18, r11
 bde:	2e 7e       	andi	r18, 0xEE	; 238
 be0:	05 c0       	rjmp	.+10     	; 0xbec <vfprintf+0x2b4>
 be2:	7a 2c       	mov	r7, r10
 be4:	2b 2d       	mov	r18, r11
 be6:	03 c0       	rjmp	.+6      	; 0xbee <vfprintf+0x2b6>
 be8:	7a 2c       	mov	r7, r10
 bea:	01 c0       	rjmp	.+2      	; 0xbee <vfprintf+0x2b6>
 bec:	75 2c       	mov	r7, r5
 bee:	24 ff       	sbrs	r18, 4
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <vfprintf+0x2d4>
 bf2:	fe 01       	movw	r30, r28
 bf4:	ea 0d       	add	r30, r10
 bf6:	f1 1d       	adc	r31, r1
 bf8:	80 81       	ld	r24, Z
 bfa:	80 33       	cpi	r24, 0x30	; 48
 bfc:	11 f4       	brne	.+4      	; 0xc02 <vfprintf+0x2ca>
 bfe:	29 7e       	andi	r18, 0xE9	; 233
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <vfprintf+0x2dc>
 c02:	22 ff       	sbrs	r18, 2
 c04:	06 c0       	rjmp	.+12     	; 0xc12 <vfprintf+0x2da>
 c06:	73 94       	inc	r7
 c08:	73 94       	inc	r7
 c0a:	04 c0       	rjmp	.+8      	; 0xc14 <vfprintf+0x2dc>
 c0c:	82 2f       	mov	r24, r18
 c0e:	86 78       	andi	r24, 0x86	; 134
 c10:	09 f0       	breq	.+2      	; 0xc14 <vfprintf+0x2dc>
 c12:	73 94       	inc	r7
 c14:	23 fd       	sbrc	r18, 3
 c16:	13 c0       	rjmp	.+38     	; 0xc3e <vfprintf+0x306>
 c18:	20 ff       	sbrs	r18, 0
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x2f0>
 c1c:	5a 2c       	mov	r5, r10
 c1e:	73 14       	cp	r7, r3
 c20:	18 f4       	brcc	.+6      	; 0xc28 <vfprintf+0x2f0>
 c22:	53 0c       	add	r5, r3
 c24:	57 18       	sub	r5, r7
 c26:	73 2c       	mov	r7, r3
 c28:	73 14       	cp	r7, r3
 c2a:	68 f4       	brcc	.+26     	; 0xc46 <vfprintf+0x30e>
 c2c:	b7 01       	movw	r22, r14
 c2e:	80 e2       	ldi	r24, 0x20	; 32
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	2c 87       	std	Y+12, r18	; 0x0c
 c34:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c38:	73 94       	inc	r7
 c3a:	2c 85       	ldd	r18, Y+12	; 0x0c
 c3c:	f5 cf       	rjmp	.-22     	; 0xc28 <vfprintf+0x2f0>
 c3e:	73 14       	cp	r7, r3
 c40:	10 f4       	brcc	.+4      	; 0xc46 <vfprintf+0x30e>
 c42:	37 18       	sub	r3, r7
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x310>
 c46:	31 2c       	mov	r3, r1
 c48:	24 ff       	sbrs	r18, 4
 c4a:	12 c0       	rjmp	.+36     	; 0xc70 <vfprintf+0x338>
 c4c:	b7 01       	movw	r22, r14
 c4e:	80 e3       	ldi	r24, 0x30	; 48
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	2c 87       	std	Y+12, r18	; 0x0c
 c54:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c58:	2c 85       	ldd	r18, Y+12	; 0x0c
 c5a:	22 ff       	sbrs	r18, 2
 c5c:	17 c0       	rjmp	.+46     	; 0xc8c <vfprintf+0x354>
 c5e:	21 ff       	sbrs	r18, 1
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x330>
 c62:	88 e5       	ldi	r24, 0x58	; 88
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x334>
 c68:	88 e7       	ldi	r24, 0x78	; 120
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	b7 01       	movw	r22, r14
 c6e:	0c c0       	rjmp	.+24     	; 0xc88 <vfprintf+0x350>
 c70:	82 2f       	mov	r24, r18
 c72:	86 78       	andi	r24, 0x86	; 134
 c74:	59 f0       	breq	.+22     	; 0xc8c <vfprintf+0x354>
 c76:	21 fd       	sbrc	r18, 1
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <vfprintf+0x346>
 c7a:	80 e2       	ldi	r24, 0x20	; 32
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x348>
 c7e:	8b e2       	ldi	r24, 0x2B	; 43
 c80:	27 fd       	sbrc	r18, 7
 c82:	8d e2       	ldi	r24, 0x2D	; 45
 c84:	b7 01       	movw	r22, r14
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c8c:	a5 14       	cp	r10, r5
 c8e:	38 f4       	brcc	.+14     	; 0xc9e <vfprintf+0x366>
 c90:	b7 01       	movw	r22, r14
 c92:	80 e3       	ldi	r24, 0x30	; 48
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c9a:	5a 94       	dec	r5
 c9c:	f7 cf       	rjmp	.-18     	; 0xc8c <vfprintf+0x354>
 c9e:	aa 94       	dec	r10
 ca0:	f4 01       	movw	r30, r8
 ca2:	ea 0d       	add	r30, r10
 ca4:	f1 1d       	adc	r31, r1
 ca6:	80 81       	ld	r24, Z
 ca8:	b7 01       	movw	r22, r14
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 cb0:	a1 10       	cpse	r10, r1
 cb2:	f5 cf       	rjmp	.-22     	; 0xc9e <vfprintf+0x366>
 cb4:	33 20       	and	r3, r3
 cb6:	09 f4       	brne	.+2      	; 0xcba <vfprintf+0x382>
 cb8:	51 ce       	rjmp	.-862    	; 0x95c <vfprintf+0x24>
 cba:	b7 01       	movw	r22, r14
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 cc4:	3a 94       	dec	r3
 cc6:	f6 cf       	rjmp	.-20     	; 0xcb4 <vfprintf+0x37c>
 cc8:	f7 01       	movw	r30, r14
 cca:	86 81       	ldd	r24, Z+6	; 0x06
 ccc:	97 81       	ldd	r25, Z+7	; 0x07
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <vfprintf+0x39c>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	2c 96       	adiw	r28, 0x0c	; 12
 cd6:	e2 e1       	ldi	r30, 0x12	; 18
 cd8:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__epilogue_restores__>

00000cdc <calloc>:
 cdc:	0f 93       	push	r16
 cde:	1f 93       	push	r17
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	86 9f       	mul	r24, r22
 ce6:	80 01       	movw	r16, r0
 ce8:	87 9f       	mul	r24, r23
 cea:	10 0d       	add	r17, r0
 cec:	96 9f       	mul	r25, r22
 cee:	10 0d       	add	r17, r0
 cf0:	11 24       	eor	r1, r1
 cf2:	c8 01       	movw	r24, r16
 cf4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <malloc>
 cf8:	ec 01       	movw	r28, r24
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	29 f0       	breq	.+10     	; 0xd08 <calloc+0x2c>
 cfe:	a8 01       	movw	r20, r16
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	0e 94 95 06 	call	0xd2a	; 0xd2a <memset>
 d08:	ce 01       	movw	r24, r28
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	1f 91       	pop	r17
 d10:	0f 91       	pop	r16
 d12:	08 95       	ret

00000d14 <strnlen_P>:
 d14:	fc 01       	movw	r30, r24
 d16:	05 90       	lpm	r0, Z+
 d18:	61 50       	subi	r22, 0x01	; 1
 d1a:	70 40       	sbci	r23, 0x00	; 0
 d1c:	01 10       	cpse	r0, r1
 d1e:	d8 f7       	brcc	.-10     	; 0xd16 <strnlen_P+0x2>
 d20:	80 95       	com	r24
 d22:	90 95       	com	r25
 d24:	8e 0f       	add	r24, r30
 d26:	9f 1f       	adc	r25, r31
 d28:	08 95       	ret

00000d2a <memset>:
 d2a:	dc 01       	movw	r26, r24
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <memset+0x6>
 d2e:	6d 93       	st	X+, r22
 d30:	41 50       	subi	r20, 0x01	; 1
 d32:	50 40       	sbci	r21, 0x00	; 0
 d34:	e0 f7       	brcc	.-8      	; 0xd2e <memset+0x4>
 d36:	08 95       	ret

00000d38 <strnlen>:
 d38:	fc 01       	movw	r30, r24
 d3a:	61 50       	subi	r22, 0x01	; 1
 d3c:	70 40       	sbci	r23, 0x00	; 0
 d3e:	01 90       	ld	r0, Z+
 d40:	01 10       	cpse	r0, r1
 d42:	d8 f7       	brcc	.-10     	; 0xd3a <strnlen+0x2>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	8e 0f       	add	r24, r30
 d4a:	9f 1f       	adc	r25, r31
 d4c:	08 95       	ret

00000d4e <fputc>:
 d4e:	0f 93       	push	r16
 d50:	1f 93       	push	r17
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	18 2f       	mov	r17, r24
 d58:	09 2f       	mov	r16, r25
 d5a:	eb 01       	movw	r28, r22
 d5c:	8b 81       	ldd	r24, Y+3	; 0x03
 d5e:	81 fd       	sbrc	r24, 1
 d60:	03 c0       	rjmp	.+6      	; 0xd68 <fputc+0x1a>
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	9f ef       	ldi	r25, 0xFF	; 255
 d66:	20 c0       	rjmp	.+64     	; 0xda8 <fputc+0x5a>
 d68:	82 ff       	sbrs	r24, 2
 d6a:	10 c0       	rjmp	.+32     	; 0xd8c <fputc+0x3e>
 d6c:	4e 81       	ldd	r20, Y+6	; 0x06
 d6e:	5f 81       	ldd	r21, Y+7	; 0x07
 d70:	2c 81       	ldd	r18, Y+4	; 0x04
 d72:	3d 81       	ldd	r19, Y+5	; 0x05
 d74:	42 17       	cp	r20, r18
 d76:	53 07       	cpc	r21, r19
 d78:	7c f4       	brge	.+30     	; 0xd98 <fputc+0x4a>
 d7a:	e8 81       	ld	r30, Y
 d7c:	f9 81       	ldd	r31, Y+1	; 0x01
 d7e:	9f 01       	movw	r18, r30
 d80:	2f 5f       	subi	r18, 0xFF	; 255
 d82:	3f 4f       	sbci	r19, 0xFF	; 255
 d84:	39 83       	std	Y+1, r19	; 0x01
 d86:	28 83       	st	Y, r18
 d88:	10 83       	st	Z, r17
 d8a:	06 c0       	rjmp	.+12     	; 0xd98 <fputc+0x4a>
 d8c:	e8 85       	ldd	r30, Y+8	; 0x08
 d8e:	f9 85       	ldd	r31, Y+9	; 0x09
 d90:	81 2f       	mov	r24, r17
 d92:	09 95       	icall
 d94:	89 2b       	or	r24, r25
 d96:	29 f7       	brne	.-54     	; 0xd62 <fputc+0x14>
 d98:	2e 81       	ldd	r18, Y+6	; 0x06
 d9a:	3f 81       	ldd	r19, Y+7	; 0x07
 d9c:	2f 5f       	subi	r18, 0xFF	; 255
 d9e:	3f 4f       	sbci	r19, 0xFF	; 255
 da0:	3f 83       	std	Y+7, r19	; 0x07
 da2:	2e 83       	std	Y+6, r18	; 0x06
 da4:	81 2f       	mov	r24, r17
 da6:	90 2f       	mov	r25, r16
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	1f 91       	pop	r17
 dae:	0f 91       	pop	r16
 db0:	08 95       	ret

00000db2 <__ultoa_invert>:
 db2:	fa 01       	movw	r30, r20
 db4:	aa 27       	eor	r26, r26
 db6:	28 30       	cpi	r18, 0x08	; 8
 db8:	51 f1       	breq	.+84     	; 0xe0e <__ultoa_invert+0x5c>
 dba:	20 31       	cpi	r18, 0x10	; 16
 dbc:	81 f1       	breq	.+96     	; 0xe1e <__ultoa_invert+0x6c>
 dbe:	e8 94       	clt
 dc0:	6f 93       	push	r22
 dc2:	6e 7f       	andi	r22, 0xFE	; 254
 dc4:	6e 5f       	subi	r22, 0xFE	; 254
 dc6:	7f 4f       	sbci	r23, 0xFF	; 255
 dc8:	8f 4f       	sbci	r24, 0xFF	; 255
 dca:	9f 4f       	sbci	r25, 0xFF	; 255
 dcc:	af 4f       	sbci	r26, 0xFF	; 255
 dce:	b1 e0       	ldi	r27, 0x01	; 1
 dd0:	3e d0       	rcall	.+124    	; 0xe4e <__ultoa_invert+0x9c>
 dd2:	b4 e0       	ldi	r27, 0x04	; 4
 dd4:	3c d0       	rcall	.+120    	; 0xe4e <__ultoa_invert+0x9c>
 dd6:	67 0f       	add	r22, r23
 dd8:	78 1f       	adc	r23, r24
 dda:	89 1f       	adc	r24, r25
 ddc:	9a 1f       	adc	r25, r26
 dde:	a1 1d       	adc	r26, r1
 de0:	68 0f       	add	r22, r24
 de2:	79 1f       	adc	r23, r25
 de4:	8a 1f       	adc	r24, r26
 de6:	91 1d       	adc	r25, r1
 de8:	a1 1d       	adc	r26, r1
 dea:	6a 0f       	add	r22, r26
 dec:	71 1d       	adc	r23, r1
 dee:	81 1d       	adc	r24, r1
 df0:	91 1d       	adc	r25, r1
 df2:	a1 1d       	adc	r26, r1
 df4:	20 d0       	rcall	.+64     	; 0xe36 <__ultoa_invert+0x84>
 df6:	09 f4       	brne	.+2      	; 0xdfa <__ultoa_invert+0x48>
 df8:	68 94       	set
 dfa:	3f 91       	pop	r19
 dfc:	2a e0       	ldi	r18, 0x0A	; 10
 dfe:	26 9f       	mul	r18, r22
 e00:	11 24       	eor	r1, r1
 e02:	30 19       	sub	r19, r0
 e04:	30 5d       	subi	r19, 0xD0	; 208
 e06:	31 93       	st	Z+, r19
 e08:	de f6       	brtc	.-74     	; 0xdc0 <__ultoa_invert+0xe>
 e0a:	cf 01       	movw	r24, r30
 e0c:	08 95       	ret
 e0e:	46 2f       	mov	r20, r22
 e10:	47 70       	andi	r20, 0x07	; 7
 e12:	40 5d       	subi	r20, 0xD0	; 208
 e14:	41 93       	st	Z+, r20
 e16:	b3 e0       	ldi	r27, 0x03	; 3
 e18:	0f d0       	rcall	.+30     	; 0xe38 <__ultoa_invert+0x86>
 e1a:	c9 f7       	brne	.-14     	; 0xe0e <__ultoa_invert+0x5c>
 e1c:	f6 cf       	rjmp	.-20     	; 0xe0a <__ultoa_invert+0x58>
 e1e:	46 2f       	mov	r20, r22
 e20:	4f 70       	andi	r20, 0x0F	; 15
 e22:	40 5d       	subi	r20, 0xD0	; 208
 e24:	4a 33       	cpi	r20, 0x3A	; 58
 e26:	18 f0       	brcs	.+6      	; 0xe2e <__ultoa_invert+0x7c>
 e28:	49 5d       	subi	r20, 0xD9	; 217
 e2a:	31 fd       	sbrc	r19, 1
 e2c:	40 52       	subi	r20, 0x20	; 32
 e2e:	41 93       	st	Z+, r20
 e30:	02 d0       	rcall	.+4      	; 0xe36 <__ultoa_invert+0x84>
 e32:	a9 f7       	brne	.-22     	; 0xe1e <__ultoa_invert+0x6c>
 e34:	ea cf       	rjmp	.-44     	; 0xe0a <__ultoa_invert+0x58>
 e36:	b4 e0       	ldi	r27, 0x04	; 4
 e38:	a6 95       	lsr	r26
 e3a:	97 95       	ror	r25
 e3c:	87 95       	ror	r24
 e3e:	77 95       	ror	r23
 e40:	67 95       	ror	r22
 e42:	ba 95       	dec	r27
 e44:	c9 f7       	brne	.-14     	; 0xe38 <__ultoa_invert+0x86>
 e46:	00 97       	sbiw	r24, 0x00	; 0
 e48:	61 05       	cpc	r22, r1
 e4a:	71 05       	cpc	r23, r1
 e4c:	08 95       	ret
 e4e:	9b 01       	movw	r18, r22
 e50:	ac 01       	movw	r20, r24
 e52:	0a 2e       	mov	r0, r26
 e54:	06 94       	lsr	r0
 e56:	57 95       	ror	r21
 e58:	47 95       	ror	r20
 e5a:	37 95       	ror	r19
 e5c:	27 95       	ror	r18
 e5e:	ba 95       	dec	r27
 e60:	c9 f7       	brne	.-14     	; 0xe54 <__ultoa_invert+0xa2>
 e62:	62 0f       	add	r22, r18
 e64:	73 1f       	adc	r23, r19
 e66:	84 1f       	adc	r24, r20
 e68:	95 1f       	adc	r25, r21
 e6a:	a0 1d       	adc	r26, r0
 e6c:	08 95       	ret

00000e6e <__prologue_saves__>:
 e6e:	2f 92       	push	r2
 e70:	3f 92       	push	r3
 e72:	4f 92       	push	r4
 e74:	5f 92       	push	r5
 e76:	6f 92       	push	r6
 e78:	7f 92       	push	r7
 e7a:	8f 92       	push	r8
 e7c:	9f 92       	push	r9
 e7e:	af 92       	push	r10
 e80:	bf 92       	push	r11
 e82:	cf 92       	push	r12
 e84:	df 92       	push	r13
 e86:	ef 92       	push	r14
 e88:	ff 92       	push	r15
 e8a:	0f 93       	push	r16
 e8c:	1f 93       	push	r17
 e8e:	cf 93       	push	r28
 e90:	df 93       	push	r29
 e92:	cd b7       	in	r28, 0x3d	; 61
 e94:	de b7       	in	r29, 0x3e	; 62
 e96:	ca 1b       	sub	r28, r26
 e98:	db 0b       	sbc	r29, r27
 e9a:	0f b6       	in	r0, 0x3f	; 63
 e9c:	f8 94       	cli
 e9e:	de bf       	out	0x3e, r29	; 62
 ea0:	0f be       	out	0x3f, r0	; 63
 ea2:	cd bf       	out	0x3d, r28	; 61
 ea4:	09 94       	ijmp

00000ea6 <__epilogue_restores__>:
 ea6:	2a 88       	ldd	r2, Y+18	; 0x12
 ea8:	39 88       	ldd	r3, Y+17	; 0x11
 eaa:	48 88       	ldd	r4, Y+16	; 0x10
 eac:	5f 84       	ldd	r5, Y+15	; 0x0f
 eae:	6e 84       	ldd	r6, Y+14	; 0x0e
 eb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 eb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 eb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 eb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 eb8:	b9 84       	ldd	r11, Y+9	; 0x09
 eba:	c8 84       	ldd	r12, Y+8	; 0x08
 ebc:	df 80       	ldd	r13, Y+7	; 0x07
 ebe:	ee 80       	ldd	r14, Y+6	; 0x06
 ec0:	fd 80       	ldd	r15, Y+5	; 0x05
 ec2:	0c 81       	ldd	r16, Y+4	; 0x04
 ec4:	1b 81       	ldd	r17, Y+3	; 0x03
 ec6:	aa 81       	ldd	r26, Y+2	; 0x02
 ec8:	b9 81       	ldd	r27, Y+1	; 0x01
 eca:	ce 0f       	add	r28, r30
 ecc:	d1 1d       	adc	r29, r1
 ece:	0f b6       	in	r0, 0x3f	; 63
 ed0:	f8 94       	cli
 ed2:	de bf       	out	0x3e, r29	; 62
 ed4:	0f be       	out	0x3f, r0	; 63
 ed6:	cd bf       	out	0x3d, r28	; 61
 ed8:	ed 01       	movw	r28, r26
 eda:	08 95       	ret

00000edc <_exit>:
 edc:	f8 94       	cli

00000ede <__stop_program>:
 ede:	ff cf       	rjmp	.-2      	; 0xede <__stop_program>
