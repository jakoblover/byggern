
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  0000085c  000008f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008001d6  008001d6  000009c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001175  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081b  00000000  00000000  00001cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000840  00000000  00000000  000024ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000080b  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e5       	ldi	r30, 0x5C	; 92
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 3d       	cpi	r26, 0xD6	; 214
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 ed       	ldi	r26, 0xD6	; 214
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a5 3e       	cpi	r26, 0xE5	; 229
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  a6:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "ADC.h"

volatile uint8_t adc_conversion;

void adc_init(void){
	GICR |= (1 << INT2);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
	EMCUCR &= ~(1 << ISC2);
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	86 bf       	out	0x36, r24	; 54
	DDRE &= ~(1 << PE0); 
  ba:	30 98       	cbi	0x06, 0	; 6
  bc:	08 95       	ret

000000be <adc_read>:
}


uint8_t adc_read(adc_ch ch){
		volatile char *adc_ram = (char *) 0x1400; // Start address for the ADC
		adc_ram[0] = (uint8_t)ch;
  be:	80 93 00 14 	sts	0x1400, r24
		adc_conversion = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 da 01 	sts	0x01DA, r24
		//wait for adc to finish conversion, interrupt based
		while (adc_conversion){
  c8:	80 91 da 01 	lds	r24, 0x01DA
  cc:	81 11       	cpse	r24, r1
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <adc_read+0xa>
			//do nothing, wait for interrupt
		}
		return adc_ram[0];
  d0:	80 91 00 14 	lds	r24, 0x1400
}
  d4:	08 95       	ret

000000d6 <joy_init>:

static int16_t x_center;
static int16_t y_center;

void joy_init(void){
	x_center=adc_read(joy_x);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 d9 01 	sts	0x01D9, r25
  e4:	80 93 d8 01 	sts	0x01D8, r24
	y_center=adc_read(joy_y);
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 d7 01 	sts	0x01D7, r25
  f6:	80 93 d6 01 	sts	0x01D6, r24
  fa:	08 95       	ret

000000fc <joy_getPos>:
}

joy_pos_t joy_getPos(void){
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	int16_t pos_x=adc_read(joy_x);
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 108:	c8 2f       	mov	r28, r24
 10a:	d0 e0       	ldi	r29, 0x00	; 0
	int16_t pos_y=adc_read(joy_y);
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
	pos_x-=x_center;
 118:	80 91 d8 01 	lds	r24, 0x01D8
 11c:	90 91 d9 01 	lds	r25, 0x01D9
 120:	c8 1b       	sub	r28, r24
 122:	d9 0b       	sbc	r29, r25
	pos_y-=y_center;
	pos_x=(pos_x*100)/127;
 124:	44 e6       	ldi	r20, 0x64	; 100
 126:	4c 9f       	mul	r20, r28
 128:	c0 01       	movw	r24, r0
 12a:	4d 9f       	mul	r20, r29
 12c:	90 0d       	add	r25, r0
 12e:	11 24       	eor	r1, r1
 130:	2f e7       	ldi	r18, 0x7F	; 127
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	0e 94 09 02 	call	0x412	; 0x412 <__divmodhi4>
 13a:	d6 2f       	mov	r29, r22
 13c:	c7 2f       	mov	r28, r23

joy_pos_t joy_getPos(void){
	int16_t pos_x=adc_read(joy_x);
	int16_t pos_y=adc_read(joy_y);
	pos_x-=x_center;
	pos_y-=y_center;
 13e:	80 91 d6 01 	lds	r24, 0x01D6
 142:	90 91 d7 01 	lds	r25, 0x01D7
 146:	e8 1b       	sub	r30, r24
 148:	f9 0b       	sbc	r31, r25
	pos_x=(pos_x*100)/127;
	pos_y=(pos_y*100)/127;
 14a:	4e 9f       	mul	r20, r30
 14c:	c0 01       	movw	r24, r0
 14e:	4f 9f       	mul	r20, r31
 150:	90 0d       	add	r25, r0
 152:	11 24       	eor	r1, r1
 154:	b9 01       	movw	r22, r18
 156:	0e 94 09 02 	call	0x412	; 0x412 <__divmodhi4>
 15a:	8d 2f       	mov	r24, r29
 15c:	9c 2f       	mov	r25, r28
 15e:	8c 39       	cpi	r24, 0x9C	; 156
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	92 07       	cpc	r25, r18
 164:	14 f4       	brge	.+4      	; 0x16a <joy_getPos+0x6e>
 166:	8c e9       	ldi	r24, 0x9C	; 156
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	26 2f       	mov	r18, r22
 16c:	37 2f       	mov	r19, r23
 16e:	2c 39       	cpi	r18, 0x9C	; 156
 170:	4f ef       	ldi	r20, 0xFF	; 255
 172:	34 07       	cpc	r19, r20
 174:	14 f4       	brge	.+4      	; 0x17a <joy_getPos+0x7e>
 176:	2c e9       	ldi	r18, 0x9C	; 156
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	ac 01       	movw	r20, r24
 17c:	85 36       	cpi	r24, 0x65	; 101
 17e:	91 05       	cpc	r25, r1
 180:	14 f0       	brlt	.+4      	; 0x186 <joy_getPos+0x8a>
 182:	44 e6       	ldi	r20, 0x64	; 100
 184:	50 e0       	ldi	r21, 0x00	; 0
		pos_y=-100;
	}
	joy_pos_t pos_tmp;
	pos_tmp.x=pos_x;
	pos_tmp.y=pos_y;
	return pos_tmp;
 186:	ba 01       	movw	r22, r20
 188:	25 36       	cpi	r18, 0x65	; 101
 18a:	31 05       	cpc	r19, r1
 18c:	14 f0       	brlt	.+4      	; 0x192 <joy_getPos+0x96>
 18e:	24 e6       	ldi	r18, 0x64	; 100
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	c9 01       	movw	r24, r18
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <__vector_3>:


#define LED 0
#define SW1 1

ISR(INT2_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
	adc_conversion = 0;
 1a4:	10 92 da 01 	sts	0x01DA, r1
}
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:



int main(void) {
	DDRB |= (1 << PB0);
 1b2:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
 1b4:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PB2);
 1b6:	ba 98       	cbi	0x17, 2	; 23
	MCUCR |= (1 << SRE);
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	85 bf       	out	0x35, r24	; 53
	uart_init();
 1be:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uart_init>
	printf("\f");
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 a3 03 	call	0x746	; 0x746 <putchar>
	puts("UART\t\t initialized\r");
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	adc_init();
 1d2:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	puts("ADC\t\t initialized\r");
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	sei();
 1de:	78 94       	sei
	puts("Interrupts\t enabled\r");				
 1e0:	8d e2       	ldi	r24, 0x2D	; 45
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	joy_init();
 1e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <joy_init>
	puts("Joystick\t initialized\r");
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	//oled_init();
	puts("OLED\t\t initialized\r");
 1f4:	89 e5       	ldi	r24, 0x59	; 89
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	can_init(MODE_NORMAL);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 26 01 	call	0x24c	; 0x24c <can_init>
	puts("SPI\t\t initialized");
 202:	8d e6       	ldi	r24, 0x6D	; 109
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	puts("MCP2515\t\t initialized");
 20a:	8f e7       	ldi	r24, 0x7F	; 127
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
	
	can_message_t* msg = malloc(sizeof(can_message_t));
 212:	8b e0       	ldi	r24, 0x0B	; 11
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 31 02 	call	0x462	; 0x462 <malloc>
 21a:	ec 01       	movw	r28, r24

	while(1) {
		PORTB ^= (1 << LED);
 21c:	ee 24       	eor	r14, r14
 21e:	e3 94       	inc	r14
		//TODO: add this print as function in joy.c
		//printf("adc1: %i, adc2: %i, adc3: %i, adc4: %i\n", adc_read(0b00000100),adc_read(0b00000101), adc_read(0b00000110), adc_read(0b00000111));
		joy_pos_t pos = joy_getPos();
		//printf("X:%4i Y:%4i\r",pos.x,pos.y);
		//oled_printf("Shahrukh Er Best");
		msg->id=5;
 220:	05 e0       	ldi	r16, 0x05	; 5
 222:	10 e0       	ldi	r17, 0x00	; 0
		msg->length=4;
 224:	68 94       	set
 226:	ff 24       	eor	r15, r15
 228:	f2 f8       	bld	r15, 2
	puts("MCP2515\t\t initialized");
	
	can_message_t* msg = malloc(sizeof(can_message_t));

	while(1) {
		PORTB ^= (1 << LED);
 22a:	88 b3       	in	r24, 0x18	; 24
 22c:	8e 25       	eor	r24, r14
 22e:	88 bb       	out	0x18, r24	; 24
		//TODO: add this print as function in joy.c
		//printf("adc1: %i, adc2: %i, adc3: %i, adc4: %i\n", adc_read(0b00000100),adc_read(0b00000101), adc_read(0b00000110), adc_read(0b00000111));
		joy_pos_t pos = joy_getPos();
 230:	0e 94 7e 00 	call	0xfc	; 0xfc <joy_getPos>
		//printf("X:%4i Y:%4i\r",pos.x,pos.y);
		//oled_printf("Shahrukh Er Best");
		msg->id=5;
 234:	19 83       	std	Y+1, r17	; 0x01
 236:	08 83       	st	Y, r16
		msg->length=4;
 238:	fa 82       	std	Y+2, r15	; 0x02
		msg->data[0]=pos.x>>8;
 23a:	7b 83       	std	Y+3, r23	; 0x03
		msg->data[1]=pos.x;
 23c:	6c 83       	std	Y+4, r22	; 0x04
		msg->data[2]=pos.y>>8;
 23e:	9d 83       	std	Y+5, r25	; 0x05
		msg->data[3]=pos.y;
 240:	8e 83       	std	Y+6, r24	; 0x06
		//printf("sending:  ");
		//can_print(*msg);
		can_messageSend(msg,MCP_TXB1CTRL);
 242:	60 e4       	ldi	r22, 0x40	; 64
 244:	ce 01       	movw	r24, r28
 246:	0e 94 3c 01 	call	0x278	; 0x278 <can_messageSend>
 24a:	ef cf       	rjmp	.-34     	; 0x22a <main+0x78>

0000024c <can_init>:
#include "uart.h"
#include <stdlib.h>
#include <string.h>


void can_init(uint8_t operationMode){
 24c:	cf 93       	push	r28
 24e:	c8 2f       	mov	r28, r24
	mcp2515_init();
 250:	0e 94 d6 01 	call	0x3ac	; 0x3ac <mcp2515_init>
	mcp2515_bitModify(MCP_RXB0CTRL, MCP_FILTER_MASK, 0xff); //turn off filter
 254:	4f ef       	ldi	r20, 0xFF	; 255
 256:	60 e6       	ldi	r22, 0x60	; 96
 258:	80 e6       	ldi	r24, 0x60	; 96
 25a:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_bitModify>
	mcp2515_bitModify(MCP_RXB1CTRL, MCP_FILTER_MASK, 0xff); //turn off filter
 25e:	4f ef       	ldi	r20, 0xFF	; 255
 260:	60 e6       	ldi	r22, 0x60	; 96
 262:	80 e7       	ldi	r24, 0x70	; 112
 264:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_bitModify>
	mcp2515_bitModify(MCP_CANCTRL, MODE_MASK, operationMode);
 268:	4c 2f       	mov	r20, r28
 26a:	60 ee       	ldi	r22, 0xE0	; 224
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_bitModify>
	DDRD &= ~(1<<PD2); //for can_pollInt()
 272:	8a 98       	cbi	0x11, 2	; 17
}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <can_messageSend>:

//TODO: Should find a empty buffer by itself. No need for bufferselect. Should rather have priorities
void can_messageSend(can_message_t* msg,uint8_t bufferSelect){
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	06 2f       	mov	r16, r22
	//transelate bufferSelect to bufferControl
	uint8_t bufferControl;
	if (bufferSelect==MCP_TXB0CTRL){
 286:	60 33       	cpi	r22, 0x30	; 48
 288:	51 f0       	breq	.+20     	; 0x29e <can_messageSend+0x26>
		bufferControl=MCP_RTS_TX0;
	}
	else if (bufferSelect==MCP_TXB1CTRL){
 28a:	60 34       	cpi	r22, 0x40	; 64
 28c:	69 f0       	breq	.+26     	; 0x2a8 <can_messageSend+0x30>
		bufferControl=MCP_RTS_TX1;
	}
	else if (bufferSelect==MCP_TXB2CTRL){
 28e:	60 35       	cpi	r22, 0x50	; 80
 290:	09 f0       	breq	.+2      	; 0x294 <can_messageSend+0x1c>
 292:	42 c0       	rjmp	.+132    	; 0x318 <can_messageSend+0xa0>
		bufferControl=MCP_RTS_TX2;
 294:	0f 2e       	mov	r0, r31
 296:	f4 e8       	ldi	r31, 0x84	; 132
 298:	ff 2e       	mov	r15, r31
 29a:	f0 2d       	mov	r31, r0
 29c:	09 c0       	rjmp	.+18     	; 0x2b0 <can_messageSend+0x38>
//TODO: Should find a empty buffer by itself. No need for bufferselect. Should rather have priorities
void can_messageSend(can_message_t* msg,uint8_t bufferSelect){
	//transelate bufferSelect to bufferControl
	uint8_t bufferControl;
	if (bufferSelect==MCP_TXB0CTRL){
		bufferControl=MCP_RTS_TX0;
 29e:	0f 2e       	mov	r0, r31
 2a0:	f1 e8       	ldi	r31, 0x81	; 129
 2a2:	ff 2e       	mov	r15, r31
 2a4:	f0 2d       	mov	r31, r0
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <can_messageSend+0x38>
	}
	else if (bufferSelect==MCP_TXB1CTRL){
		bufferControl=MCP_RTS_TX1;
 2a8:	0f 2e       	mov	r0, r31
 2aa:	f2 e8       	ldi	r31, 0x82	; 130
 2ac:	ff 2e       	mov	r15, r31
 2ae:	f0 2d       	mov	r31, r0
		return; //if invalid bufferselect
	}

	//MCP_TXBnCTRL - Control Registers
	//wait for the previous message to complete sending, TXREQ - Message transmit request bit. high if buffer is already waiting to send
	while(mcp2515_read(bufferSelect) & (1 << MCP_TXREQ)){}
 2b0:	80 2f       	mov	r24, r16
 2b2:	0e 94 92 01 	call	0x324	; 0x324 <mcp2515_read>
 2b6:	83 fd       	sbrc	r24, 3
 2b8:	fb cf       	rjmp	.-10     	; 0x2b0 <can_messageSend+0x38>
	
	//MCP_TXBnSIDH & MCP_TXBnSIDL- ID registers
	//sending the id of the message, using standard mode, so no need to write extended ids
	mcp2515_write(bufferSelect+1, ((msg->id>>3) & MCP_IDH_MASK)); //16 to 10bit, 8 msb
 2ba:	28 81       	ld	r18, Y
 2bc:	39 81       	ldd	r19, Y+1	; 0x01
 2be:	b9 01       	movw	r22, r18
 2c0:	76 95       	lsr	r23
 2c2:	67 95       	ror	r22
 2c4:	76 95       	lsr	r23
 2c6:	67 95       	ror	r22
 2c8:	76 95       	lsr	r23
 2ca:	67 95       	ror	r22
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 0f       	add	r24, r16
 2d0:	0e 94 a1 01 	call	0x342	; 0x342 <mcp2515_write>
	mcp2515_write(bufferSelect+2, ((msg->id<<5) & MCP_IDL_MASK)); //16 to 10bit, 3 lsb 
 2d4:	68 81       	ld	r22, Y
 2d6:	62 95       	swap	r22
 2d8:	66 0f       	add	r22, r22
 2da:	60 7e       	andi	r22, 0xE0	; 224
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	80 0f       	add	r24, r16
 2e0:	0e 94 a1 01 	call	0x342	; 0x342 <mcp2515_write>
	
	//TXBnDLC - Data length code registers
	//sending the msg
	mcp2515_write(bufferSelect+5, (msg->length) & MCP_DLC_MASK); //8 to 4bit, lsb
 2e4:	6a 81       	ldd	r22, Y+2	; 0x02
 2e6:	6f 70       	andi	r22, 0x0F	; 15
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	80 0f       	add	r24, r16
 2ec:	0e 94 a1 01 	call	0x342	; 0x342 <mcp2515_write>
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	99 23       	and	r25, r25
 2f4:	71 f0       	breq	.+28     	; 0x312 <can_messageSend+0x9a>
 2f6:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
 2f8:	0a 5f       	subi	r16, 0xFA	; 250
 2fa:	fe 01       	movw	r30, r28
 2fc:	e1 0f       	add	r30, r17
 2fe:	f1 1d       	adc	r31, r1
 300:	63 81       	ldd	r22, Z+3	; 0x03
 302:	80 2f       	mov	r24, r16
 304:	81 0f       	add	r24, r17
 306:	0e 94 a1 01 	call	0x342	; 0x342 <mcp2515_write>
	
	//TXBnDLC - Data length code registers
	//sending the msg
	mcp2515_write(bufferSelect+5, (msg->length) & MCP_DLC_MASK); //8 to 4bit, lsb
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
 30a:	1f 5f       	subi	r17, 0xFF	; 255
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	19 17       	cp	r17, r25
 310:	a0 f3       	brcs	.-24     	; 0x2fa <can_messageSend+0x82>
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
	}
	mcp2515_requestToSend(bufferControl);
 312:	8f 2d       	mov	r24, r15
 314:	0e 94 b3 01 	call	0x366	; 0x366 <mcp2515_requestToSend>
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	08 95       	ret

00000324 <mcp2515_read>:
			value= 1; //error code
		}
	}
}

uint8_t mcp2515_read(uint8_t address){
 324:	cf 93       	push	r28
 326:	c8 2f       	mov	r28, r24
	uint8_t result;
	PORTB &= ~(1 << MCP2515_CS); //select
 328:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_READ);
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	spi_transmit(address);
 330:	8c 2f       	mov	r24, r28
 332:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	result=spi_transmit(0x00);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 33c:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	d8 2f       	mov	r29, r24
 348:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << MCP2515_CS); //select
 34a:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_WRITE);
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	spi_transmit(address);
 352:	8d 2f       	mov	r24, r29
 354:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	spi_transmit(data);
 358:	8c 2f       	mov	r24, r28
 35a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 35e:	c4 9a       	sbi	0x18, 4	; 24
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <mcp2515_requestToSend>:

void mcp2515_requestToSend(uint8_t bufferSelect){
	PORTB &= ~(1 << MCP2515_CS); //select
 366:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(bufferSelect);
 368:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 36c:	c4 9a       	sbi	0x18, 4	; 24
 36e:	08 95       	ret

00000370 <mcp2515_bitModify>:
}

void mcp2515_bitModify(uint8_t address, uint8_t mask, uint8_t data){
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	18 2f       	mov	r17, r24
 378:	d6 2f       	mov	r29, r22
 37a:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS); //select
 37c:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_BITMOD);
 37e:	85 e0       	ldi	r24, 0x05	; 5
 380:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	spi_transmit(address);
 384:	81 2f       	mov	r24, r17
 386:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	spi_transmit(mask);
 38a:	8d 2f       	mov	r24, r29
 38c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	spi_transmit(data);
 390:	8c 2f       	mov	r24, r28
 392:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 396:	c4 9a       	sbi	0x18, 4	; 24
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <mcp2515_reset>:
void mcp2515_reset(void){
	PORTB &= ~(1 << MCP2515_CS); //select
 3a0:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_RESET);
 3a2:	80 ec       	ldi	r24, 0xC0	; 192
 3a4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 3a8:	c4 9a       	sbi	0x18, 4	; 24
 3aa:	08 95       	ret

000003ac <mcp2515_init>:
#include <stdlib.h>
#include <stdio.h>

void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
 3ac:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <spi_init>
	mcp2515_reset();
 3b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <mcp2515_reset>
	//selftest, will reset chip until it is in configuration mode
	while(!value){
		value=mcp2515_read(MCP_CANSTAT);
 3b4:	8e e0       	ldi	r24, 0x0E	; 14
 3b6:	0e 94 92 01 	call	0x324	; 0x324 <mcp2515_read>
		if ((value & MODE_MASK) != MODE_CONFIG) {
 3ba:	98 2f       	mov	r25, r24
 3bc:	90 7e       	andi	r25, 0xE0	; 224
 3be:	90 38       	cpi	r25, 0x80	; 128
 3c0:	29 f0       	breq	.+10     	; 0x3cc <mcp2515_init+0x20>
			puts("ERROR! ERROR! MCP2515 is NOT in configuration mode after reset!\r");
 3c2:	85 e9       	ldi	r24, 0x95	; 149
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 aa 03 	call	0x754	; 0x754 <puts>
 3ca:	08 95       	ret
void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
	mcp2515_reset();
	//selftest, will reset chip until it is in configuration mode
	while(!value){
 3cc:	88 23       	and	r24, r24
 3ce:	91 f3       	breq	.-28     	; 0x3b4 <mcp2515_init+0x8>
 3d0:	08 95       	ret

000003d2 <spi_init>:
#include <avr/io.h>


void spi_init(void){
	//SCK UT, MISO IN, MOSI UT, SS UT
	DDRB |= (1 << PB5) | (1<<PB7) | (1 << PB4);
 3d2:	87 b3       	in	r24, 0x17	; 23
 3d4:	80 6b       	ori	r24, 0xB0	; 176
 3d6:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
 3d8:	be 98       	cbi	0x17, 6	; 23
	// NOT intterupt driven
	// mcp2515, max frequency is 10mhz
	// with external clock, F_CPU is defined to 4,9mhz. we divide by 4, so our sck is 1,2mhz
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 3da:	81 e5       	ldi	r24, 0x51	; 81
 3dc:	8d b9       	out	0x0d, r24	; 13
 3de:	08 95       	ret

000003e0 <spi_transmit>:
}



uint8_t spi_transmit(char data){
	SPDR = data;
 3e0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 3e2:	77 9b       	sbis	0x0e, 7	; 14
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <spi_transmit+0x2>
	return SPDR;
 3e6:	8f b1       	in	r24, 0x0f	; 15
}
 3e8:	08 95       	ret

000003ea <uart_putChar>:
	fdevopen(uart_putChar, uart_getChar);
}


void uart_putChar(unsigned char c){
	while (!(UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
 3ea:	5d 9b       	sbis	0x0b, 5	; 11
 3ec:	fe cf       	rjmp	.-4      	; 0x3ea <uart_putChar>
	UDR0 = c; // Put data in to buffer
 3ee:	8c b9       	out	0x0c, r24	; 12
 3f0:	08 95       	ret

000003f2 <uart_getChar>:
}


unsigned char uart_getChar(){
	
	while((UCSR0A) & (1<<UDRE0)); //Wait for "full" transmit buffer
 3f2:	5d 99       	sbic	0x0b, 5	; 11
 3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <uart_getChar>
	return UDR0;
 3f6:	8c b1       	in	r24, 0x0c	; 12
}
 3f8:	08 95       	ret

000003fa <uart_init>:
#include "uart.h"
#include <stdio.h>

void uart_init(void){
	//UBRR0L = 15;	// baudrate 192000hz
	UBRR0L = 0b00001111;
 3fa:	8f e0       	ldi	r24, 0x0F	; 15
 3fc:	89 b9       	out	0x09, r24	; 9
	
	//Character size
	//UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
	//UCSR0B &= ~(1 << UCSZ02);
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 3fe:	8a b1       	in	r24, 0x0a	; 10
 400:	88 61       	ori	r24, 0x18	; 24
 402:	8a b9       	out	0x0a, r24	; 10
	
	//for puts and printf
	fdevopen(uart_putChar, uart_getChar);
 404:	69 ef       	ldi	r22, 0xF9	; 249
 406:	71 e0       	ldi	r23, 0x01	; 1
 408:	85 ef       	ldi	r24, 0xF5	; 245
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <fdevopen>
 410:	08 95       	ret

00000412 <__divmodhi4>:
 412:	97 fb       	bst	r25, 7
 414:	07 2e       	mov	r0, r23
 416:	16 f4       	brtc	.+4      	; 0x41c <__divmodhi4+0xa>
 418:	00 94       	com	r0
 41a:	07 d0       	rcall	.+14     	; 0x42a <__divmodhi4_neg1>
 41c:	77 fd       	sbrc	r23, 7
 41e:	09 d0       	rcall	.+18     	; 0x432 <__divmodhi4_neg2>
 420:	0e 94 1d 02 	call	0x43a	; 0x43a <__udivmodhi4>
 424:	07 fc       	sbrc	r0, 7
 426:	05 d0       	rcall	.+10     	; 0x432 <__divmodhi4_neg2>
 428:	3e f4       	brtc	.+14     	; 0x438 <__divmodhi4_exit>

0000042a <__divmodhi4_neg1>:
 42a:	90 95       	com	r25
 42c:	81 95       	neg	r24
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	08 95       	ret

00000432 <__divmodhi4_neg2>:
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255

00000438 <__divmodhi4_exit>:
 438:	08 95       	ret

0000043a <__udivmodhi4>:
 43a:	aa 1b       	sub	r26, r26
 43c:	bb 1b       	sub	r27, r27
 43e:	51 e1       	ldi	r21, 0x11	; 17
 440:	07 c0       	rjmp	.+14     	; 0x450 <__udivmodhi4_ep>

00000442 <__udivmodhi4_loop>:
 442:	aa 1f       	adc	r26, r26
 444:	bb 1f       	adc	r27, r27
 446:	a6 17       	cp	r26, r22
 448:	b7 07       	cpc	r27, r23
 44a:	10 f0       	brcs	.+4      	; 0x450 <__udivmodhi4_ep>
 44c:	a6 1b       	sub	r26, r22
 44e:	b7 0b       	sbc	r27, r23

00000450 <__udivmodhi4_ep>:
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	5a 95       	dec	r21
 456:	a9 f7       	brne	.-22     	; 0x442 <__udivmodhi4_loop>
 458:	80 95       	com	r24
 45a:	90 95       	com	r25
 45c:	bc 01       	movw	r22, r24
 45e:	cd 01       	movw	r24, r26
 460:	08 95       	ret

00000462 <malloc>:
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	91 05       	cpc	r25, r1
 46a:	10 f4       	brcc	.+4      	; 0x470 <malloc+0xe>
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	e0 91 dd 01 	lds	r30, 0x01DD
 474:	f0 91 de 01 	lds	r31, 0x01DE
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	a0 e0       	ldi	r26, 0x00	; 0
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	30 97       	sbiw	r30, 0x00	; 0
 482:	39 f1       	breq	.+78     	; 0x4d2 <malloc+0x70>
 484:	40 81       	ld	r20, Z
 486:	51 81       	ldd	r21, Z+1	; 0x01
 488:	48 17       	cp	r20, r24
 48a:	59 07       	cpc	r21, r25
 48c:	b8 f0       	brcs	.+46     	; 0x4bc <malloc+0x5a>
 48e:	48 17       	cp	r20, r24
 490:	59 07       	cpc	r21, r25
 492:	71 f4       	brne	.+28     	; 0x4b0 <malloc+0x4e>
 494:	82 81       	ldd	r24, Z+2	; 0x02
 496:	93 81       	ldd	r25, Z+3	; 0x03
 498:	10 97       	sbiw	r26, 0x00	; 0
 49a:	29 f0       	breq	.+10     	; 0x4a6 <malloc+0x44>
 49c:	13 96       	adiw	r26, 0x03	; 3
 49e:	9c 93       	st	X, r25
 4a0:	8e 93       	st	-X, r24
 4a2:	12 97       	sbiw	r26, 0x02	; 2
 4a4:	2c c0       	rjmp	.+88     	; 0x4fe <malloc+0x9c>
 4a6:	90 93 de 01 	sts	0x01DE, r25
 4aa:	80 93 dd 01 	sts	0x01DD, r24
 4ae:	27 c0       	rjmp	.+78     	; 0x4fe <malloc+0x9c>
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	31 f0       	breq	.+12     	; 0x4c2 <malloc+0x60>
 4b6:	42 17       	cp	r20, r18
 4b8:	53 07       	cpc	r21, r19
 4ba:	18 f0       	brcs	.+6      	; 0x4c2 <malloc+0x60>
 4bc:	a9 01       	movw	r20, r18
 4be:	db 01       	movw	r26, r22
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <malloc+0x62>
 4c2:	ef 01       	movw	r28, r30
 4c4:	9a 01       	movw	r18, r20
 4c6:	bd 01       	movw	r22, r26
 4c8:	df 01       	movw	r26, r30
 4ca:	02 80       	ldd	r0, Z+2	; 0x02
 4cc:	f3 81       	ldd	r31, Z+3	; 0x03
 4ce:	e0 2d       	mov	r30, r0
 4d0:	d7 cf       	rjmp	.-82     	; 0x480 <malloc+0x1e>
 4d2:	21 15       	cp	r18, r1
 4d4:	31 05       	cpc	r19, r1
 4d6:	f9 f0       	breq	.+62     	; 0x516 <__stack+0x17>
 4d8:	28 1b       	sub	r18, r24
 4da:	39 0b       	sbc	r19, r25
 4dc:	24 30       	cpi	r18, 0x04	; 4
 4de:	31 05       	cpc	r19, r1
 4e0:	80 f4       	brcc	.+32     	; 0x502 <__stack+0x3>
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	9b 81       	ldd	r25, Y+3	; 0x03
 4e6:	61 15       	cp	r22, r1
 4e8:	71 05       	cpc	r23, r1
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <malloc+0x92>
 4ec:	fb 01       	movw	r30, r22
 4ee:	93 83       	std	Z+3, r25	; 0x03
 4f0:	82 83       	std	Z+2, r24	; 0x02
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <malloc+0x9a>
 4f4:	90 93 de 01 	sts	0x01DE, r25
 4f8:	80 93 dd 01 	sts	0x01DD, r24
 4fc:	fe 01       	movw	r30, r28
 4fe:	32 96       	adiw	r30, 0x02	; 2
 500:	44 c0       	rjmp	.+136    	; 0x58a <__stack+0x8b>
 502:	fe 01       	movw	r30, r28
 504:	e2 0f       	add	r30, r18
 506:	f3 1f       	adc	r31, r19
 508:	81 93       	st	Z+, r24
 50a:	91 93       	st	Z+, r25
 50c:	22 50       	subi	r18, 0x02	; 2
 50e:	31 09       	sbc	r19, r1
 510:	39 83       	std	Y+1, r19	; 0x01
 512:	28 83       	st	Y, r18
 514:	3a c0       	rjmp	.+116    	; 0x58a <__stack+0x8b>
 516:	20 91 db 01 	lds	r18, 0x01DB
 51a:	30 91 dc 01 	lds	r19, 0x01DC
 51e:	23 2b       	or	r18, r19
 520:	41 f4       	brne	.+16     	; 0x532 <__stack+0x33>
 522:	20 91 02 01 	lds	r18, 0x0102
 526:	30 91 03 01 	lds	r19, 0x0103
 52a:	30 93 dc 01 	sts	0x01DC, r19
 52e:	20 93 db 01 	sts	0x01DB, r18
 532:	20 91 00 01 	lds	r18, 0x0100
 536:	30 91 01 01 	lds	r19, 0x0101
 53a:	21 15       	cp	r18, r1
 53c:	31 05       	cpc	r19, r1
 53e:	41 f4       	brne	.+16     	; 0x550 <__stack+0x51>
 540:	2d b7       	in	r18, 0x3d	; 61
 542:	3e b7       	in	r19, 0x3e	; 62
 544:	40 91 04 01 	lds	r20, 0x0104
 548:	50 91 05 01 	lds	r21, 0x0105
 54c:	24 1b       	sub	r18, r20
 54e:	35 0b       	sbc	r19, r21
 550:	e0 91 db 01 	lds	r30, 0x01DB
 554:	f0 91 dc 01 	lds	r31, 0x01DC
 558:	e2 17       	cp	r30, r18
 55a:	f3 07       	cpc	r31, r19
 55c:	a0 f4       	brcc	.+40     	; 0x586 <__stack+0x87>
 55e:	2e 1b       	sub	r18, r30
 560:	3f 0b       	sbc	r19, r31
 562:	28 17       	cp	r18, r24
 564:	39 07       	cpc	r19, r25
 566:	78 f0       	brcs	.+30     	; 0x586 <__stack+0x87>
 568:	ac 01       	movw	r20, r24
 56a:	4e 5f       	subi	r20, 0xFE	; 254
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	24 17       	cp	r18, r20
 570:	35 07       	cpc	r19, r21
 572:	48 f0       	brcs	.+18     	; 0x586 <__stack+0x87>
 574:	4e 0f       	add	r20, r30
 576:	5f 1f       	adc	r21, r31
 578:	50 93 dc 01 	sts	0x01DC, r21
 57c:	40 93 db 01 	sts	0x01DB, r20
 580:	81 93       	st	Z+, r24
 582:	91 93       	st	Z+, r25
 584:	02 c0       	rjmp	.+4      	; 0x58a <__stack+0x8b>
 586:	e0 e0       	ldi	r30, 0x00	; 0
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	cf 01       	movw	r24, r30
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <free>:
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	09 f4       	brne	.+2      	; 0x59c <free+0xa>
 59a:	87 c0       	rjmp	.+270    	; 0x6aa <free+0x118>
 59c:	fc 01       	movw	r30, r24
 59e:	32 97       	sbiw	r30, 0x02	; 2
 5a0:	13 82       	std	Z+3, r1	; 0x03
 5a2:	12 82       	std	Z+2, r1	; 0x02
 5a4:	c0 91 dd 01 	lds	r28, 0x01DD
 5a8:	d0 91 de 01 	lds	r29, 0x01DE
 5ac:	20 97       	sbiw	r28, 0x00	; 0
 5ae:	81 f4       	brne	.+32     	; 0x5d0 <free+0x3e>
 5b0:	20 81       	ld	r18, Z
 5b2:	31 81       	ldd	r19, Z+1	; 0x01
 5b4:	28 0f       	add	r18, r24
 5b6:	39 1f       	adc	r19, r25
 5b8:	80 91 db 01 	lds	r24, 0x01DB
 5bc:	90 91 dc 01 	lds	r25, 0x01DC
 5c0:	82 17       	cp	r24, r18
 5c2:	93 07       	cpc	r25, r19
 5c4:	79 f5       	brne	.+94     	; 0x624 <free+0x92>
 5c6:	f0 93 dc 01 	sts	0x01DC, r31
 5ca:	e0 93 db 01 	sts	0x01DB, r30
 5ce:	6d c0       	rjmp	.+218    	; 0x6aa <free+0x118>
 5d0:	de 01       	movw	r26, r28
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	ae 17       	cp	r26, r30
 5d8:	bf 07       	cpc	r27, r31
 5da:	50 f4       	brcc	.+20     	; 0x5f0 <free+0x5e>
 5dc:	12 96       	adiw	r26, 0x02	; 2
 5de:	4d 91       	ld	r20, X+
 5e0:	5c 91       	ld	r21, X
 5e2:	13 97       	sbiw	r26, 0x03	; 3
 5e4:	9d 01       	movw	r18, r26
 5e6:	41 15       	cp	r20, r1
 5e8:	51 05       	cpc	r21, r1
 5ea:	09 f1       	breq	.+66     	; 0x62e <free+0x9c>
 5ec:	da 01       	movw	r26, r20
 5ee:	f3 cf       	rjmp	.-26     	; 0x5d6 <free+0x44>
 5f0:	b3 83       	std	Z+3, r27	; 0x03
 5f2:	a2 83       	std	Z+2, r26	; 0x02
 5f4:	40 81       	ld	r20, Z
 5f6:	51 81       	ldd	r21, Z+1	; 0x01
 5f8:	84 0f       	add	r24, r20
 5fa:	95 1f       	adc	r25, r21
 5fc:	8a 17       	cp	r24, r26
 5fe:	9b 07       	cpc	r25, r27
 600:	71 f4       	brne	.+28     	; 0x61e <free+0x8c>
 602:	8d 91       	ld	r24, X+
 604:	9c 91       	ld	r25, X
 606:	11 97       	sbiw	r26, 0x01	; 1
 608:	84 0f       	add	r24, r20
 60a:	95 1f       	adc	r25, r21
 60c:	02 96       	adiw	r24, 0x02	; 2
 60e:	91 83       	std	Z+1, r25	; 0x01
 610:	80 83       	st	Z, r24
 612:	12 96       	adiw	r26, 0x02	; 2
 614:	8d 91       	ld	r24, X+
 616:	9c 91       	ld	r25, X
 618:	13 97       	sbiw	r26, 0x03	; 3
 61a:	93 83       	std	Z+3, r25	; 0x03
 61c:	82 83       	std	Z+2, r24	; 0x02
 61e:	21 15       	cp	r18, r1
 620:	31 05       	cpc	r19, r1
 622:	29 f4       	brne	.+10     	; 0x62e <free+0x9c>
 624:	f0 93 de 01 	sts	0x01DE, r31
 628:	e0 93 dd 01 	sts	0x01DD, r30
 62c:	3e c0       	rjmp	.+124    	; 0x6aa <free+0x118>
 62e:	d9 01       	movw	r26, r18
 630:	13 96       	adiw	r26, 0x03	; 3
 632:	fc 93       	st	X, r31
 634:	ee 93       	st	-X, r30
 636:	12 97       	sbiw	r26, 0x02	; 2
 638:	4d 91       	ld	r20, X+
 63a:	5d 91       	ld	r21, X+
 63c:	a4 0f       	add	r26, r20
 63e:	b5 1f       	adc	r27, r21
 640:	ea 17       	cp	r30, r26
 642:	fb 07       	cpc	r31, r27
 644:	79 f4       	brne	.+30     	; 0x664 <free+0xd2>
 646:	80 81       	ld	r24, Z
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	84 0f       	add	r24, r20
 64c:	95 1f       	adc	r25, r21
 64e:	02 96       	adiw	r24, 0x02	; 2
 650:	d9 01       	movw	r26, r18
 652:	11 96       	adiw	r26, 0x01	; 1
 654:	9c 93       	st	X, r25
 656:	8e 93       	st	-X, r24
 658:	82 81       	ldd	r24, Z+2	; 0x02
 65a:	93 81       	ldd	r25, Z+3	; 0x03
 65c:	13 96       	adiw	r26, 0x03	; 3
 65e:	9c 93       	st	X, r25
 660:	8e 93       	st	-X, r24
 662:	12 97       	sbiw	r26, 0x02	; 2
 664:	e0 e0       	ldi	r30, 0x00	; 0
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	9b 81       	ldd	r25, Y+3	; 0x03
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	19 f0       	breq	.+6      	; 0x676 <free+0xe4>
 670:	fe 01       	movw	r30, r28
 672:	ec 01       	movw	r28, r24
 674:	f9 cf       	rjmp	.-14     	; 0x668 <free+0xd6>
 676:	ce 01       	movw	r24, r28
 678:	02 96       	adiw	r24, 0x02	; 2
 67a:	28 81       	ld	r18, Y
 67c:	39 81       	ldd	r19, Y+1	; 0x01
 67e:	82 0f       	add	r24, r18
 680:	93 1f       	adc	r25, r19
 682:	20 91 db 01 	lds	r18, 0x01DB
 686:	30 91 dc 01 	lds	r19, 0x01DC
 68a:	28 17       	cp	r18, r24
 68c:	39 07       	cpc	r19, r25
 68e:	69 f4       	brne	.+26     	; 0x6aa <free+0x118>
 690:	30 97       	sbiw	r30, 0x00	; 0
 692:	29 f4       	brne	.+10     	; 0x69e <free+0x10c>
 694:	10 92 de 01 	sts	0x01DE, r1
 698:	10 92 dd 01 	sts	0x01DD, r1
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <free+0x110>
 69e:	13 82       	std	Z+3, r1	; 0x03
 6a0:	12 82       	std	Z+2, r1	; 0x02
 6a2:	d0 93 dc 01 	sts	0x01DC, r29
 6a6:	c0 93 db 01 	sts	0x01DB, r28
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <fdevopen>:
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	ec 01       	movw	r28, r24
 6ba:	8b 01       	movw	r16, r22
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	31 f4       	brne	.+12     	; 0x6cc <fdevopen+0x1c>
 6c0:	61 15       	cp	r22, r1
 6c2:	71 05       	cpc	r23, r1
 6c4:	19 f4       	brne	.+6      	; 0x6cc <fdevopen+0x1c>
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	38 c0       	rjmp	.+112    	; 0x73c <fdevopen+0x8c>
 6cc:	6e e0       	ldi	r22, 0x0E	; 14
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <calloc>
 6d8:	fc 01       	movw	r30, r24
 6da:	00 97       	sbiw	r24, 0x00	; 0
 6dc:	a1 f3       	breq	.-24     	; 0x6c6 <fdevopen+0x16>
 6de:	80 e8       	ldi	r24, 0x80	; 128
 6e0:	83 83       	std	Z+3, r24	; 0x03
 6e2:	01 15       	cp	r16, r1
 6e4:	11 05       	cpc	r17, r1
 6e6:	71 f0       	breq	.+28     	; 0x704 <fdevopen+0x54>
 6e8:	13 87       	std	Z+11, r17	; 0x0b
 6ea:	02 87       	std	Z+10, r16	; 0x0a
 6ec:	81 e8       	ldi	r24, 0x81	; 129
 6ee:	83 83       	std	Z+3, r24	; 0x03
 6f0:	80 91 df 01 	lds	r24, 0x01DF
 6f4:	90 91 e0 01 	lds	r25, 0x01E0
 6f8:	89 2b       	or	r24, r25
 6fa:	21 f4       	brne	.+8      	; 0x704 <fdevopen+0x54>
 6fc:	f0 93 e0 01 	sts	0x01E0, r31
 700:	e0 93 df 01 	sts	0x01DF, r30
 704:	20 97       	sbiw	r28, 0x00	; 0
 706:	c9 f0       	breq	.+50     	; 0x73a <fdevopen+0x8a>
 708:	d1 87       	std	Z+9, r29	; 0x09
 70a:	c0 87       	std	Z+8, r28	; 0x08
 70c:	83 81       	ldd	r24, Z+3	; 0x03
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	83 83       	std	Z+3, r24	; 0x03
 712:	80 91 e1 01 	lds	r24, 0x01E1
 716:	90 91 e2 01 	lds	r25, 0x01E2
 71a:	89 2b       	or	r24, r25
 71c:	71 f4       	brne	.+28     	; 0x73a <fdevopen+0x8a>
 71e:	f0 93 e2 01 	sts	0x01E2, r31
 722:	e0 93 e1 01 	sts	0x01E1, r30
 726:	80 91 e3 01 	lds	r24, 0x01E3
 72a:	90 91 e4 01 	lds	r25, 0x01E4
 72e:	89 2b       	or	r24, r25
 730:	21 f4       	brne	.+8      	; 0x73a <fdevopen+0x8a>
 732:	f0 93 e4 01 	sts	0x01E4, r31
 736:	e0 93 e3 01 	sts	0x01E3, r30
 73a:	cf 01       	movw	r24, r30
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	08 95       	ret

00000746 <putchar>:
 746:	60 91 e1 01 	lds	r22, 0x01E1
 74a:	70 91 e2 01 	lds	r23, 0x01E2
 74e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 752:	08 95       	ret

00000754 <puts>:
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	e0 91 e1 01 	lds	r30, 0x01E1
 760:	f0 91 e2 01 	lds	r31, 0x01E2
 764:	23 81       	ldd	r18, Z+3	; 0x03
 766:	21 ff       	sbrs	r18, 1
 768:	1b c0       	rjmp	.+54     	; 0x7a0 <puts+0x4c>
 76a:	ec 01       	movw	r28, r24
 76c:	00 e0       	ldi	r16, 0x00	; 0
 76e:	10 e0       	ldi	r17, 0x00	; 0
 770:	89 91       	ld	r24, Y+
 772:	60 91 e1 01 	lds	r22, 0x01E1
 776:	70 91 e2 01 	lds	r23, 0x01E2
 77a:	db 01       	movw	r26, r22
 77c:	18 96       	adiw	r26, 0x08	; 8
 77e:	ed 91       	ld	r30, X+
 780:	fc 91       	ld	r31, X
 782:	19 97       	sbiw	r26, 0x09	; 9
 784:	88 23       	and	r24, r24
 786:	31 f0       	breq	.+12     	; 0x794 <puts+0x40>
 788:	09 95       	icall
 78a:	89 2b       	or	r24, r25
 78c:	89 f3       	breq	.-30     	; 0x770 <puts+0x1c>
 78e:	0f ef       	ldi	r16, 0xFF	; 255
 790:	1f ef       	ldi	r17, 0xFF	; 255
 792:	ee cf       	rjmp	.-36     	; 0x770 <puts+0x1c>
 794:	8a e0       	ldi	r24, 0x0A	; 10
 796:	09 95       	icall
 798:	89 2b       	or	r24, r25
 79a:	11 f4       	brne	.+4      	; 0x7a0 <puts+0x4c>
 79c:	c8 01       	movw	r24, r16
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <puts+0x50>
 7a0:	8f ef       	ldi	r24, 0xFF	; 255
 7a2:	9f ef       	ldi	r25, 0xFF	; 255
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	08 95       	ret

000007ae <calloc>:
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	86 9f       	mul	r24, r22
 7b8:	80 01       	movw	r16, r0
 7ba:	87 9f       	mul	r24, r23
 7bc:	10 0d       	add	r17, r0
 7be:	96 9f       	mul	r25, r22
 7c0:	10 0d       	add	r17, r0
 7c2:	11 24       	eor	r1, r1
 7c4:	c8 01       	movw	r24, r16
 7c6:	0e 94 31 02 	call	0x462	; 0x462 <malloc>
 7ca:	ec 01       	movw	r28, r24
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	29 f0       	breq	.+10     	; 0x7da <calloc+0x2c>
 7d0:	a8 01       	movw	r20, r16
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <memset>
 7da:	ce 01       	movw	r24, r28
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	08 95       	ret

000007e6 <memset>:
 7e6:	dc 01       	movw	r26, r24
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <memset+0x6>
 7ea:	6d 93       	st	X+, r22
 7ec:	41 50       	subi	r20, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	e0 f7       	brcc	.-8      	; 0x7ea <memset+0x4>
 7f2:	08 95       	ret

000007f4 <fputc>:
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	18 2f       	mov	r17, r24
 7fe:	09 2f       	mov	r16, r25
 800:	eb 01       	movw	r28, r22
 802:	8b 81       	ldd	r24, Y+3	; 0x03
 804:	81 fd       	sbrc	r24, 1
 806:	03 c0       	rjmp	.+6      	; 0x80e <fputc+0x1a>
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	9f ef       	ldi	r25, 0xFF	; 255
 80c:	20 c0       	rjmp	.+64     	; 0x84e <fputc+0x5a>
 80e:	82 ff       	sbrs	r24, 2
 810:	10 c0       	rjmp	.+32     	; 0x832 <fputc+0x3e>
 812:	4e 81       	ldd	r20, Y+6	; 0x06
 814:	5f 81       	ldd	r21, Y+7	; 0x07
 816:	2c 81       	ldd	r18, Y+4	; 0x04
 818:	3d 81       	ldd	r19, Y+5	; 0x05
 81a:	42 17       	cp	r20, r18
 81c:	53 07       	cpc	r21, r19
 81e:	7c f4       	brge	.+30     	; 0x83e <fputc+0x4a>
 820:	e8 81       	ld	r30, Y
 822:	f9 81       	ldd	r31, Y+1	; 0x01
 824:	9f 01       	movw	r18, r30
 826:	2f 5f       	subi	r18, 0xFF	; 255
 828:	3f 4f       	sbci	r19, 0xFF	; 255
 82a:	39 83       	std	Y+1, r19	; 0x01
 82c:	28 83       	st	Y, r18
 82e:	10 83       	st	Z, r17
 830:	06 c0       	rjmp	.+12     	; 0x83e <fputc+0x4a>
 832:	e8 85       	ldd	r30, Y+8	; 0x08
 834:	f9 85       	ldd	r31, Y+9	; 0x09
 836:	81 2f       	mov	r24, r17
 838:	09 95       	icall
 83a:	89 2b       	or	r24, r25
 83c:	29 f7       	brne	.-54     	; 0x808 <fputc+0x14>
 83e:	2e 81       	ldd	r18, Y+6	; 0x06
 840:	3f 81       	ldd	r19, Y+7	; 0x07
 842:	2f 5f       	subi	r18, 0xFF	; 255
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	3f 83       	std	Y+7, r19	; 0x07
 848:	2e 83       	std	Y+6, r18	; 0x06
 84a:	81 2f       	mov	r24, r17
 84c:	90 2f       	mov	r25, r16
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
