
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000f00  00000f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800242  00800242  000010d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f80  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075e  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a7  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000304  00000000  00000000  00003120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d5  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000040c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e0       	ldi	r30, 0x00	; 0
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 34       	cpi	r26, 0x42	; 66
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a2 e4       	ldi	r26, 0x42	; 66
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 35       	cpi	r26, 0x51	; 81
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  a6:	0c 94 7e 07 	jmp	0xefc	; 0xefc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "ADC.h"

volatile uint8_t adc_conversion;

void adc_init(void){
	GICR |= (1 << INT2);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
	EMCUCR &= ~(1 << ISC2);
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	86 bf       	out	0x36, r24	; 54
	DDRE &= ~(1 << PE0); 
  ba:	30 98       	cbi	0x06, 0	; 6
  bc:	08 95       	ret

000000be <adc_read>:
}


uint8_t adc_read(adc_ch ch){
		volatile char *adc_ram = (char *) 0x1400; // Start address for the ADC
		adc_ram[0] = (uint8_t)ch;
  be:	80 93 00 14 	sts	0x1400, r24
		adc_conversion = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 46 02 	sts	0x0246, r24
		//wait for adc to finish conversion, interrupt based
		while (adc_conversion){
  c8:	80 91 46 02 	lds	r24, 0x0246
  cc:	81 11       	cpse	r24, r1
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <adc_read+0xa>
			//do nothing, wait for interrupt
		}
		return adc_ram[0];
  d0:	80 91 00 14 	lds	r24, 0x1400
}
  d4:	08 95       	ret

000000d6 <joy_init>:

static int16_t x_center;
static int16_t y_center;

void joy_init(void){
	x_center=adc_read(joy_x);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 45 02 	sts	0x0245, r25
  e4:	80 93 44 02 	sts	0x0244, r24
	y_center=adc_read(joy_y);
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 43 02 	sts	0x0243, r25
  f6:	80 93 42 02 	sts	0x0242, r24
  fa:	08 95       	ret

000000fc <joy_getPos>:
}

joy_pos_t joy_getPos(void){
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	int16_t pos_x=adc_read(joy_x);
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 108:	c8 2f       	mov	r28, r24
 10a:	d0 e0       	ldi	r29, 0x00	; 0
	int16_t pos_y=adc_read(joy_y);
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
	pos_x-=x_center;
 118:	80 91 44 02 	lds	r24, 0x0244
 11c:	90 91 45 02 	lds	r25, 0x0245
 120:	c8 1b       	sub	r28, r24
 122:	d9 0b       	sbc	r29, r25
	pos_y-=y_center;
	pos_x=(pos_x*100)/127;
 124:	44 e6       	ldi	r20, 0x64	; 100
 126:	4c 9f       	mul	r20, r28
 128:	c0 01       	movw	r24, r0
 12a:	4d 9f       	mul	r20, r29
 12c:	90 0d       	add	r25, r0
 12e:	11 24       	eor	r1, r1
 130:	2f e7       	ldi	r18, 0x7F	; 127
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	0e 94 ca 02 	call	0x594	; 0x594 <__divmodhi4>
 13a:	d6 2f       	mov	r29, r22
 13c:	c7 2f       	mov	r28, r23

joy_pos_t joy_getPos(void){
	int16_t pos_x=adc_read(joy_x);
	int16_t pos_y=adc_read(joy_y);
	pos_x-=x_center;
	pos_y-=y_center;
 13e:	80 91 42 02 	lds	r24, 0x0242
 142:	90 91 43 02 	lds	r25, 0x0243
 146:	e8 1b       	sub	r30, r24
 148:	f9 0b       	sbc	r31, r25
	pos_x=(pos_x*100)/127;
	pos_y=(pos_y*100)/127;
 14a:	4e 9f       	mul	r20, r30
 14c:	c0 01       	movw	r24, r0
 14e:	4f 9f       	mul	r20, r31
 150:	90 0d       	add	r25, r0
 152:	11 24       	eor	r1, r1
 154:	b9 01       	movw	r22, r18
 156:	0e 94 ca 02 	call	0x594	; 0x594 <__divmodhi4>
 15a:	8d 2f       	mov	r24, r29
 15c:	9c 2f       	mov	r25, r28
 15e:	8c 39       	cpi	r24, 0x9C	; 156
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	92 07       	cpc	r25, r18
 164:	14 f4       	brge	.+4      	; 0x16a <joy_getPos+0x6e>
 166:	8c e9       	ldi	r24, 0x9C	; 156
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	26 2f       	mov	r18, r22
 16c:	37 2f       	mov	r19, r23
 16e:	2c 39       	cpi	r18, 0x9C	; 156
 170:	4f ef       	ldi	r20, 0xFF	; 255
 172:	34 07       	cpc	r19, r20
 174:	14 f4       	brge	.+4      	; 0x17a <joy_getPos+0x7e>
 176:	2c e9       	ldi	r18, 0x9C	; 156
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	ac 01       	movw	r20, r24
 17c:	85 36       	cpi	r24, 0x65	; 101
 17e:	91 05       	cpc	r25, r1
 180:	14 f0       	brlt	.+4      	; 0x186 <joy_getPos+0x8a>
 182:	44 e6       	ldi	r20, 0x64	; 100
 184:	50 e0       	ldi	r21, 0x00	; 0
		pos_y=-100;
	}
	joy_pos_t pos_tmp;
	pos_tmp.x=pos_x;
	pos_tmp.y=pos_y;
	return pos_tmp;
 186:	ba 01       	movw	r22, r20
 188:	25 36       	cpi	r18, 0x65	; 101
 18a:	31 05       	cpc	r19, r1
 18c:	14 f0       	brlt	.+4      	; 0x192 <joy_getPos+0x96>
 18e:	24 e6       	ldi	r18, 0x64	; 100
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	c9 01       	movw	r24, r18
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <__vector_3>:


#define LED 0
#define SW1 1

ISR(INT2_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
	adc_conversion = 0;
 1a4:	10 92 46 02 	sts	0x0246, r1
}
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:



int main(void) {
	DDRB |= (1 << PB0);
 1b2:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
 1b4:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PB2);
 1b6:	ba 98       	cbi	0x17, 2	; 23
	MCUCR |= (1 << SRE);
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	85 bf       	out	0x35, r24	; 53
	uart_init();
 1be:	0e 94 be 02 	call	0x57c	; 0x57c <uart_init>
	printf("\f");
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <putchar>
	puts("UART\t\t initialized\r");
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	adc_init();
 1d2:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	puts("ADC\t\t initialized\r");
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	sei();
 1de:	78 94       	sei
	puts("Interrupts\t enabled\r");				
 1e0:	8d e2       	ldi	r24, 0x2D	; 45
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	joy_init();
 1e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <joy_init>
	puts("Joystick\t initialized\r");
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	//oled_init();
	puts("OLED\t\t initialized\r");
 1f4:	89 e5       	ldi	r24, 0x59	; 89
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	can_init(MODE_NORMAL);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <can_init>
	puts("SPI\t\t initialized");
 202:	8d e6       	ldi	r24, 0x6D	; 109
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	puts("MCP2515\t\t initialized");
 20a:	8f e7       	ldi	r24, 0x7F	; 127
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
	
	can_message_t* msg = malloc(sizeof(can_message_t));
 212:	8b e0       	ldi	r24, 0x0B	; 11
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <malloc>
 21a:	ec 01       	movw	r28, r24

	while(1) {
		PORTB ^= (1 << LED);
 21c:	66 24       	eor	r6, r6
 21e:	63 94       	inc	r6
		//TODO: add this print as function in joy.c
		printf("adc1: %i, adc2: %i, adc3: %i, adc4: %i\n", adc_read(0b00000100),adc_read(0b00000101), adc_read(0b00000110), adc_read(0b00000111));
 220:	0f 2e       	mov	r0, r31
 222:	f5 e9       	ldi	r31, 0x95	; 149
 224:	8f 2e       	mov	r8, r31
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	9f 2e       	mov	r9, r31
 22a:	f0 2d       	mov	r31, r0
		joy_pos_t pos = joy_getPos();
		printf("X:%4i Y:%4i\r",pos.x,pos.y);
 22c:	0f 2e       	mov	r0, r31
 22e:	fd eb       	ldi	r31, 0xBD	; 189
 230:	af 2e       	mov	r10, r31
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	bf 2e       	mov	r11, r31
 236:	f0 2d       	mov	r31, r0
		//oled_printf("Shahrukh Er Best");
		msg->id=5;
		msg->length=4;
 238:	68 94       	set
 23a:	77 24       	eor	r7, r7
 23c:	72 f8       	bld	r7, 2
		msg->data[0]=pos.x>>8;
		msg->data[1]=pos.x;
		msg->data[2]=pos.y>>8;
		msg->data[3]=pos.y;
		printf("sending:  ");
 23e:	0f 2e       	mov	r0, r31
 240:	fa ec       	ldi	r31, 0xCA	; 202
 242:	cf 2e       	mov	r12, r31
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	df 2e       	mov	r13, r31
 248:	f0 2d       	mov	r31, r0
	puts("MCP2515\t\t initialized");
	
	can_message_t* msg = malloc(sizeof(can_message_t));

	while(1) {
		PORTB ^= (1 << LED);
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	86 25       	eor	r24, r6
 24e:	88 bb       	out	0x18, r24	; 24
		//TODO: add this print as function in joy.c
		printf("adc1: %i, adc2: %i, adc3: %i, adc4: %i\n", adc_read(0b00000100),adc_read(0b00000101), adc_read(0b00000110), adc_read(0b00000111));
 250:	87 e0       	ldi	r24, 0x07	; 7
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 258:	f8 2e       	mov	r15, r24
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 262:	08 2f       	mov	r16, r24
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 26c:	18 2f       	mov	r17, r24
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 276:	1f 92       	push	r1
 278:	ff 92       	push	r15
 27a:	1f 92       	push	r1
 27c:	0f 93       	push	r16
 27e:	1f 92       	push	r1
 280:	1f 93       	push	r17
 282:	1f 92       	push	r1
 284:	8f 93       	push	r24
 286:	9f 92       	push	r9
 288:	8f 92       	push	r8
 28a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		joy_pos_t pos = joy_getPos();
 28e:	0e 94 7e 00 	call	0xfc	; 0xfc <joy_getPos>
 292:	f6 2e       	mov	r15, r22
 294:	e7 2e       	mov	r14, r23
 296:	18 2f       	mov	r17, r24
 298:	09 2f       	mov	r16, r25
		printf("X:%4i Y:%4i\r",pos.x,pos.y);
 29a:	9f 93       	push	r25
 29c:	8f 93       	push	r24
 29e:	7f 93       	push	r23
 2a0:	6f 93       	push	r22
 2a2:	bf 92       	push	r11
 2a4:	af 92       	push	r10
 2a6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		//oled_printf("Shahrukh Er Best");
		msg->id=5;
 2aa:	25 e0       	ldi	r18, 0x05	; 5
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	39 83       	std	Y+1, r19	; 0x01
 2b0:	28 83       	st	Y, r18
		msg->length=4;
 2b2:	7a 82       	std	Y+2, r7	; 0x02
		msg->data[0]=pos.x>>8;
 2b4:	eb 82       	std	Y+3, r14	; 0x03
		msg->data[1]=pos.x;
 2b6:	fc 82       	std	Y+4, r15	; 0x04
		msg->data[2]=pos.y>>8;
 2b8:	0d 83       	std	Y+5, r16	; 0x05
		msg->data[3]=pos.y;
 2ba:	1e 83       	std	Y+6, r17	; 0x06
		printf("sending:  ");
 2bc:	df 92       	push	r13
 2be:	cf 92       	push	r12
 2c0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		can_print(*msg);
 2c4:	e8 80       	ld	r14, Y
 2c6:	f9 80       	ldd	r15, Y+1	; 0x01
 2c8:	0a 81       	ldd	r16, Y+2	; 0x02
 2ca:	1b 81       	ldd	r17, Y+3	; 0x03
 2cc:	2c 81       	ldd	r18, Y+4	; 0x04
 2ce:	3d 81       	ldd	r19, Y+5	; 0x05
 2d0:	4e 81       	ldd	r20, Y+6	; 0x06
 2d2:	5f 81       	ldd	r21, Y+7	; 0x07
 2d4:	68 85       	ldd	r22, Y+8	; 0x08
 2d6:	79 85       	ldd	r23, Y+9	; 0x09
 2d8:	8a 85       	ldd	r24, Y+10	; 0x0a
 2da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <can_print>
		can_messageSend(msg,MCP_TXB1CTRL);
 2de:	60 e4       	ldi	r22, 0x40	; 64
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 92 01 	call	0x324	; 0x324 <can_messageSend>
 2e6:	8d b7       	in	r24, 0x3d	; 61
 2e8:	9e b7       	in	r25, 0x3e	; 62
 2ea:	42 96       	adiw	r24, 0x12	; 18
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	9e bf       	out	0x3e, r25	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	8d bf       	out	0x3d, r24	; 61
 2f6:	a9 cf       	rjmp	.-174    	; 0x24a <main+0x98>

000002f8 <can_init>:
#include "mcp2515defines.h"
#include <stdlib.h>
#include <string.h>


void can_init(uint8_t operationMode){
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
	mcp2515_init();
 2fc:	0e 94 97 02 	call	0x52e	; 0x52e <mcp2515_init>
	mcp2515_bitModify(MCP_RXB0CTRL, MCP_FILTER_MASK, 0xff); //turn off filter
 300:	4f ef       	ldi	r20, 0xFF	; 255
 302:	60 e6       	ldi	r22, 0x60	; 96
 304:	80 e6       	ldi	r24, 0x60	; 96
 306:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp2515_bitModify>
	mcp2515_bitModify(MCP_RXB1CTRL, MCP_FILTER_MASK, 0xff); //turn off filter
 30a:	4f ef       	ldi	r20, 0xFF	; 255
 30c:	60 e6       	ldi	r22, 0x60	; 96
 30e:	80 e7       	ldi	r24, 0x70	; 112
 310:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp2515_bitModify>
	mcp2515_bitModify(MCP_CANCTRL, MODE_MASK, operationMode);
 314:	4c 2f       	mov	r20, r28
 316:	60 ee       	ldi	r22, 0xE0	; 224
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp2515_bitModify>
	DDRD &= ~(1<<PD2); //for can_pollInt()
 31e:	8a 98       	cbi	0x11, 2	; 17
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <can_messageSend>:

//TODO: Should find a empty buffer by itself. No need for bufferselect. Should rather have priorities
void can_messageSend(can_message_t* msg,uint8_t bufferSelect){
 324:	ff 92       	push	r15
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ec 01       	movw	r28, r24
 330:	06 2f       	mov	r16, r22
	//transelate bufferSelect to bufferControl
	uint8_t bufferControl;
	if (bufferSelect==MCP_TXB0CTRL){
 332:	60 33       	cpi	r22, 0x30	; 48
 334:	51 f0       	breq	.+20     	; 0x34a <can_messageSend+0x26>
		bufferControl=MCP_RTS_TX0;
	}
	else if (bufferSelect==MCP_TXB1CTRL){
 336:	60 34       	cpi	r22, 0x40	; 64
 338:	69 f0       	breq	.+26     	; 0x354 <can_messageSend+0x30>
		bufferControl=MCP_RTS_TX1;
	}
	else if (bufferSelect==MCP_TXB2CTRL){
 33a:	60 35       	cpi	r22, 0x50	; 80
 33c:	09 f0       	breq	.+2      	; 0x340 <can_messageSend+0x1c>
 33e:	42 c0       	rjmp	.+132    	; 0x3c4 <can_messageSend+0xa0>
		bufferControl=MCP_RTS_TX2;
 340:	0f 2e       	mov	r0, r31
 342:	f4 e8       	ldi	r31, 0x84	; 132
 344:	ff 2e       	mov	r15, r31
 346:	f0 2d       	mov	r31, r0
 348:	09 c0       	rjmp	.+18     	; 0x35c <can_messageSend+0x38>
//TODO: Should find a empty buffer by itself. No need for bufferselect. Should rather have priorities
void can_messageSend(can_message_t* msg,uint8_t bufferSelect){
	//transelate bufferSelect to bufferControl
	uint8_t bufferControl;
	if (bufferSelect==MCP_TXB0CTRL){
		bufferControl=MCP_RTS_TX0;
 34a:	0f 2e       	mov	r0, r31
 34c:	f1 e8       	ldi	r31, 0x81	; 129
 34e:	ff 2e       	mov	r15, r31
 350:	f0 2d       	mov	r31, r0
 352:	04 c0       	rjmp	.+8      	; 0x35c <can_messageSend+0x38>
	}
	else if (bufferSelect==MCP_TXB1CTRL){
		bufferControl=MCP_RTS_TX1;
 354:	0f 2e       	mov	r0, r31
 356:	f2 e8       	ldi	r31, 0x82	; 130
 358:	ff 2e       	mov	r15, r31
 35a:	f0 2d       	mov	r31, r0
		return; //if invalid bufferselect
	}

	//MCP_TXBnCTRL - Control Registers
	//wait for the previous message to complete sending, TXREQ - Message transmit request bit. high if buffer is already waiting to send
	while(mcp2515_read(bufferSelect) & (1 << MCP_TXREQ)){}
 35c:	80 2f       	mov	r24, r16
 35e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_read>
 362:	83 fd       	sbrc	r24, 3
 364:	fb cf       	rjmp	.-10     	; 0x35c <can_messageSend+0x38>
	
	//MCP_TXBnSIDH & MCP_TXBnSIDL- ID registers
	//sending the id of the message, using standard mode, so no need to write extended ids
	mcp2515_write(bufferSelect+1, ((msg->id>>3) & MCP_IDH_MASK)); //16 to 10bit, 8 msb
 366:	28 81       	ld	r18, Y
 368:	39 81       	ldd	r19, Y+1	; 0x01
 36a:	b9 01       	movw	r22, r18
 36c:	76 95       	lsr	r23
 36e:	67 95       	ror	r22
 370:	76 95       	lsr	r23
 372:	67 95       	ror	r22
 374:	76 95       	lsr	r23
 376:	67 95       	ror	r22
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 0f       	add	r24, r16
 37c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <mcp2515_write>
	mcp2515_write(bufferSelect+2, ((msg->id<<5) & MCP_IDL_MASK)); //16 to 10bit, 3 lsb 
 380:	68 81       	ld	r22, Y
 382:	62 95       	swap	r22
 384:	66 0f       	add	r22, r22
 386:	60 7e       	andi	r22, 0xE0	; 224
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	80 0f       	add	r24, r16
 38c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <mcp2515_write>
	
	//TXBnDLC - Data length code registers
	//sending the msg
	mcp2515_write(bufferSelect+5, (msg->length) & MCP_DLC_MASK); //8 to 4bit, lsb
 390:	6a 81       	ldd	r22, Y+2	; 0x02
 392:	6f 70       	andi	r22, 0x0F	; 15
 394:	85 e0       	ldi	r24, 0x05	; 5
 396:	80 0f       	add	r24, r16
 398:	0e 94 62 02 	call	0x4c4	; 0x4c4 <mcp2515_write>
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	99 23       	and	r25, r25
 3a0:	71 f0       	breq	.+28     	; 0x3be <can_messageSend+0x9a>
 3a2:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
 3a4:	0a 5f       	subi	r16, 0xFA	; 250
 3a6:	fe 01       	movw	r30, r28
 3a8:	e1 0f       	add	r30, r17
 3aa:	f1 1d       	adc	r31, r1
 3ac:	63 81       	ldd	r22, Z+3	; 0x03
 3ae:	80 2f       	mov	r24, r16
 3b0:	81 0f       	add	r24, r17
 3b2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <mcp2515_write>
	
	//TXBnDLC - Data length code registers
	//sending the msg
	mcp2515_write(bufferSelect+5, (msg->length) & MCP_DLC_MASK); //8 to 4bit, lsb
	//TXBnDm - Data registers
	for (uint8_t i = 0; i < msg->length; i++){
 3b6:	1f 5f       	subi	r17, 0xFF	; 255
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	19 17       	cp	r17, r25
 3bc:	a0 f3       	brcs	.-24     	; 0x3a6 <can_messageSend+0x82>
		mcp2515_write(bufferSelect+6+i, msg->data[i]);
	}
	mcp2515_requestToSend(bufferControl);
 3be:	8f 2d       	mov	r24, r15
 3c0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mcp2515_requestToSend>
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	ff 90       	pop	r15
 3ce:	08 95       	ret

000003d0 <can_print>:
		mcp2515_bitModify(MCP_CANINTF, MCP_RX1IF, 0x00); //unset flag
		return MCP_RXB1CTRL;
	}		
}

void can_print(can_message_t m){ //for debugging
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	2b 97       	sbiw	r28, 0x0b	; 11
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	e9 82       	std	Y+1, r14	; 0x01
 3f2:	fa 82       	std	Y+2, r15	; 0x02
 3f4:	c0 2e       	mov	r12, r16
 3f6:	0b 83       	std	Y+3, r16	; 0x03
 3f8:	1c 83       	std	Y+4, r17	; 0x04
 3fa:	2d 83       	std	Y+5, r18	; 0x05
 3fc:	3e 83       	std	Y+6, r19	; 0x06
 3fe:	4f 83       	std	Y+7, r20	; 0x07
 400:	58 87       	std	Y+8, r21	; 0x08
 402:	69 87       	std	Y+9, r22	; 0x09
 404:	7a 87       	std	Y+10, r23	; 0x0a
 406:	8b 87       	std	Y+11, r24	; 0x0b
	printf("can_message_t(id:%d, len:%d, data:{", m.id, m.length);
 408:	1f 92       	push	r1
 40a:	0f 93       	push	r16
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	8f 93       	push	r24
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	8f 93       	push	r24
 414:	85 ed       	ldi	r24, 0xD5	; 213
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	9f 93       	push	r25
 41a:	8f 93       	push	r24
 41c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
	if(m.length){
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	00 23       	and	r16, r16
 42e:	41 f1       	breq	.+80     	; 0x480 <can_print+0xb0>
		printf("%d", m.data[0]);
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	1f 92       	push	r1
 434:	8f 93       	push	r24
 436:	8b ef       	ldi	r24, 0xFB	; 251
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	9f 93       	push	r25
 43c:	8f 93       	push	r24
 43e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
	}
	for(uint8_t i = 1; i < m.length; i++){
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 17       	cp	r24, r16
 44e:	c0 f4       	brcc	.+48     	; 0x480 <can_print+0xb0>
 450:	7e 01       	movw	r14, r28
 452:	e5 e0       	ldi	r30, 0x05	; 5
 454:	ee 0e       	add	r14, r30
 456:	f1 1c       	adc	r15, r1
 458:	dd 24       	eor	r13, r13
 45a:	d3 94       	inc	r13
		printf(", %d", m.data[i]);
 45c:	09 ef       	ldi	r16, 0xF9	; 249
 45e:	11 e0       	ldi	r17, 0x01	; 1
 460:	f7 01       	movw	r30, r14
 462:	81 91       	ld	r24, Z+
 464:	7f 01       	movw	r14, r30
 466:	1f 92       	push	r1
 468:	8f 93       	push	r24
 46a:	1f 93       	push	r17
 46c:	0f 93       	push	r16
 46e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
void can_print(can_message_t m){ //for debugging
	printf("can_message_t(id:%d, len:%d, data:{", m.id, m.length);
	if(m.length){
		printf("%d", m.data[0]);
	}
	for(uint8_t i = 1; i < m.length; i++){
 472:	d3 94       	inc	r13
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	dc 10       	cpse	r13, r12
 47e:	f0 cf       	rjmp	.-32     	; 0x460 <can_print+0x90>
		printf(", %d", m.data[i]);
	}
	printf("})\n");
 480:	8e ef       	ldi	r24, 0xFE	; 254
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
}
 488:	2b 96       	adiw	r28, 0x0b	; 11
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	df 90       	pop	r13
 4a2:	cf 90       	pop	r12
 4a4:	08 95       	ret

000004a6 <mcp2515_read>:
			value= 1; //error code
		}
	}
}

uint8_t mcp2515_read(uint8_t address){
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
	uint8_t result;
	PORTB &= ~(1 << MCP2515_CS); //select
 4aa:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_READ);
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	spi_transmit(address);
 4b2:	8c 2f       	mov	r24, r28
 4b4:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	result=spi_transmit(0x00);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 4be:	c4 9a       	sbi	0x18, 4	; 24
	return result;
}
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data){
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	d8 2f       	mov	r29, r24
 4ca:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << MCP2515_CS); //select
 4cc:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_WRITE);
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	spi_transmit(address);
 4d4:	8d 2f       	mov	r24, r29
 4d6:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	spi_transmit(data);
 4da:	8c 2f       	mov	r24, r28
 4dc:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 4e0:	c4 9a       	sbi	0x18, 4	; 24
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <mcp2515_requestToSend>:

void mcp2515_requestToSend(uint8_t bufferSelect){
	PORTB &= ~(1 << MCP2515_CS); //select
 4e8:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(bufferSelect);
 4ea:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 4ee:	c4 9a       	sbi	0x18, 4	; 24
 4f0:	08 95       	ret

000004f2 <mcp2515_bitModify>:
}

void mcp2515_bitModify(uint8_t address, uint8_t mask, uint8_t data){
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	18 2f       	mov	r17, r24
 4fa:	d6 2f       	mov	r29, r22
 4fc:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << MCP2515_CS); //select
 4fe:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_BITMOD);
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	spi_transmit(address);
 506:	81 2f       	mov	r24, r17
 508:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	spi_transmit(mask);
 50c:	8d 2f       	mov	r24, r29
 50e:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	spi_transmit(data);
 512:	8c 2f       	mov	r24, r28
 514:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 518:	c4 9a       	sbi	0x18, 4	; 24
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	08 95       	ret

00000522 <mcp2515_reset>:
void mcp2515_reset(void){
	PORTB &= ~(1 << MCP2515_CS); //select
 522:	c4 98       	cbi	0x18, 4	; 24
	spi_transmit(MCP_RESET);
 524:	80 ec       	ldi	r24, 0xC0	; 192
 526:	0e 94 b1 02 	call	0x562	; 0x562 <spi_transmit>
	PORTB |= (1 << MCP2515_CS); //deselect
 52a:	c4 9a       	sbi	0x18, 4	; 24
 52c:	08 95       	ret

0000052e <mcp2515_init>:
#include <stdlib.h>
#include <stdio.h>

void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
 52e:	0e 94 aa 02 	call	0x554	; 0x554 <spi_init>
	mcp2515_reset();
 532:	0e 94 91 02 	call	0x522	; 0x522 <mcp2515_reset>
	//selftest, will reset chip until it is in configuration mode
	while(!value){
		value=mcp2515_read(MCP_CANSTAT);
 536:	8e e0       	ldi	r24, 0x0E	; 14
 538:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_read>
		if ((value & MODE_MASK) != MODE_CONFIG) {
 53c:	98 2f       	mov	r25, r24
 53e:	90 7e       	andi	r25, 0xE0	; 224
 540:	90 38       	cpi	r25, 0x80	; 128
 542:	29 f0       	breq	.+10     	; 0x54e <mcp2515_init+0x20>
			puts("ERROR! ERROR! MCP2515 is NOT in configuration mode after reset!\r");
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	0e 94 7f 04 	call	0x8fe	; 0x8fe <puts>
 54c:	08 95       	ret
void mcp2515_init(void){
	uint8_t value=0;
	spi_init();
	mcp2515_reset();
	//selftest, will reset chip until it is in configuration mode
	while(!value){
 54e:	88 23       	and	r24, r24
 550:	91 f3       	breq	.-28     	; 0x536 <mcp2515_init+0x8>
 552:	08 95       	ret

00000554 <spi_init>:
#include <avr/io.h>


void spi_init(void){
	//SCK UT, MISO IN, MOSI UT, SS UT
	DDRB |= (1 << PB5) | (1<<PB7) | (1 << PB4);
 554:	87 b3       	in	r24, 0x17	; 23
 556:	80 6b       	ori	r24, 0xB0	; 176
 558:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
 55a:	be 98       	cbi	0x17, 6	; 23
	// NOT intterupt driven
	// mcp2515, max frequency is 10mhz
	// with external clock, F_CPU is defined to 4,9mhz. we divide by 4, so our sck is 1,2mhz
	SPCR= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 55c:	81 e5       	ldi	r24, 0x51	; 81
 55e:	8d b9       	out	0x0d, r24	; 13
 560:	08 95       	ret

00000562 <spi_transmit>:
}



uint8_t spi_transmit(char data){
	SPDR = data;
 562:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 564:	77 9b       	sbis	0x0e, 7	; 14
 566:	fe cf       	rjmp	.-4      	; 0x564 <spi_transmit+0x2>
	return SPDR;
 568:	8f b1       	in	r24, 0x0f	; 15
}
 56a:	08 95       	ret

0000056c <uart_putChar>:
	fdevopen(uart_putChar, uart_getChar);
}


void uart_putChar(unsigned char c){
	while (!(UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
 56c:	5d 9b       	sbis	0x0b, 5	; 11
 56e:	fe cf       	rjmp	.-4      	; 0x56c <uart_putChar>
	UDR0 = c; // Put data in to buffer
 570:	8c b9       	out	0x0c, r24	; 12
 572:	08 95       	ret

00000574 <uart_getChar>:
}


unsigned char uart_getChar(){
	
	while((UCSR0A) & (1<<UDRE0)); //Wait for "full" transmit buffer
 574:	5d 99       	sbic	0x0b, 5	; 11
 576:	fe cf       	rjmp	.-4      	; 0x574 <uart_getChar>
	return UDR0;
 578:	8c b1       	in	r24, 0x0c	; 12
}
 57a:	08 95       	ret

0000057c <uart_init>:
#include "uart.h"
#include <stdio.h>

void uart_init(void){
	//UBRR0L = 15;	// baudrate 192000hz
	UBRR0L = 0b00001111;
 57c:	8f e0       	ldi	r24, 0x0F	; 15
 57e:	89 b9       	out	0x09, r24	; 9
	
	//Character size
	//UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
	//UCSR0B &= ~(1 << UCSZ02);
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 580:	8a b1       	in	r24, 0x0a	; 10
 582:	88 61       	ori	r24, 0x18	; 24
 584:	8a b9       	out	0x0a, r24	; 10
	
	//for puts and printf
	fdevopen(uart_putChar, uart_getChar);
 586:	6a eb       	ldi	r22, 0xBA	; 186
 588:	72 e0       	ldi	r23, 0x02	; 2
 58a:	86 eb       	ldi	r24, 0xB6	; 182
 58c:	92 e0       	ldi	r25, 0x02	; 2
 58e:	0e 94 19 04 	call	0x832	; 0x832 <fdevopen>
 592:	08 95       	ret

00000594 <__divmodhi4>:
 594:	97 fb       	bst	r25, 7
 596:	07 2e       	mov	r0, r23
 598:	16 f4       	brtc	.+4      	; 0x59e <__divmodhi4+0xa>
 59a:	00 94       	com	r0
 59c:	07 d0       	rcall	.+14     	; 0x5ac <__divmodhi4_neg1>
 59e:	77 fd       	sbrc	r23, 7
 5a0:	09 d0       	rcall	.+18     	; 0x5b4 <__divmodhi4_neg2>
 5a2:	0e 94 de 02 	call	0x5bc	; 0x5bc <__udivmodhi4>
 5a6:	07 fc       	sbrc	r0, 7
 5a8:	05 d0       	rcall	.+10     	; 0x5b4 <__divmodhi4_neg2>
 5aa:	3e f4       	brtc	.+14     	; 0x5ba <__divmodhi4_exit>

000005ac <__divmodhi4_neg1>:
 5ac:	90 95       	com	r25
 5ae:	81 95       	neg	r24
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	08 95       	ret

000005b4 <__divmodhi4_neg2>:
 5b4:	70 95       	com	r23
 5b6:	61 95       	neg	r22
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ba <__divmodhi4_exit>:
 5ba:	08 95       	ret

000005bc <__udivmodhi4>:
 5bc:	aa 1b       	sub	r26, r26
 5be:	bb 1b       	sub	r27, r27
 5c0:	51 e1       	ldi	r21, 0x11	; 17
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <__udivmodhi4_ep>

000005c4 <__udivmodhi4_loop>:
 5c4:	aa 1f       	adc	r26, r26
 5c6:	bb 1f       	adc	r27, r27
 5c8:	a6 17       	cp	r26, r22
 5ca:	b7 07       	cpc	r27, r23
 5cc:	10 f0       	brcs	.+4      	; 0x5d2 <__udivmodhi4_ep>
 5ce:	a6 1b       	sub	r26, r22
 5d0:	b7 0b       	sbc	r27, r23

000005d2 <__udivmodhi4_ep>:
 5d2:	88 1f       	adc	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	5a 95       	dec	r21
 5d8:	a9 f7       	brne	.-22     	; 0x5c4 <__udivmodhi4_loop>
 5da:	80 95       	com	r24
 5dc:	90 95       	com	r25
 5de:	bc 01       	movw	r22, r24
 5e0:	cd 01       	movw	r24, r26
 5e2:	08 95       	ret

000005e4 <malloc>:
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	82 30       	cpi	r24, 0x02	; 2
 5ea:	91 05       	cpc	r25, r1
 5ec:	10 f4       	brcc	.+4      	; 0x5f2 <malloc+0xe>
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	e0 91 49 02 	lds	r30, 0x0249
 5f6:	f0 91 4a 02 	lds	r31, 0x024A
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	a0 e0       	ldi	r26, 0x00	; 0
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	30 97       	sbiw	r30, 0x00	; 0
 604:	39 f1       	breq	.+78     	; 0x654 <malloc+0x70>
 606:	40 81       	ld	r20, Z
 608:	51 81       	ldd	r21, Z+1	; 0x01
 60a:	48 17       	cp	r20, r24
 60c:	59 07       	cpc	r21, r25
 60e:	b8 f0       	brcs	.+46     	; 0x63e <malloc+0x5a>
 610:	48 17       	cp	r20, r24
 612:	59 07       	cpc	r21, r25
 614:	71 f4       	brne	.+28     	; 0x632 <malloc+0x4e>
 616:	82 81       	ldd	r24, Z+2	; 0x02
 618:	93 81       	ldd	r25, Z+3	; 0x03
 61a:	10 97       	sbiw	r26, 0x00	; 0
 61c:	29 f0       	breq	.+10     	; 0x628 <malloc+0x44>
 61e:	13 96       	adiw	r26, 0x03	; 3
 620:	9c 93       	st	X, r25
 622:	8e 93       	st	-X, r24
 624:	12 97       	sbiw	r26, 0x02	; 2
 626:	2c c0       	rjmp	.+88     	; 0x680 <malloc+0x9c>
 628:	90 93 4a 02 	sts	0x024A, r25
 62c:	80 93 49 02 	sts	0x0249, r24
 630:	27 c0       	rjmp	.+78     	; 0x680 <malloc+0x9c>
 632:	21 15       	cp	r18, r1
 634:	31 05       	cpc	r19, r1
 636:	31 f0       	breq	.+12     	; 0x644 <malloc+0x60>
 638:	42 17       	cp	r20, r18
 63a:	53 07       	cpc	r21, r19
 63c:	18 f0       	brcs	.+6      	; 0x644 <malloc+0x60>
 63e:	a9 01       	movw	r20, r18
 640:	db 01       	movw	r26, r22
 642:	01 c0       	rjmp	.+2      	; 0x646 <malloc+0x62>
 644:	ef 01       	movw	r28, r30
 646:	9a 01       	movw	r18, r20
 648:	bd 01       	movw	r22, r26
 64a:	df 01       	movw	r26, r30
 64c:	02 80       	ldd	r0, Z+2	; 0x02
 64e:	f3 81       	ldd	r31, Z+3	; 0x03
 650:	e0 2d       	mov	r30, r0
 652:	d7 cf       	rjmp	.-82     	; 0x602 <malloc+0x1e>
 654:	21 15       	cp	r18, r1
 656:	31 05       	cpc	r19, r1
 658:	f9 f0       	breq	.+62     	; 0x698 <malloc+0xb4>
 65a:	28 1b       	sub	r18, r24
 65c:	39 0b       	sbc	r19, r25
 65e:	24 30       	cpi	r18, 0x04	; 4
 660:	31 05       	cpc	r19, r1
 662:	80 f4       	brcc	.+32     	; 0x684 <malloc+0xa0>
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	9b 81       	ldd	r25, Y+3	; 0x03
 668:	61 15       	cp	r22, r1
 66a:	71 05       	cpc	r23, r1
 66c:	21 f0       	breq	.+8      	; 0x676 <malloc+0x92>
 66e:	fb 01       	movw	r30, r22
 670:	93 83       	std	Z+3, r25	; 0x03
 672:	82 83       	std	Z+2, r24	; 0x02
 674:	04 c0       	rjmp	.+8      	; 0x67e <malloc+0x9a>
 676:	90 93 4a 02 	sts	0x024A, r25
 67a:	80 93 49 02 	sts	0x0249, r24
 67e:	fe 01       	movw	r30, r28
 680:	32 96       	adiw	r30, 0x02	; 2
 682:	44 c0       	rjmp	.+136    	; 0x70c <malloc+0x128>
 684:	fe 01       	movw	r30, r28
 686:	e2 0f       	add	r30, r18
 688:	f3 1f       	adc	r31, r19
 68a:	81 93       	st	Z+, r24
 68c:	91 93       	st	Z+, r25
 68e:	22 50       	subi	r18, 0x02	; 2
 690:	31 09       	sbc	r19, r1
 692:	39 83       	std	Y+1, r19	; 0x01
 694:	28 83       	st	Y, r18
 696:	3a c0       	rjmp	.+116    	; 0x70c <malloc+0x128>
 698:	20 91 47 02 	lds	r18, 0x0247
 69c:	30 91 48 02 	lds	r19, 0x0248
 6a0:	23 2b       	or	r18, r19
 6a2:	41 f4       	brne	.+16     	; 0x6b4 <malloc+0xd0>
 6a4:	20 91 02 01 	lds	r18, 0x0102
 6a8:	30 91 03 01 	lds	r19, 0x0103
 6ac:	30 93 48 02 	sts	0x0248, r19
 6b0:	20 93 47 02 	sts	0x0247, r18
 6b4:	20 91 00 01 	lds	r18, 0x0100
 6b8:	30 91 01 01 	lds	r19, 0x0101
 6bc:	21 15       	cp	r18, r1
 6be:	31 05       	cpc	r19, r1
 6c0:	41 f4       	brne	.+16     	; 0x6d2 <malloc+0xee>
 6c2:	2d b7       	in	r18, 0x3d	; 61
 6c4:	3e b7       	in	r19, 0x3e	; 62
 6c6:	40 91 04 01 	lds	r20, 0x0104
 6ca:	50 91 05 01 	lds	r21, 0x0105
 6ce:	24 1b       	sub	r18, r20
 6d0:	35 0b       	sbc	r19, r21
 6d2:	e0 91 47 02 	lds	r30, 0x0247
 6d6:	f0 91 48 02 	lds	r31, 0x0248
 6da:	e2 17       	cp	r30, r18
 6dc:	f3 07       	cpc	r31, r19
 6de:	a0 f4       	brcc	.+40     	; 0x708 <malloc+0x124>
 6e0:	2e 1b       	sub	r18, r30
 6e2:	3f 0b       	sbc	r19, r31
 6e4:	28 17       	cp	r18, r24
 6e6:	39 07       	cpc	r19, r25
 6e8:	78 f0       	brcs	.+30     	; 0x708 <malloc+0x124>
 6ea:	ac 01       	movw	r20, r24
 6ec:	4e 5f       	subi	r20, 0xFE	; 254
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	24 17       	cp	r18, r20
 6f2:	35 07       	cpc	r19, r21
 6f4:	48 f0       	brcs	.+18     	; 0x708 <malloc+0x124>
 6f6:	4e 0f       	add	r20, r30
 6f8:	5f 1f       	adc	r21, r31
 6fa:	50 93 48 02 	sts	0x0248, r21
 6fe:	40 93 47 02 	sts	0x0247, r20
 702:	81 93       	st	Z+, r24
 704:	91 93       	st	Z+, r25
 706:	02 c0       	rjmp	.+4      	; 0x70c <malloc+0x128>
 708:	e0 e0       	ldi	r30, 0x00	; 0
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	cf 01       	movw	r24, r30
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <free>:
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	09 f4       	brne	.+2      	; 0x71e <free+0xa>
 71c:	87 c0       	rjmp	.+270    	; 0x82c <free+0x118>
 71e:	fc 01       	movw	r30, r24
 720:	32 97       	sbiw	r30, 0x02	; 2
 722:	13 82       	std	Z+3, r1	; 0x03
 724:	12 82       	std	Z+2, r1	; 0x02
 726:	c0 91 49 02 	lds	r28, 0x0249
 72a:	d0 91 4a 02 	lds	r29, 0x024A
 72e:	20 97       	sbiw	r28, 0x00	; 0
 730:	81 f4       	brne	.+32     	; 0x752 <free+0x3e>
 732:	20 81       	ld	r18, Z
 734:	31 81       	ldd	r19, Z+1	; 0x01
 736:	28 0f       	add	r18, r24
 738:	39 1f       	adc	r19, r25
 73a:	80 91 47 02 	lds	r24, 0x0247
 73e:	90 91 48 02 	lds	r25, 0x0248
 742:	82 17       	cp	r24, r18
 744:	93 07       	cpc	r25, r19
 746:	79 f5       	brne	.+94     	; 0x7a6 <free+0x92>
 748:	f0 93 48 02 	sts	0x0248, r31
 74c:	e0 93 47 02 	sts	0x0247, r30
 750:	6d c0       	rjmp	.+218    	; 0x82c <free+0x118>
 752:	de 01       	movw	r26, r28
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	ae 17       	cp	r26, r30
 75a:	bf 07       	cpc	r27, r31
 75c:	50 f4       	brcc	.+20     	; 0x772 <free+0x5e>
 75e:	12 96       	adiw	r26, 0x02	; 2
 760:	4d 91       	ld	r20, X+
 762:	5c 91       	ld	r21, X
 764:	13 97       	sbiw	r26, 0x03	; 3
 766:	9d 01       	movw	r18, r26
 768:	41 15       	cp	r20, r1
 76a:	51 05       	cpc	r21, r1
 76c:	09 f1       	breq	.+66     	; 0x7b0 <free+0x9c>
 76e:	da 01       	movw	r26, r20
 770:	f3 cf       	rjmp	.-26     	; 0x758 <free+0x44>
 772:	b3 83       	std	Z+3, r27	; 0x03
 774:	a2 83       	std	Z+2, r26	; 0x02
 776:	40 81       	ld	r20, Z
 778:	51 81       	ldd	r21, Z+1	; 0x01
 77a:	84 0f       	add	r24, r20
 77c:	95 1f       	adc	r25, r21
 77e:	8a 17       	cp	r24, r26
 780:	9b 07       	cpc	r25, r27
 782:	71 f4       	brne	.+28     	; 0x7a0 <free+0x8c>
 784:	8d 91       	ld	r24, X+
 786:	9c 91       	ld	r25, X
 788:	11 97       	sbiw	r26, 0x01	; 1
 78a:	84 0f       	add	r24, r20
 78c:	95 1f       	adc	r25, r21
 78e:	02 96       	adiw	r24, 0x02	; 2
 790:	91 83       	std	Z+1, r25	; 0x01
 792:	80 83       	st	Z, r24
 794:	12 96       	adiw	r26, 0x02	; 2
 796:	8d 91       	ld	r24, X+
 798:	9c 91       	ld	r25, X
 79a:	13 97       	sbiw	r26, 0x03	; 3
 79c:	93 83       	std	Z+3, r25	; 0x03
 79e:	82 83       	std	Z+2, r24	; 0x02
 7a0:	21 15       	cp	r18, r1
 7a2:	31 05       	cpc	r19, r1
 7a4:	29 f4       	brne	.+10     	; 0x7b0 <free+0x9c>
 7a6:	f0 93 4a 02 	sts	0x024A, r31
 7aa:	e0 93 49 02 	sts	0x0249, r30
 7ae:	3e c0       	rjmp	.+124    	; 0x82c <free+0x118>
 7b0:	d9 01       	movw	r26, r18
 7b2:	13 96       	adiw	r26, 0x03	; 3
 7b4:	fc 93       	st	X, r31
 7b6:	ee 93       	st	-X, r30
 7b8:	12 97       	sbiw	r26, 0x02	; 2
 7ba:	4d 91       	ld	r20, X+
 7bc:	5d 91       	ld	r21, X+
 7be:	a4 0f       	add	r26, r20
 7c0:	b5 1f       	adc	r27, r21
 7c2:	ea 17       	cp	r30, r26
 7c4:	fb 07       	cpc	r31, r27
 7c6:	79 f4       	brne	.+30     	; 0x7e6 <free+0xd2>
 7c8:	80 81       	ld	r24, Z
 7ca:	91 81       	ldd	r25, Z+1	; 0x01
 7cc:	84 0f       	add	r24, r20
 7ce:	95 1f       	adc	r25, r21
 7d0:	02 96       	adiw	r24, 0x02	; 2
 7d2:	d9 01       	movw	r26, r18
 7d4:	11 96       	adiw	r26, 0x01	; 1
 7d6:	9c 93       	st	X, r25
 7d8:	8e 93       	st	-X, r24
 7da:	82 81       	ldd	r24, Z+2	; 0x02
 7dc:	93 81       	ldd	r25, Z+3	; 0x03
 7de:	13 96       	adiw	r26, 0x03	; 3
 7e0:	9c 93       	st	X, r25
 7e2:	8e 93       	st	-X, r24
 7e4:	12 97       	sbiw	r26, 0x02	; 2
 7e6:	e0 e0       	ldi	r30, 0x00	; 0
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	9b 81       	ldd	r25, Y+3	; 0x03
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <free+0xe4>
 7f2:	fe 01       	movw	r30, r28
 7f4:	ec 01       	movw	r28, r24
 7f6:	f9 cf       	rjmp	.-14     	; 0x7ea <free+0xd6>
 7f8:	ce 01       	movw	r24, r28
 7fa:	02 96       	adiw	r24, 0x02	; 2
 7fc:	28 81       	ld	r18, Y
 7fe:	39 81       	ldd	r19, Y+1	; 0x01
 800:	82 0f       	add	r24, r18
 802:	93 1f       	adc	r25, r19
 804:	20 91 47 02 	lds	r18, 0x0247
 808:	30 91 48 02 	lds	r19, 0x0248
 80c:	28 17       	cp	r18, r24
 80e:	39 07       	cpc	r19, r25
 810:	69 f4       	brne	.+26     	; 0x82c <free+0x118>
 812:	30 97       	sbiw	r30, 0x00	; 0
 814:	29 f4       	brne	.+10     	; 0x820 <free+0x10c>
 816:	10 92 4a 02 	sts	0x024A, r1
 81a:	10 92 49 02 	sts	0x0249, r1
 81e:	02 c0       	rjmp	.+4      	; 0x824 <free+0x110>
 820:	13 82       	std	Z+3, r1	; 0x03
 822:	12 82       	std	Z+2, r1	; 0x02
 824:	d0 93 48 02 	sts	0x0248, r29
 828:	c0 93 47 02 	sts	0x0247, r28
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	08 95       	ret

00000832 <fdevopen>:
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	ec 01       	movw	r28, r24
 83c:	8b 01       	movw	r16, r22
 83e:	00 97       	sbiw	r24, 0x00	; 0
 840:	31 f4       	brne	.+12     	; 0x84e <fdevopen+0x1c>
 842:	61 15       	cp	r22, r1
 844:	71 05       	cpc	r23, r1
 846:	19 f4       	brne	.+6      	; 0x84e <fdevopen+0x1c>
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	38 c0       	rjmp	.+112    	; 0x8be <fdevopen+0x8c>
 84e:	6e e0       	ldi	r22, 0x0E	; 14
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 7e 06 	call	0xcfc	; 0xcfc <calloc>
 85a:	fc 01       	movw	r30, r24
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	a1 f3       	breq	.-24     	; 0x848 <fdevopen+0x16>
 860:	80 e8       	ldi	r24, 0x80	; 128
 862:	83 83       	std	Z+3, r24	; 0x03
 864:	01 15       	cp	r16, r1
 866:	11 05       	cpc	r17, r1
 868:	71 f0       	breq	.+28     	; 0x886 <fdevopen+0x54>
 86a:	13 87       	std	Z+11, r17	; 0x0b
 86c:	02 87       	std	Z+10, r16	; 0x0a
 86e:	81 e8       	ldi	r24, 0x81	; 129
 870:	83 83       	std	Z+3, r24	; 0x03
 872:	80 91 4b 02 	lds	r24, 0x024B
 876:	90 91 4c 02 	lds	r25, 0x024C
 87a:	89 2b       	or	r24, r25
 87c:	21 f4       	brne	.+8      	; 0x886 <fdevopen+0x54>
 87e:	f0 93 4c 02 	sts	0x024C, r31
 882:	e0 93 4b 02 	sts	0x024B, r30
 886:	20 97       	sbiw	r28, 0x00	; 0
 888:	c9 f0       	breq	.+50     	; 0x8bc <fdevopen+0x8a>
 88a:	d1 87       	std	Z+9, r29	; 0x09
 88c:	c0 87       	std	Z+8, r28	; 0x08
 88e:	83 81       	ldd	r24, Z+3	; 0x03
 890:	82 60       	ori	r24, 0x02	; 2
 892:	83 83       	std	Z+3, r24	; 0x03
 894:	80 91 4d 02 	lds	r24, 0x024D
 898:	90 91 4e 02 	lds	r25, 0x024E
 89c:	89 2b       	or	r24, r25
 89e:	71 f4       	brne	.+28     	; 0x8bc <fdevopen+0x8a>
 8a0:	f0 93 4e 02 	sts	0x024E, r31
 8a4:	e0 93 4d 02 	sts	0x024D, r30
 8a8:	80 91 4f 02 	lds	r24, 0x024F
 8ac:	90 91 50 02 	lds	r25, 0x0250
 8b0:	89 2b       	or	r24, r25
 8b2:	21 f4       	brne	.+8      	; 0x8bc <fdevopen+0x8a>
 8b4:	f0 93 50 02 	sts	0x0250, r31
 8b8:	e0 93 4f 02 	sts	0x024F, r30
 8bc:	cf 01       	movw	r24, r30
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	08 95       	ret

000008c8 <printf>:
 8c8:	a0 e0       	ldi	r26, 0x00	; 0
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	ea e6       	ldi	r30, 0x6A	; 106
 8ce:	f4 e0       	ldi	r31, 0x04	; 4
 8d0:	0c 94 57 07 	jmp	0xeae	; 0xeae <__prologue_saves__+0x20>
 8d4:	fe 01       	movw	r30, r28
 8d6:	35 96       	adiw	r30, 0x05	; 5
 8d8:	61 91       	ld	r22, Z+
 8da:	71 91       	ld	r23, Z+
 8dc:	af 01       	movw	r20, r30
 8de:	80 91 4d 02 	lds	r24, 0x024D
 8e2:	90 91 4e 02 	lds	r25, 0x024E
 8e6:	0e 94 ac 04 	call	0x958	; 0x958 <vfprintf>
 8ea:	e2 e0       	ldi	r30, 0x02	; 2
 8ec:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__epilogue_restores__+0x20>

000008f0 <putchar>:
 8f0:	60 91 4d 02 	lds	r22, 0x024D
 8f4:	70 91 4e 02 	lds	r23, 0x024E
 8f8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 8fc:	08 95       	ret

000008fe <puts>:
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	e0 91 4d 02 	lds	r30, 0x024D
 90a:	f0 91 4e 02 	lds	r31, 0x024E
 90e:	23 81       	ldd	r18, Z+3	; 0x03
 910:	21 ff       	sbrs	r18, 1
 912:	1b c0       	rjmp	.+54     	; 0x94a <puts+0x4c>
 914:	ec 01       	movw	r28, r24
 916:	00 e0       	ldi	r16, 0x00	; 0
 918:	10 e0       	ldi	r17, 0x00	; 0
 91a:	89 91       	ld	r24, Y+
 91c:	60 91 4d 02 	lds	r22, 0x024D
 920:	70 91 4e 02 	lds	r23, 0x024E
 924:	db 01       	movw	r26, r22
 926:	18 96       	adiw	r26, 0x08	; 8
 928:	ed 91       	ld	r30, X+
 92a:	fc 91       	ld	r31, X
 92c:	19 97       	sbiw	r26, 0x09	; 9
 92e:	88 23       	and	r24, r24
 930:	31 f0       	breq	.+12     	; 0x93e <puts+0x40>
 932:	09 95       	icall
 934:	89 2b       	or	r24, r25
 936:	89 f3       	breq	.-30     	; 0x91a <puts+0x1c>
 938:	0f ef       	ldi	r16, 0xFF	; 255
 93a:	1f ef       	ldi	r17, 0xFF	; 255
 93c:	ee cf       	rjmp	.-36     	; 0x91a <puts+0x1c>
 93e:	8a e0       	ldi	r24, 0x0A	; 10
 940:	09 95       	icall
 942:	89 2b       	or	r24, r25
 944:	11 f4       	brne	.+4      	; 0x94a <puts+0x4c>
 946:	c8 01       	movw	r24, r16
 948:	02 c0       	rjmp	.+4      	; 0x94e <puts+0x50>
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	9f ef       	ldi	r25, 0xFF	; 255
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	1f 91       	pop	r17
 954:	0f 91       	pop	r16
 956:	08 95       	ret

00000958 <vfprintf>:
 958:	ac e0       	ldi	r26, 0x0C	; 12
 95a:	b0 e0       	ldi	r27, 0x00	; 0
 95c:	e2 eb       	ldi	r30, 0xB2	; 178
 95e:	f4 e0       	ldi	r31, 0x04	; 4
 960:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__prologue_saves__>
 964:	7c 01       	movw	r14, r24
 966:	6b 01       	movw	r12, r22
 968:	8a 01       	movw	r16, r20
 96a:	fc 01       	movw	r30, r24
 96c:	17 82       	std	Z+7, r1	; 0x07
 96e:	16 82       	std	Z+6, r1	; 0x06
 970:	83 81       	ldd	r24, Z+3	; 0x03
 972:	81 ff       	sbrs	r24, 1
 974:	bd c1       	rjmp	.+890    	; 0xcf0 <vfprintf+0x398>
 976:	ce 01       	movw	r24, r28
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	4c 01       	movw	r8, r24
 97c:	f7 01       	movw	r30, r14
 97e:	93 81       	ldd	r25, Z+3	; 0x03
 980:	f6 01       	movw	r30, r12
 982:	93 fd       	sbrc	r25, 3
 984:	85 91       	lpm	r24, Z+
 986:	93 ff       	sbrs	r25, 3
 988:	81 91       	ld	r24, Z+
 98a:	6f 01       	movw	r12, r30
 98c:	88 23       	and	r24, r24
 98e:	09 f4       	brne	.+2      	; 0x992 <vfprintf+0x3a>
 990:	ab c1       	rjmp	.+854    	; 0xce8 <vfprintf+0x390>
 992:	85 32       	cpi	r24, 0x25	; 37
 994:	39 f4       	brne	.+14     	; 0x9a4 <vfprintf+0x4c>
 996:	93 fd       	sbrc	r25, 3
 998:	85 91       	lpm	r24, Z+
 99a:	93 ff       	sbrs	r25, 3
 99c:	81 91       	ld	r24, Z+
 99e:	6f 01       	movw	r12, r30
 9a0:	85 32       	cpi	r24, 0x25	; 37
 9a2:	29 f4       	brne	.+10     	; 0x9ae <vfprintf+0x56>
 9a4:	b7 01       	movw	r22, r14
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 9ac:	e7 cf       	rjmp	.-50     	; 0x97c <vfprintf+0x24>
 9ae:	51 2c       	mov	r5, r1
 9b0:	31 2c       	mov	r3, r1
 9b2:	20 e0       	ldi	r18, 0x00	; 0
 9b4:	20 32       	cpi	r18, 0x20	; 32
 9b6:	a0 f4       	brcc	.+40     	; 0x9e0 <vfprintf+0x88>
 9b8:	8b 32       	cpi	r24, 0x2B	; 43
 9ba:	69 f0       	breq	.+26     	; 0x9d6 <vfprintf+0x7e>
 9bc:	30 f4       	brcc	.+12     	; 0x9ca <vfprintf+0x72>
 9be:	80 32       	cpi	r24, 0x20	; 32
 9c0:	59 f0       	breq	.+22     	; 0x9d8 <vfprintf+0x80>
 9c2:	83 32       	cpi	r24, 0x23	; 35
 9c4:	69 f4       	brne	.+26     	; 0x9e0 <vfprintf+0x88>
 9c6:	20 61       	ori	r18, 0x10	; 16
 9c8:	2c c0       	rjmp	.+88     	; 0xa22 <vfprintf+0xca>
 9ca:	8d 32       	cpi	r24, 0x2D	; 45
 9cc:	39 f0       	breq	.+14     	; 0x9dc <vfprintf+0x84>
 9ce:	80 33       	cpi	r24, 0x30	; 48
 9d0:	39 f4       	brne	.+14     	; 0x9e0 <vfprintf+0x88>
 9d2:	21 60       	ori	r18, 0x01	; 1
 9d4:	26 c0       	rjmp	.+76     	; 0xa22 <vfprintf+0xca>
 9d6:	22 60       	ori	r18, 0x02	; 2
 9d8:	24 60       	ori	r18, 0x04	; 4
 9da:	23 c0       	rjmp	.+70     	; 0xa22 <vfprintf+0xca>
 9dc:	28 60       	ori	r18, 0x08	; 8
 9de:	21 c0       	rjmp	.+66     	; 0xa22 <vfprintf+0xca>
 9e0:	27 fd       	sbrc	r18, 7
 9e2:	27 c0       	rjmp	.+78     	; 0xa32 <vfprintf+0xda>
 9e4:	30 ed       	ldi	r19, 0xD0	; 208
 9e6:	38 0f       	add	r19, r24
 9e8:	3a 30       	cpi	r19, 0x0A	; 10
 9ea:	78 f4       	brcc	.+30     	; 0xa0a <vfprintf+0xb2>
 9ec:	26 ff       	sbrs	r18, 6
 9ee:	06 c0       	rjmp	.+12     	; 0x9fc <vfprintf+0xa4>
 9f0:	fa e0       	ldi	r31, 0x0A	; 10
 9f2:	5f 9e       	mul	r5, r31
 9f4:	30 0d       	add	r19, r0
 9f6:	11 24       	eor	r1, r1
 9f8:	53 2e       	mov	r5, r19
 9fa:	13 c0       	rjmp	.+38     	; 0xa22 <vfprintf+0xca>
 9fc:	8a e0       	ldi	r24, 0x0A	; 10
 9fe:	38 9e       	mul	r3, r24
 a00:	30 0d       	add	r19, r0
 a02:	11 24       	eor	r1, r1
 a04:	33 2e       	mov	r3, r19
 a06:	20 62       	ori	r18, 0x20	; 32
 a08:	0c c0       	rjmp	.+24     	; 0xa22 <vfprintf+0xca>
 a0a:	8e 32       	cpi	r24, 0x2E	; 46
 a0c:	21 f4       	brne	.+8      	; 0xa16 <vfprintf+0xbe>
 a0e:	26 fd       	sbrc	r18, 6
 a10:	6b c1       	rjmp	.+726    	; 0xce8 <vfprintf+0x390>
 a12:	20 64       	ori	r18, 0x40	; 64
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <vfprintf+0xca>
 a16:	8c 36       	cpi	r24, 0x6C	; 108
 a18:	11 f4       	brne	.+4      	; 0xa1e <vfprintf+0xc6>
 a1a:	20 68       	ori	r18, 0x80	; 128
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <vfprintf+0xca>
 a1e:	88 36       	cpi	r24, 0x68	; 104
 a20:	41 f4       	brne	.+16     	; 0xa32 <vfprintf+0xda>
 a22:	f6 01       	movw	r30, r12
 a24:	93 fd       	sbrc	r25, 3
 a26:	85 91       	lpm	r24, Z+
 a28:	93 ff       	sbrs	r25, 3
 a2a:	81 91       	ld	r24, Z+
 a2c:	6f 01       	movw	r12, r30
 a2e:	81 11       	cpse	r24, r1
 a30:	c1 cf       	rjmp	.-126    	; 0x9b4 <vfprintf+0x5c>
 a32:	98 2f       	mov	r25, r24
 a34:	9f 7d       	andi	r25, 0xDF	; 223
 a36:	95 54       	subi	r25, 0x45	; 69
 a38:	93 30       	cpi	r25, 0x03	; 3
 a3a:	28 f4       	brcc	.+10     	; 0xa46 <vfprintf+0xee>
 a3c:	0c 5f       	subi	r16, 0xFC	; 252
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	ff e3       	ldi	r31, 0x3F	; 63
 a42:	f9 83       	std	Y+1, r31	; 0x01
 a44:	0d c0       	rjmp	.+26     	; 0xa60 <vfprintf+0x108>
 a46:	83 36       	cpi	r24, 0x63	; 99
 a48:	31 f0       	breq	.+12     	; 0xa56 <vfprintf+0xfe>
 a4a:	83 37       	cpi	r24, 0x73	; 115
 a4c:	71 f0       	breq	.+28     	; 0xa6a <vfprintf+0x112>
 a4e:	83 35       	cpi	r24, 0x53	; 83
 a50:	09 f0       	breq	.+2      	; 0xa54 <vfprintf+0xfc>
 a52:	5b c0       	rjmp	.+182    	; 0xb0a <vfprintf+0x1b2>
 a54:	22 c0       	rjmp	.+68     	; 0xa9a <vfprintf+0x142>
 a56:	f8 01       	movw	r30, r16
 a58:	80 81       	ld	r24, Z
 a5a:	89 83       	std	Y+1, r24	; 0x01
 a5c:	0e 5f       	subi	r16, 0xFE	; 254
 a5e:	1f 4f       	sbci	r17, 0xFF	; 255
 a60:	44 24       	eor	r4, r4
 a62:	43 94       	inc	r4
 a64:	51 2c       	mov	r5, r1
 a66:	54 01       	movw	r10, r8
 a68:	15 c0       	rjmp	.+42     	; 0xa94 <vfprintf+0x13c>
 a6a:	38 01       	movw	r6, r16
 a6c:	f2 e0       	ldi	r31, 0x02	; 2
 a6e:	6f 0e       	add	r6, r31
 a70:	71 1c       	adc	r7, r1
 a72:	f8 01       	movw	r30, r16
 a74:	a0 80       	ld	r10, Z
 a76:	b1 80       	ldd	r11, Z+1	; 0x01
 a78:	26 ff       	sbrs	r18, 6
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <vfprintf+0x12a>
 a7c:	65 2d       	mov	r22, r5
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <vfprintf+0x12e>
 a82:	6f ef       	ldi	r22, 0xFF	; 255
 a84:	7f ef       	ldi	r23, 0xFF	; 255
 a86:	c5 01       	movw	r24, r10
 a88:	2c 87       	std	Y+12, r18	; 0x0c
 a8a:	0e 94 ac 06 	call	0xd58	; 0xd58 <strnlen>
 a8e:	2c 01       	movw	r4, r24
 a90:	83 01       	movw	r16, r6
 a92:	2c 85       	ldd	r18, Y+12	; 0x0c
 a94:	2f 77       	andi	r18, 0x7F	; 127
 a96:	22 2e       	mov	r2, r18
 a98:	17 c0       	rjmp	.+46     	; 0xac8 <vfprintf+0x170>
 a9a:	38 01       	movw	r6, r16
 a9c:	f2 e0       	ldi	r31, 0x02	; 2
 a9e:	6f 0e       	add	r6, r31
 aa0:	71 1c       	adc	r7, r1
 aa2:	f8 01       	movw	r30, r16
 aa4:	a0 80       	ld	r10, Z
 aa6:	b1 80       	ldd	r11, Z+1	; 0x01
 aa8:	26 ff       	sbrs	r18, 6
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <vfprintf+0x15a>
 aac:	65 2d       	mov	r22, r5
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <vfprintf+0x15e>
 ab2:	6f ef       	ldi	r22, 0xFF	; 255
 ab4:	7f ef       	ldi	r23, 0xFF	; 255
 ab6:	c5 01       	movw	r24, r10
 ab8:	2c 87       	std	Y+12, r18	; 0x0c
 aba:	0e 94 9a 06 	call	0xd34	; 0xd34 <strnlen_P>
 abe:	2c 01       	movw	r4, r24
 ac0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac2:	20 68       	ori	r18, 0x80	; 128
 ac4:	22 2e       	mov	r2, r18
 ac6:	83 01       	movw	r16, r6
 ac8:	23 fc       	sbrc	r2, 3
 aca:	1b c0       	rjmp	.+54     	; 0xb02 <vfprintf+0x1aa>
 acc:	83 2d       	mov	r24, r3
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	48 16       	cp	r4, r24
 ad2:	59 06       	cpc	r5, r25
 ad4:	b0 f4       	brcc	.+44     	; 0xb02 <vfprintf+0x1aa>
 ad6:	b7 01       	movw	r22, r14
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 ae0:	3a 94       	dec	r3
 ae2:	f4 cf       	rjmp	.-24     	; 0xacc <vfprintf+0x174>
 ae4:	f5 01       	movw	r30, r10
 ae6:	27 fc       	sbrc	r2, 7
 ae8:	85 91       	lpm	r24, Z+
 aea:	27 fe       	sbrs	r2, 7
 aec:	81 91       	ld	r24, Z+
 aee:	5f 01       	movw	r10, r30
 af0:	b7 01       	movw	r22, r14
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 af8:	31 10       	cpse	r3, r1
 afa:	3a 94       	dec	r3
 afc:	f1 e0       	ldi	r31, 0x01	; 1
 afe:	4f 1a       	sub	r4, r31
 b00:	51 08       	sbc	r5, r1
 b02:	41 14       	cp	r4, r1
 b04:	51 04       	cpc	r5, r1
 b06:	71 f7       	brne	.-36     	; 0xae4 <vfprintf+0x18c>
 b08:	e5 c0       	rjmp	.+458    	; 0xcd4 <vfprintf+0x37c>
 b0a:	84 36       	cpi	r24, 0x64	; 100
 b0c:	11 f0       	breq	.+4      	; 0xb12 <vfprintf+0x1ba>
 b0e:	89 36       	cpi	r24, 0x69	; 105
 b10:	39 f5       	brne	.+78     	; 0xb60 <vfprintf+0x208>
 b12:	f8 01       	movw	r30, r16
 b14:	27 ff       	sbrs	r18, 7
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <vfprintf+0x1ce>
 b18:	60 81       	ld	r22, Z
 b1a:	71 81       	ldd	r23, Z+1	; 0x01
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	93 81       	ldd	r25, Z+3	; 0x03
 b20:	0c 5f       	subi	r16, 0xFC	; 252
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	08 c0       	rjmp	.+16     	; 0xb36 <vfprintf+0x1de>
 b26:	60 81       	ld	r22, Z
 b28:	71 81       	ldd	r23, Z+1	; 0x01
 b2a:	88 27       	eor	r24, r24
 b2c:	77 fd       	sbrc	r23, 7
 b2e:	80 95       	com	r24
 b30:	98 2f       	mov	r25, r24
 b32:	0e 5f       	subi	r16, 0xFE	; 254
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	2f 76       	andi	r18, 0x6F	; 111
 b38:	b2 2e       	mov	r11, r18
 b3a:	97 ff       	sbrs	r25, 7
 b3c:	09 c0       	rjmp	.+18     	; 0xb50 <vfprintf+0x1f8>
 b3e:	90 95       	com	r25
 b40:	80 95       	com	r24
 b42:	70 95       	com	r23
 b44:	61 95       	neg	r22
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	20 68       	ori	r18, 0x80	; 128
 b4e:	b2 2e       	mov	r11, r18
 b50:	2a e0       	ldi	r18, 0x0A	; 10
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	a4 01       	movw	r20, r8
 b56:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__ultoa_invert>
 b5a:	a8 2e       	mov	r10, r24
 b5c:	a8 18       	sub	r10, r8
 b5e:	44 c0       	rjmp	.+136    	; 0xbe8 <vfprintf+0x290>
 b60:	85 37       	cpi	r24, 0x75	; 117
 b62:	29 f4       	brne	.+10     	; 0xb6e <vfprintf+0x216>
 b64:	2f 7e       	andi	r18, 0xEF	; 239
 b66:	b2 2e       	mov	r11, r18
 b68:	2a e0       	ldi	r18, 0x0A	; 10
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	25 c0       	rjmp	.+74     	; 0xbb8 <vfprintf+0x260>
 b6e:	f2 2f       	mov	r31, r18
 b70:	f9 7f       	andi	r31, 0xF9	; 249
 b72:	bf 2e       	mov	r11, r31
 b74:	8f 36       	cpi	r24, 0x6F	; 111
 b76:	c1 f0       	breq	.+48     	; 0xba8 <vfprintf+0x250>
 b78:	18 f4       	brcc	.+6      	; 0xb80 <vfprintf+0x228>
 b7a:	88 35       	cpi	r24, 0x58	; 88
 b7c:	79 f0       	breq	.+30     	; 0xb9c <vfprintf+0x244>
 b7e:	b4 c0       	rjmp	.+360    	; 0xce8 <vfprintf+0x390>
 b80:	80 37       	cpi	r24, 0x70	; 112
 b82:	19 f0       	breq	.+6      	; 0xb8a <vfprintf+0x232>
 b84:	88 37       	cpi	r24, 0x78	; 120
 b86:	21 f0       	breq	.+8      	; 0xb90 <vfprintf+0x238>
 b88:	af c0       	rjmp	.+350    	; 0xce8 <vfprintf+0x390>
 b8a:	2f 2f       	mov	r18, r31
 b8c:	20 61       	ori	r18, 0x10	; 16
 b8e:	b2 2e       	mov	r11, r18
 b90:	b4 fe       	sbrs	r11, 4
 b92:	0d c0       	rjmp	.+26     	; 0xbae <vfprintf+0x256>
 b94:	8b 2d       	mov	r24, r11
 b96:	84 60       	ori	r24, 0x04	; 4
 b98:	b8 2e       	mov	r11, r24
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <vfprintf+0x256>
 b9c:	24 ff       	sbrs	r18, 4
 b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <vfprintf+0x25c>
 ba0:	9f 2f       	mov	r25, r31
 ba2:	96 60       	ori	r25, 0x06	; 6
 ba4:	b9 2e       	mov	r11, r25
 ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <vfprintf+0x25c>
 ba8:	28 e0       	ldi	r18, 0x08	; 8
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	05 c0       	rjmp	.+10     	; 0xbb8 <vfprintf+0x260>
 bae:	20 e1       	ldi	r18, 0x10	; 16
 bb0:	30 e0       	ldi	r19, 0x00	; 0
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <vfprintf+0x260>
 bb4:	20 e1       	ldi	r18, 0x10	; 16
 bb6:	32 e0       	ldi	r19, 0x02	; 2
 bb8:	f8 01       	movw	r30, r16
 bba:	b7 fe       	sbrs	r11, 7
 bbc:	07 c0       	rjmp	.+14     	; 0xbcc <vfprintf+0x274>
 bbe:	60 81       	ld	r22, Z
 bc0:	71 81       	ldd	r23, Z+1	; 0x01
 bc2:	82 81       	ldd	r24, Z+2	; 0x02
 bc4:	93 81       	ldd	r25, Z+3	; 0x03
 bc6:	0c 5f       	subi	r16, 0xFC	; 252
 bc8:	1f 4f       	sbci	r17, 0xFF	; 255
 bca:	06 c0       	rjmp	.+12     	; 0xbd8 <vfprintf+0x280>
 bcc:	60 81       	ld	r22, Z
 bce:	71 81       	ldd	r23, Z+1	; 0x01
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 5f       	subi	r16, 0xFE	; 254
 bd6:	1f 4f       	sbci	r17, 0xFF	; 255
 bd8:	a4 01       	movw	r20, r8
 bda:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__ultoa_invert>
 bde:	a8 2e       	mov	r10, r24
 be0:	a8 18       	sub	r10, r8
 be2:	fb 2d       	mov	r31, r11
 be4:	ff 77       	andi	r31, 0x7F	; 127
 be6:	bf 2e       	mov	r11, r31
 be8:	b6 fe       	sbrs	r11, 6
 bea:	0b c0       	rjmp	.+22     	; 0xc02 <vfprintf+0x2aa>
 bec:	2b 2d       	mov	r18, r11
 bee:	2e 7f       	andi	r18, 0xFE	; 254
 bf0:	a5 14       	cp	r10, r5
 bf2:	50 f4       	brcc	.+20     	; 0xc08 <vfprintf+0x2b0>
 bf4:	b4 fe       	sbrs	r11, 4
 bf6:	0a c0       	rjmp	.+20     	; 0xc0c <vfprintf+0x2b4>
 bf8:	b2 fc       	sbrc	r11, 2
 bfa:	08 c0       	rjmp	.+16     	; 0xc0c <vfprintf+0x2b4>
 bfc:	2b 2d       	mov	r18, r11
 bfe:	2e 7e       	andi	r18, 0xEE	; 238
 c00:	05 c0       	rjmp	.+10     	; 0xc0c <vfprintf+0x2b4>
 c02:	7a 2c       	mov	r7, r10
 c04:	2b 2d       	mov	r18, r11
 c06:	03 c0       	rjmp	.+6      	; 0xc0e <vfprintf+0x2b6>
 c08:	7a 2c       	mov	r7, r10
 c0a:	01 c0       	rjmp	.+2      	; 0xc0e <vfprintf+0x2b6>
 c0c:	75 2c       	mov	r7, r5
 c0e:	24 ff       	sbrs	r18, 4
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <vfprintf+0x2d4>
 c12:	fe 01       	movw	r30, r28
 c14:	ea 0d       	add	r30, r10
 c16:	f1 1d       	adc	r31, r1
 c18:	80 81       	ld	r24, Z
 c1a:	80 33       	cpi	r24, 0x30	; 48
 c1c:	11 f4       	brne	.+4      	; 0xc22 <vfprintf+0x2ca>
 c1e:	29 7e       	andi	r18, 0xE9	; 233
 c20:	09 c0       	rjmp	.+18     	; 0xc34 <vfprintf+0x2dc>
 c22:	22 ff       	sbrs	r18, 2
 c24:	06 c0       	rjmp	.+12     	; 0xc32 <vfprintf+0x2da>
 c26:	73 94       	inc	r7
 c28:	73 94       	inc	r7
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <vfprintf+0x2dc>
 c2c:	82 2f       	mov	r24, r18
 c2e:	86 78       	andi	r24, 0x86	; 134
 c30:	09 f0       	breq	.+2      	; 0xc34 <vfprintf+0x2dc>
 c32:	73 94       	inc	r7
 c34:	23 fd       	sbrc	r18, 3
 c36:	13 c0       	rjmp	.+38     	; 0xc5e <vfprintf+0x306>
 c38:	20 ff       	sbrs	r18, 0
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x2f0>
 c3c:	5a 2c       	mov	r5, r10
 c3e:	73 14       	cp	r7, r3
 c40:	18 f4       	brcc	.+6      	; 0xc48 <vfprintf+0x2f0>
 c42:	53 0c       	add	r5, r3
 c44:	57 18       	sub	r5, r7
 c46:	73 2c       	mov	r7, r3
 c48:	73 14       	cp	r7, r3
 c4a:	68 f4       	brcc	.+26     	; 0xc66 <vfprintf+0x30e>
 c4c:	b7 01       	movw	r22, r14
 c4e:	80 e2       	ldi	r24, 0x20	; 32
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	2c 87       	std	Y+12, r18	; 0x0c
 c54:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 c58:	73 94       	inc	r7
 c5a:	2c 85       	ldd	r18, Y+12	; 0x0c
 c5c:	f5 cf       	rjmp	.-22     	; 0xc48 <vfprintf+0x2f0>
 c5e:	73 14       	cp	r7, r3
 c60:	10 f4       	brcc	.+4      	; 0xc66 <vfprintf+0x30e>
 c62:	37 18       	sub	r3, r7
 c64:	01 c0       	rjmp	.+2      	; 0xc68 <vfprintf+0x310>
 c66:	31 2c       	mov	r3, r1
 c68:	24 ff       	sbrs	r18, 4
 c6a:	12 c0       	rjmp	.+36     	; 0xc90 <vfprintf+0x338>
 c6c:	b7 01       	movw	r22, r14
 c6e:	80 e3       	ldi	r24, 0x30	; 48
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	2c 87       	std	Y+12, r18	; 0x0c
 c74:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 c78:	2c 85       	ldd	r18, Y+12	; 0x0c
 c7a:	22 ff       	sbrs	r18, 2
 c7c:	17 c0       	rjmp	.+46     	; 0xcac <vfprintf+0x354>
 c7e:	21 ff       	sbrs	r18, 1
 c80:	03 c0       	rjmp	.+6      	; 0xc88 <vfprintf+0x330>
 c82:	88 e5       	ldi	r24, 0x58	; 88
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <vfprintf+0x334>
 c88:	88 e7       	ldi	r24, 0x78	; 120
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	b7 01       	movw	r22, r14
 c8e:	0c c0       	rjmp	.+24     	; 0xca8 <vfprintf+0x350>
 c90:	82 2f       	mov	r24, r18
 c92:	86 78       	andi	r24, 0x86	; 134
 c94:	59 f0       	breq	.+22     	; 0xcac <vfprintf+0x354>
 c96:	21 fd       	sbrc	r18, 1
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x346>
 c9a:	80 e2       	ldi	r24, 0x20	; 32
 c9c:	01 c0       	rjmp	.+2      	; 0xca0 <vfprintf+0x348>
 c9e:	8b e2       	ldi	r24, 0x2B	; 43
 ca0:	27 fd       	sbrc	r18, 7
 ca2:	8d e2       	ldi	r24, 0x2D	; 45
 ca4:	b7 01       	movw	r22, r14
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 cac:	a5 14       	cp	r10, r5
 cae:	38 f4       	brcc	.+14     	; 0xcbe <vfprintf+0x366>
 cb0:	b7 01       	movw	r22, r14
 cb2:	80 e3       	ldi	r24, 0x30	; 48
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 cba:	5a 94       	dec	r5
 cbc:	f7 cf       	rjmp	.-18     	; 0xcac <vfprintf+0x354>
 cbe:	aa 94       	dec	r10
 cc0:	f4 01       	movw	r30, r8
 cc2:	ea 0d       	add	r30, r10
 cc4:	f1 1d       	adc	r31, r1
 cc6:	80 81       	ld	r24, Z
 cc8:	b7 01       	movw	r22, r14
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 cd0:	a1 10       	cpse	r10, r1
 cd2:	f5 cf       	rjmp	.-22     	; 0xcbe <vfprintf+0x366>
 cd4:	33 20       	and	r3, r3
 cd6:	09 f4       	brne	.+2      	; 0xcda <vfprintf+0x382>
 cd8:	51 ce       	rjmp	.-862    	; 0x97c <vfprintf+0x24>
 cda:	b7 01       	movw	r22, r14
 cdc:	80 e2       	ldi	r24, 0x20	; 32
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 ce4:	3a 94       	dec	r3
 ce6:	f6 cf       	rjmp	.-20     	; 0xcd4 <vfprintf+0x37c>
 ce8:	f7 01       	movw	r30, r14
 cea:	86 81       	ldd	r24, Z+6	; 0x06
 cec:	97 81       	ldd	r25, Z+7	; 0x07
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x39c>
 cf0:	8f ef       	ldi	r24, 0xFF	; 255
 cf2:	9f ef       	ldi	r25, 0xFF	; 255
 cf4:	2c 96       	adiw	r28, 0x0c	; 12
 cf6:	e2 e1       	ldi	r30, 0x12	; 18
 cf8:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__epilogue_restores__>

00000cfc <calloc>:
 cfc:	0f 93       	push	r16
 cfe:	1f 93       	push	r17
 d00:	cf 93       	push	r28
 d02:	df 93       	push	r29
 d04:	86 9f       	mul	r24, r22
 d06:	80 01       	movw	r16, r0
 d08:	87 9f       	mul	r24, r23
 d0a:	10 0d       	add	r17, r0
 d0c:	96 9f       	mul	r25, r22
 d0e:	10 0d       	add	r17, r0
 d10:	11 24       	eor	r1, r1
 d12:	c8 01       	movw	r24, r16
 d14:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <malloc>
 d18:	ec 01       	movw	r28, r24
 d1a:	00 97       	sbiw	r24, 0x00	; 0
 d1c:	29 f0       	breq	.+10     	; 0xd28 <calloc+0x2c>
 d1e:	a8 01       	movw	r20, r16
 d20:	60 e0       	ldi	r22, 0x00	; 0
 d22:	70 e0       	ldi	r23, 0x00	; 0
 d24:	0e 94 a5 06 	call	0xd4a	; 0xd4a <memset>
 d28:	ce 01       	movw	r24, r28
 d2a:	df 91       	pop	r29
 d2c:	cf 91       	pop	r28
 d2e:	1f 91       	pop	r17
 d30:	0f 91       	pop	r16
 d32:	08 95       	ret

00000d34 <strnlen_P>:
 d34:	fc 01       	movw	r30, r24
 d36:	05 90       	lpm	r0, Z+
 d38:	61 50       	subi	r22, 0x01	; 1
 d3a:	70 40       	sbci	r23, 0x00	; 0
 d3c:	01 10       	cpse	r0, r1
 d3e:	d8 f7       	brcc	.-10     	; 0xd36 <strnlen_P+0x2>
 d40:	80 95       	com	r24
 d42:	90 95       	com	r25
 d44:	8e 0f       	add	r24, r30
 d46:	9f 1f       	adc	r25, r31
 d48:	08 95       	ret

00000d4a <memset>:
 d4a:	dc 01       	movw	r26, r24
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <memset+0x6>
 d4e:	6d 93       	st	X+, r22
 d50:	41 50       	subi	r20, 0x01	; 1
 d52:	50 40       	sbci	r21, 0x00	; 0
 d54:	e0 f7       	brcc	.-8      	; 0xd4e <memset+0x4>
 d56:	08 95       	ret

00000d58 <strnlen>:
 d58:	fc 01       	movw	r30, r24
 d5a:	61 50       	subi	r22, 0x01	; 1
 d5c:	70 40       	sbci	r23, 0x00	; 0
 d5e:	01 90       	ld	r0, Z+
 d60:	01 10       	cpse	r0, r1
 d62:	d8 f7       	brcc	.-10     	; 0xd5a <strnlen+0x2>
 d64:	80 95       	com	r24
 d66:	90 95       	com	r25
 d68:	8e 0f       	add	r24, r30
 d6a:	9f 1f       	adc	r25, r31
 d6c:	08 95       	ret

00000d6e <fputc>:
 d6e:	0f 93       	push	r16
 d70:	1f 93       	push	r17
 d72:	cf 93       	push	r28
 d74:	df 93       	push	r29
 d76:	18 2f       	mov	r17, r24
 d78:	09 2f       	mov	r16, r25
 d7a:	eb 01       	movw	r28, r22
 d7c:	8b 81       	ldd	r24, Y+3	; 0x03
 d7e:	81 fd       	sbrc	r24, 1
 d80:	03 c0       	rjmp	.+6      	; 0xd88 <fputc+0x1a>
 d82:	8f ef       	ldi	r24, 0xFF	; 255
 d84:	9f ef       	ldi	r25, 0xFF	; 255
 d86:	20 c0       	rjmp	.+64     	; 0xdc8 <fputc+0x5a>
 d88:	82 ff       	sbrs	r24, 2
 d8a:	10 c0       	rjmp	.+32     	; 0xdac <fputc+0x3e>
 d8c:	4e 81       	ldd	r20, Y+6	; 0x06
 d8e:	5f 81       	ldd	r21, Y+7	; 0x07
 d90:	2c 81       	ldd	r18, Y+4	; 0x04
 d92:	3d 81       	ldd	r19, Y+5	; 0x05
 d94:	42 17       	cp	r20, r18
 d96:	53 07       	cpc	r21, r19
 d98:	7c f4       	brge	.+30     	; 0xdb8 <fputc+0x4a>
 d9a:	e8 81       	ld	r30, Y
 d9c:	f9 81       	ldd	r31, Y+1	; 0x01
 d9e:	9f 01       	movw	r18, r30
 da0:	2f 5f       	subi	r18, 0xFF	; 255
 da2:	3f 4f       	sbci	r19, 0xFF	; 255
 da4:	39 83       	std	Y+1, r19	; 0x01
 da6:	28 83       	st	Y, r18
 da8:	10 83       	st	Z, r17
 daa:	06 c0       	rjmp	.+12     	; 0xdb8 <fputc+0x4a>
 dac:	e8 85       	ldd	r30, Y+8	; 0x08
 dae:	f9 85       	ldd	r31, Y+9	; 0x09
 db0:	81 2f       	mov	r24, r17
 db2:	09 95       	icall
 db4:	89 2b       	or	r24, r25
 db6:	29 f7       	brne	.-54     	; 0xd82 <fputc+0x14>
 db8:	2e 81       	ldd	r18, Y+6	; 0x06
 dba:	3f 81       	ldd	r19, Y+7	; 0x07
 dbc:	2f 5f       	subi	r18, 0xFF	; 255
 dbe:	3f 4f       	sbci	r19, 0xFF	; 255
 dc0:	3f 83       	std	Y+7, r19	; 0x07
 dc2:	2e 83       	std	Y+6, r18	; 0x06
 dc4:	81 2f       	mov	r24, r17
 dc6:	90 2f       	mov	r25, r16
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	1f 91       	pop	r17
 dce:	0f 91       	pop	r16
 dd0:	08 95       	ret

00000dd2 <__ultoa_invert>:
 dd2:	fa 01       	movw	r30, r20
 dd4:	aa 27       	eor	r26, r26
 dd6:	28 30       	cpi	r18, 0x08	; 8
 dd8:	51 f1       	breq	.+84     	; 0xe2e <__ultoa_invert+0x5c>
 dda:	20 31       	cpi	r18, 0x10	; 16
 ddc:	81 f1       	breq	.+96     	; 0xe3e <__ultoa_invert+0x6c>
 dde:	e8 94       	clt
 de0:	6f 93       	push	r22
 de2:	6e 7f       	andi	r22, 0xFE	; 254
 de4:	6e 5f       	subi	r22, 0xFE	; 254
 de6:	7f 4f       	sbci	r23, 0xFF	; 255
 de8:	8f 4f       	sbci	r24, 0xFF	; 255
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	af 4f       	sbci	r26, 0xFF	; 255
 dee:	b1 e0       	ldi	r27, 0x01	; 1
 df0:	3e d0       	rcall	.+124    	; 0xe6e <__ultoa_invert+0x9c>
 df2:	b4 e0       	ldi	r27, 0x04	; 4
 df4:	3c d0       	rcall	.+120    	; 0xe6e <__ultoa_invert+0x9c>
 df6:	67 0f       	add	r22, r23
 df8:	78 1f       	adc	r23, r24
 dfa:	89 1f       	adc	r24, r25
 dfc:	9a 1f       	adc	r25, r26
 dfe:	a1 1d       	adc	r26, r1
 e00:	68 0f       	add	r22, r24
 e02:	79 1f       	adc	r23, r25
 e04:	8a 1f       	adc	r24, r26
 e06:	91 1d       	adc	r25, r1
 e08:	a1 1d       	adc	r26, r1
 e0a:	6a 0f       	add	r22, r26
 e0c:	71 1d       	adc	r23, r1
 e0e:	81 1d       	adc	r24, r1
 e10:	91 1d       	adc	r25, r1
 e12:	a1 1d       	adc	r26, r1
 e14:	20 d0       	rcall	.+64     	; 0xe56 <__ultoa_invert+0x84>
 e16:	09 f4       	brne	.+2      	; 0xe1a <__ultoa_invert+0x48>
 e18:	68 94       	set
 e1a:	3f 91       	pop	r19
 e1c:	2a e0       	ldi	r18, 0x0A	; 10
 e1e:	26 9f       	mul	r18, r22
 e20:	11 24       	eor	r1, r1
 e22:	30 19       	sub	r19, r0
 e24:	30 5d       	subi	r19, 0xD0	; 208
 e26:	31 93       	st	Z+, r19
 e28:	de f6       	brtc	.-74     	; 0xde0 <__ultoa_invert+0xe>
 e2a:	cf 01       	movw	r24, r30
 e2c:	08 95       	ret
 e2e:	46 2f       	mov	r20, r22
 e30:	47 70       	andi	r20, 0x07	; 7
 e32:	40 5d       	subi	r20, 0xD0	; 208
 e34:	41 93       	st	Z+, r20
 e36:	b3 e0       	ldi	r27, 0x03	; 3
 e38:	0f d0       	rcall	.+30     	; 0xe58 <__ultoa_invert+0x86>
 e3a:	c9 f7       	brne	.-14     	; 0xe2e <__ultoa_invert+0x5c>
 e3c:	f6 cf       	rjmp	.-20     	; 0xe2a <__ultoa_invert+0x58>
 e3e:	46 2f       	mov	r20, r22
 e40:	4f 70       	andi	r20, 0x0F	; 15
 e42:	40 5d       	subi	r20, 0xD0	; 208
 e44:	4a 33       	cpi	r20, 0x3A	; 58
 e46:	18 f0       	brcs	.+6      	; 0xe4e <__ultoa_invert+0x7c>
 e48:	49 5d       	subi	r20, 0xD9	; 217
 e4a:	31 fd       	sbrc	r19, 1
 e4c:	40 52       	subi	r20, 0x20	; 32
 e4e:	41 93       	st	Z+, r20
 e50:	02 d0       	rcall	.+4      	; 0xe56 <__ultoa_invert+0x84>
 e52:	a9 f7       	brne	.-22     	; 0xe3e <__ultoa_invert+0x6c>
 e54:	ea cf       	rjmp	.-44     	; 0xe2a <__ultoa_invert+0x58>
 e56:	b4 e0       	ldi	r27, 0x04	; 4
 e58:	a6 95       	lsr	r26
 e5a:	97 95       	ror	r25
 e5c:	87 95       	ror	r24
 e5e:	77 95       	ror	r23
 e60:	67 95       	ror	r22
 e62:	ba 95       	dec	r27
 e64:	c9 f7       	brne	.-14     	; 0xe58 <__ultoa_invert+0x86>
 e66:	00 97       	sbiw	r24, 0x00	; 0
 e68:	61 05       	cpc	r22, r1
 e6a:	71 05       	cpc	r23, r1
 e6c:	08 95       	ret
 e6e:	9b 01       	movw	r18, r22
 e70:	ac 01       	movw	r20, r24
 e72:	0a 2e       	mov	r0, r26
 e74:	06 94       	lsr	r0
 e76:	57 95       	ror	r21
 e78:	47 95       	ror	r20
 e7a:	37 95       	ror	r19
 e7c:	27 95       	ror	r18
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0xa2>
 e82:	62 0f       	add	r22, r18
 e84:	73 1f       	adc	r23, r19
 e86:	84 1f       	adc	r24, r20
 e88:	95 1f       	adc	r25, r21
 e8a:	a0 1d       	adc	r26, r0
 e8c:	08 95       	ret

00000e8e <__prologue_saves__>:
 e8e:	2f 92       	push	r2
 e90:	3f 92       	push	r3
 e92:	4f 92       	push	r4
 e94:	5f 92       	push	r5
 e96:	6f 92       	push	r6
 e98:	7f 92       	push	r7
 e9a:	8f 92       	push	r8
 e9c:	9f 92       	push	r9
 e9e:	af 92       	push	r10
 ea0:	bf 92       	push	r11
 ea2:	cf 92       	push	r12
 ea4:	df 92       	push	r13
 ea6:	ef 92       	push	r14
 ea8:	ff 92       	push	r15
 eaa:	0f 93       	push	r16
 eac:	1f 93       	push	r17
 eae:	cf 93       	push	r28
 eb0:	df 93       	push	r29
 eb2:	cd b7       	in	r28, 0x3d	; 61
 eb4:	de b7       	in	r29, 0x3e	; 62
 eb6:	ca 1b       	sub	r28, r26
 eb8:	db 0b       	sbc	r29, r27
 eba:	0f b6       	in	r0, 0x3f	; 63
 ebc:	f8 94       	cli
 ebe:	de bf       	out	0x3e, r29	; 62
 ec0:	0f be       	out	0x3f, r0	; 63
 ec2:	cd bf       	out	0x3d, r28	; 61
 ec4:	09 94       	ijmp

00000ec6 <__epilogue_restores__>:
 ec6:	2a 88       	ldd	r2, Y+18	; 0x12
 ec8:	39 88       	ldd	r3, Y+17	; 0x11
 eca:	48 88       	ldd	r4, Y+16	; 0x10
 ecc:	5f 84       	ldd	r5, Y+15	; 0x0f
 ece:	6e 84       	ldd	r6, Y+14	; 0x0e
 ed0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ed2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ed4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ed6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ed8:	b9 84       	ldd	r11, Y+9	; 0x09
 eda:	c8 84       	ldd	r12, Y+8	; 0x08
 edc:	df 80       	ldd	r13, Y+7	; 0x07
 ede:	ee 80       	ldd	r14, Y+6	; 0x06
 ee0:	fd 80       	ldd	r15, Y+5	; 0x05
 ee2:	0c 81       	ldd	r16, Y+4	; 0x04
 ee4:	1b 81       	ldd	r17, Y+3	; 0x03
 ee6:	aa 81       	ldd	r26, Y+2	; 0x02
 ee8:	b9 81       	ldd	r27, Y+1	; 0x01
 eea:	ce 0f       	add	r28, r30
 eec:	d1 1d       	adc	r29, r1
 eee:	0f b6       	in	r0, 0x3f	; 63
 ef0:	f8 94       	cli
 ef2:	de bf       	out	0x3e, r29	; 62
 ef4:	0f be       	out	0x3f, r0	; 63
 ef6:	cd bf       	out	0x3d, r28	; 61
 ef8:	ed 01       	movw	r28, r26
 efa:	08 95       	ret

00000efc <_exit>:
 efc:	f8 94       	cli

00000efe <__stop_program>:
 efe:	ff cf       	rjmp	.-2      	; 0xefe <__stop_program>
